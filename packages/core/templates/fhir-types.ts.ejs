/**
 * FHIR Definitions for <%= fhir.release %>/<%= fhir.version %>
 */

/* eslint-disable @typescript-eslint/no-empty-interface */

<% for (const valueSet of fhir.requiredBindingValueSets) { %>
<%= valueSet.jsDoc %>
export type <%= valueSet.safeName %> = string;

<% } %>

<% const renderElement = (element) => { %>
  <%= element.jsDoc %>
  <%= element.name %><% if (element.isOptional) { %>?<% } %>: <%= element.jsType %>;
  _<%= element.name %>?: Element<% if (element.isArray) { %>[]<% } %> | undefined;
<% } %>

<% for (const structureDef of fhir.structureDefinitions) { %>

  <% if (structureDef.derivation != "constraint" && structureDef.kind != "primitive-type") { %>
    <%= structureDef.jsDoc %>
    export interface <%= structureDef.type %> <% if (structureDef.base?.type) { %>extends <%= structureDef.base.type %> <% } %>{
      <% if (structureDef.isDomainResource) { %>
      readonly resourceType: "<%= structureDef.type %>";
      <% } else if (structureDef.isResource) { %>
      readonly resourceType: string;
      <% } %>

      <% for (const element of structureDef.ownRootElements) { %>
        <% if (element.hasDataTypeChoiceVariants) { %>
          <% for (const dataTypeVariant of element.dataTypeChoiceVariants) { %>
            <%= renderElement(dataTypeVariant) %>
          <% } %>
        <% } else { %>
          <%= renderElement(element) %>
        <% } %>
      <% } %>
    }

  <% } %>
<% } %>

/**
 *  Create a new type from T with K attributes required.
 */
export type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/**
* Create a new type from a {@link DomainResource} that contains additional guaranteed properties when the resource
* is retrieved from the server.
*/
export type Retrieved<TDomainResource extends DomainResource> = WithRequired<TDomainResource, "id"> & { meta: WithRequired<Meta, "versionId" | "lastUpdated"> };
