/**
 * Reference decorators for <%= fhir.release %>/<%= fhir.version %>
 */
 /* eslint-disable @typescript-eslint/no-explicit-any */

import { Formatter, withValueFormatter } from "./formatters";
import { codeableConceptFormatter, humanNameFormatter } from "./value-formatters";
import { CodeableConcept, DomainResource, Reference } from "./fhir-types.codegen";
<% const domainResourcesThatCanBeDecorated = fhir.domainResources
    .filter(x => x.ownRootElementsWithChoices.some(x => x.name === "title" || (x.name === "code" && x.tsType.includes("CodeableConcept")) || (x.name === "name" && (x.tsType.includes("string") || x.tsType.includes("HumanName")))));
-%>
import { <% for (domainResource of domainResourcesThatCanBeDecorated) { %> <%= domainResource.type %>, <% } %> } from "./fhir-types.codegen";

/**
 * Mapping of domain resource type and decorator function that are used to augment references created by the 
 * reference function.
 */
export const ReferenceDecorators: Record<string, (resource: DomainResource, reference: Reference) => Reference> = {
  <% for (domainResource of domainResourcesThatCanBeDecorated) { -%>
  "<%= domainResource.type %>": decorate,
  <% } -%>
};

function decorate(resource: DomainResource, reference: Reference): Reference {
  const name = (resource as any).name;
  const title: string = (resource as any).title;
  const code: CodeableConcept = (resource as any).code;
  if (typeof name === "string" && name.length > 0) {
    reference.display = name.trim();
  } else if (typeof name === "object") {
    reference.display = withValueFormatter<typeof humanNameFormatter>(Formatter.default).format("HumanName", name, { max: 1 });
  } else if (title) {
    reference.display = title;
  } else if (code) {
    reference.display = withValueFormatter<typeof codeableConceptFormatter>(Formatter.default).format("CodeableConcept", code);
  }

  return reference;
}
