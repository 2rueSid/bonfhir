/**
 * Narrative generators for <%= fhir.release %>/<%= fhir.version %>
 */

/* eslint-disable @typescript-eslint/no-explicit-any */
import { AnyDomainResource, Narrative } from "./fhir-types.codegen";
import { DefaultFormatter, Formatter } from "./formatters";
import { startCase } from "./lang-utils";
import { <% for (domainResource of fhir.domainResources) { %> <%= domainResource.type %>, <% } %> } from "./fhir-types.codegen";

/** FHIR Type, attribute name, isArray? */
export type NarrativeItemGenerator = [string, string, boolean];

export type NarrativeGenerator =
  | NarrativeItemGenerator[]
  | ((resource: any) => Narrative | string);

export const NARRATIVE_GENERATORS: Record<string, NarrativeGenerator> = {
  <% for (domainResource of fhir.domainResources) { -%>
  "<%= domainResource.type %>": [
    <% for (const element of domainResource.ownRootElementsWithChoices.filter(x => x.isSummary && !x.backboneElementName)) {-%>["<%= element.type.map((x) => x.code).join(" | ") %>", "<%= element.name %>", <%= element.isArray %>],<% } -%>
  ],
  <% } -%>
};

export interface NarrativeOptions {
  /** The formatter to use. Will use the `Formatter.default` if not provided. */
  formatter?: DefaultFormatter | null | undefined;
}

export function narrative<TResource extends AnyDomainResource>(
  resource: TResource,
  options?: NarrativeOptions | null | undefined
): Narrative | undefined {
  const generator = NARRATIVE_GENERATORS[resource.resourceType];
  if (!generator) {
    return;
  }

  if (typeof generator === "function") {
    const result = generator(resource);
    if (typeof result === "string") {
      return {
        status: "generated",
        div: result,
      };
    }

    return result;
  }

  return {
    status: "generated",
    div: `<div xmlns="http://www.w3.org/1999/xhtml">${render(
      resource,
      generator,
      options
    )}</div>`,
  };
}

function render(
  item: object,
  components: Array<NarrativeItemGenerator>,
  options: NarrativeOptions | null | undefined
): string {
  const formatter = options?.formatter ?? Formatter.default;

  return `<ul>${components
    .map((component) => {
      const [type, attribute, ] = component;
      const value = (item as any)[attribute];

      if (value == undefined) {
        return;
      }

      let renderedValue;
      const narrativeGenerator = NARRATIVE_GENERATORS[type];
      if (typeof narrativeGenerator === "function") {
        renderedValue = narrativeGenerator(value);
      } else if (typeof narrativeGenerator === "object") {
        renderedValue = render(value, narrativeGenerator, options);
      } else if (formatter.canFormat(type)) {
        renderedValue = htmlEncode(formatter.format(type, value as never));
      } else {
        return;
      }

      return `<li><span>${startCase(attribute).replace(" Boolean", "")}: </span>${renderedValue}</li>`;
    })
    .filter(Boolean)
    .join("")}</ul>`;
}

function htmlEncode(value: string): string {
  return value.replace(
    /[&<>\u00A0-\u9999]/g,
    (i) => "&#" + i.codePointAt(0) + ";"
  );
}
