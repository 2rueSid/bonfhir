/**
 * FHIR Definitions for r4b/4.3.0
 */





  


  


  


  
    /**
 * Account
 * 
 * A financial tool for tracking value accrued for a particular purpose.  In the
 * healthcare field, used to track charges for a patient, cost centers, etc.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Account.html}
 */
    export interface Account extends DomainResource {
      
      readonly resourceType: "Account";
      

      
        
          
  /**
 * The party(s) that are responsible for covering the payment of this account, and
 * what order should they be applied to the account.
 * Typically. this may be some form of insurance, internal charges, or
 * self-pay.

Local or jurisdictional business rules may determine which coverage
 * covers which types of billable items charged to the account, and in which
 * order.
Where the order is important, a local/jurisdictional extension may be
 * defined to specify the order for the type of charge.
 */
  coverage?: Array<BackboneElement> | undefined;
  _coverage?: Element[] | undefined;

        
      
        
          
  /**
 * The party(s) that contribute to payment (or part of) of the charges applied to
 * this account (including self-pay).

A coverage may only be responsible for
 * specific types of charges, and the sequence of the coverages in the account
 * could be important when processing billing.
 */
  coverage: Reference;
  _coverage?: Element | undefined;

        
      
        
          
  /**
 * The priority of the coverage in the context of this account.
 * It is common in some jurisdictions for there to be multiple coverages allocated
 * to an account, and a sequence is required to order the settling of the account
 * (often with insurance claiming).
 */
  priority?: number | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * Provides additional information about what the account tracks and how it is
 * used.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The parties responsible for balancing the account if other payment options fall
 * short.
 */
  guarantor?: Array<BackboneElement> | undefined;
  _guarantor?: Element[] | undefined;

        
      
        
          
  /**
 * A guarantor may be placed on credit hold or otherwise have their role
 * temporarily suspended.
 */
  onHold?: boolean | undefined;
  _onHold?: Element | undefined;

        
      
        
          
  /**
 * The entity who is responsible.
 */
  party: Reference;
  _party?: Element | undefined;

        
      
        
          
  /**
 * The timeframe during which the guarantor accepts responsibility for the account.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Unique identifier used to reference the account.  Might or might not be intended
 * for human use (e.g. credit card number).
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Name used for the account when displaying it to humans in reports, etc.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Indicates the service area, hospital, department, etc. with responsibility for
 * managing the Account.
 */
  owner?: Reference | undefined;
  _owner?: Element | undefined;

        
      
        
          
  /**
 * Reference to a parent Account.
 */
  partOf?: Reference | undefined;
  _partOf?: Element | undefined;

        
      
        
          
  /**
 * The date range of services associated with this account.
 * It is possible for transactions to be posted outside the service period, as long
 * as the service was provided within the defined service period.
 */
  servicePeriod?: Period | undefined;
  _servicePeriod?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether the account is presently used/usable or not.
 * This element is labeled as a modifier because the status contains the codes
 * inactive and entered-in-error that mark the Account as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Identifies the entity which incurs the expenses. While the immediate recipients
 * of services or goods might be entities related to the subject, the expenses were
 * ultimately incurred by the subject of the Account.
 * Accounts can be applied to non-patients for tracking other non-patient related
 * activities, such as group services (patients not tracked, and costs charged to
 * another body), or might not be allocated.
 */
  subject?: Array<Reference> | undefined;
  _subject?: Element[] | undefined;

        
      
        
          
  /**
 * Categorizes the account for reporting and searching purposes.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  


  
    /**
 * ActivityDefinition
 * 
 * This resource allows for the definition of some activity to be performed,
 * independent of a particular patient, practitioner, or other performance context.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ActivityDefinition.html}
 */
    export interface ActivityDefinition extends DomainResource {
      
      readonly resourceType: "ActivityDefinition";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the sites on the subject's body where the procedure should be
 * performed (I.e. the target sites).
 * Only used if not implicit in the code found in ServiceRequest.type.
 */
  bodySite?: Array<CodeableConcept> | undefined;
  _bodySite?: Element[] | undefined;

        
      
        
          
  /**
 * Detailed description of the type of activity; e.g. What lab test, what
 * procedure, what kind of encounter.
 * Tends to be less relevant for activities involving particular products.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the activity definition and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the activity definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the activity definition was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the activity definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the activity definition.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the activity definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the activity
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the activity definition as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the activity definition is presumed
 * to be the predominant language in the place the activity definition was
 * created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Set this to true if the definition is to indicate that a particular activity
 * should NOT be performed. If true, this element should be interpreted to
 * reinforce a negative coding. For example NPO as a code with a doNotPerform of
 * true would still indicate to NOT perform the action.
 * This element is not intended to be used to communicate a decision support
 * response to cancel an order in progress. That should be done with the "remove"
 * type of a PlanDefinition or RequestGroup.
 */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;

        
      
        
          
  /**
 * Provides detailed dosage instructions in the same way that they are described
 * for MedicationRequest resources.
 * If a dosage instruction is used, the definition should not specify timing or
 * quantity.
 */
  dosage?: Array<Dosage> | undefined;
  _dosage?: Element[] | undefined;

        
      
        
          
  /**
 * Dynamic values that will be evaluated to produce values for elements of the
 * resulting resource. For example, if the dosage of a medication must be computed
 * based on the patient's weight, a dynamic value would be used to specify an
 * expression that calculated the weight, and the path on the request resource that
 * would contain the result.
 * Dynamic values are applied in the order in which they are defined in the
 * ActivityDefinition. Note that if both a transform and dynamic values are
 * specified, the dynamic values will be applied to the result of the transform.
 */
  dynamicValue?: Array<BackboneElement> | undefined;
  _dynamicValue?: Element[] | undefined;

        
      
        
          
  /**
 * An expression specifying the value of the customized element.
 * The expression may be inlined, or may be a reference to a named expression
 * within a logic library referenced by the library element.
 */
  expression: Expression;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * The path to the element to be customized. This is the path on the resource that
 * will hold the result of the calculation defined by the expression. The specified
 * path SHALL be a FHIRPath resolveable on the specified target type of the
 * ActivityDefinition, and SHALL consist only of identifiers, constant indexers,
 * and a restricted subset of functions. The path is allowed to contain qualifiers
 * (.) to traverse sub-elements, as well as indexers ([x]) to traverse
 * multiple-cardinality sub-elements (see the [Simple FHIRPath
 * Profile](fhirpath.html#simple) for full details).
 * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple)
 * that allows path traversal, but not calculation.
 */
  path: string;
  _path?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the activity definition content was or is planned to be
 * in active use.
 * The effective period for a activity definition  determines when the content is
 * applicable for usage and is independent of publication and review dates. For
 * example, a measure intended to be used for the year 2016 might be published in
 * 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this activity definition is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of activity definitions that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this activity definition when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this activity definition outside of
 * FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the level of authority/intentionality associated with the activity and
 * where the request should fit into the workflow chain.
 */
  intent?: string | undefined;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the activity definition is intended to be
 * used.
 * It may be possible for the activity definition to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A description of the kind of resource the activity definition is representing.
 * For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
 * Typically, but not always, this is a Request resource.
 * May determine what types of extensions are permitted.
 */
  kind?: string | undefined;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A reference to a Library resource containing any formal logic used by the
 * activity definition.
 */
  library?: Array<string> | undefined;
  _library?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the facility where the activity will occur; e.g. home, hospital,
 * specific clinic, etc.
 * May reference a specific clinical location or may just identify a type of
 * location.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the activity definition. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Defines observation requirements for the action to be performed, such as body
 * weight or surface area.
 */
  observationRequirement?: Array<Reference> | undefined;
  _observationRequirement?: Element[] | undefined;

        
      
        
          
  /**
 * Defines the observations that are expected to be produced by the action.
 */
  observationResultRequirement?: Array<Reference> | undefined;
  _observationResultRequirement?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who should participate in performing the action described.
 */
  participant?: Array<BackboneElement> | undefined;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * The role the participant should play in performing the described action.
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * The type of participant in the action.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Indicates how quickly the activity  should be addressed with respect to other
 * requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
            
  /**
 * Identifies the food, drug or other product being consumed or supplied in the
 * activity.
 */
  productReference?: Reference | undefined;
  _productReference?: Element | undefined;

          
            
  /**
 * Identifies the food, drug or other product being consumed or supplied in the
 * activity.
 */
  productCodeableConcept?: CodeableConcept | undefined;
  _productCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * A profile to which the target of the activity definition is expected to conform.
 */
  profile?: string | undefined;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the activity
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the activity definition is the organization or individual primarily responsible
 * for the maintenance and upkeep of the activity definition. This is not
 * necessarily the same individual or organization that developed and initially
 * authored the content. The publisher is the primary point of contact for
 * questions or issues with the activity definition. This item SHOULD be populated
 * unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this activity definition is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the activity definition. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this activity definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Identifies the quantity expected to be consumed at once (per dose, per meal,
 * etc.).
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Related artifacts such as additional documentation, justification, or
 * bibliographic references.
 * Each related artifact is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * Defines specimen requirements for the action to be performed, such as required
 * specimens for a lab test.
 */
  specimenRequirement?: Array<Reference> | undefined;
  _specimenRequirement?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this activity definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of activity definitions that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * A code, group definition, or canonical reference that describes  or identifies
 * the intended subject of the activity being defined.  Canonical references are
 * allowed to support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * Note that the choice of canonical for the subject element was introduced in R4B
 * to support pharmaceutical quality use cases. To ensure as much
 * backwards-compatibility as possible, it is recommended to only use the new
 * canonical type with these use cases.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * A code, group definition, or canonical reference that describes  or identifies
 * the intended subject of the activity being defined.  Canonical references are
 * allowed to support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * Note that the choice of canonical for the subject element was introduced in R4B
 * to support pharmaceutical quality use cases. To ensure as much
 * backwards-compatibility as possible, it is recommended to only use the new
 * canonical type with these use cases.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
            
  /**
 * A code, group definition, or canonical reference that describes  or identifies
 * the intended subject of the activity being defined.  Canonical references are
 * allowed to support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * Note that the choice of canonical for the subject element was introduced in R4B
 * to support pharmaceutical quality use cases. To ensure as much
 * backwards-compatibility as possible, it is recommended to only use the new
 * canonical type with these use cases.
 */
  subjectCanonical?: string | undefined;
  _subjectCanonical?: Element | undefined;

          
        
      
        
          
  /**
 * An explanatory or alternate title for the activity definition giving additional
 * information about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  timingTiming?: Timing | undefined;
  _timingTiming?: Element | undefined;

          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  timingDateTime?: string | undefined;
  _timingDateTime?: Element | undefined;

          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  timingAge?: Age | undefined;
  _timingAge?: Element | undefined;

          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  timingPeriod?: Period | undefined;
  _timingPeriod?: Element | undefined;

          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  timingRange?: Range | undefined;
  _timingRange?: Element | undefined;

          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  timingDuration?: Duration | undefined;
  _timingDuration?: Element | undefined;

          
        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the activity definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Descriptive topics related to the content of the activity. Topics provide a
 * high-level categorization of the activity that can be useful for filtering and
 * searching.
 */
  topic?: Array<CodeableConcept> | undefined;
  _topic?: Element[] | undefined;

        
      
        
          
  /**
 * A reference to a StructureMap resource that defines a transform that can be
 * executed to produce the intent resource using the ActivityDefinition instance as
 * the input.
 * Note that if both a transform and dynamic values are specified, the dynamic
 * values will be applied to the result of the transform.
 */
  transform?: string | undefined;
  _transform?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this activity definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this activity definition
 * is (or will be) published. This URL can be the target of a canonical reference.
 * It SHALL remain the same when the activity definition is stored on different
 * servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A detailed description of how the activity definition is used from a clinical
 * perspective.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate activity
 * definition instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the activity definition
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the activity definition author and is not expected to
 * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence. To provide a version consistent with
 * the Decision Support Service specification, use the format Major.Minor.Revision
 * (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the
 * Decision Support Service specification. Note that a version is required for
 * non-experimental active assets.
 * There may be different activity definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the activity
 * definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  
    /**
 * Address
 * 
 * Base StructureDefinition for Address Type: An address expressed using postal
 * conventions (as opposed to GPS or other location definition formats).  This data
 * type may be used to convey addresses for use in delivering mail as well as for
 * visiting locations which might not be valid for mail delivery.  There are a
 * variety of postal address formats defined around the world.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Address.html}
 */
    export interface Address extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The name of the city, town, suburb, village or other community or delivery
 * center.
 */
  city?: string | undefined;
  _city?: Element | undefined;

        
      
        
          
  /**
 * Country - a nation as commonly understood or generally accepted.
 * ISO 3166 3 letter codes can be used in place of a human readable country name.
 */
  country?: string | undefined;
  _country?: Element | undefined;

        
      
        
          
  /**
 * The name of the administrative area (county).
 * District is sometimes known as county, but in some regions 'county' is used in
 * place of city (municipality), so county name should be conveyed in city instead.
 */
  district?: string | undefined;
  _district?: Element | undefined;

        
      
        
          
  /**
 * This component contains the house number, apartment number, street name, street
 * direction,  P.O. Box number, delivery hints, and similar address information.
 */
  line?: Array<string> | undefined;
  _line?: Element[] | undefined;

        
      
        
          
  /**
 * Time period when address was/is in use.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * A postal code designating a region defined by the postal service.
 */
  postalCode?: string | undefined;
  _postalCode?: Element | undefined;

        
      
        
          
  /**
 * Sub-unit of a country with limited sovereignty in a federally organized country.
 * A code may be used if codes are in common use (e.g. US 2 letter state codes).
 */
  state?: string | undefined;
  _state?: Element | undefined;

        
      
        
          
  /**
 * Specifies the entire address as it should be displayed e.g. on a postal label.
 * This may be provided instead of or as well as the specific parts.
 * Can provide both a text representation and parts. Applications updating an
 * address SHALL ensure that  when both text and parts are present,  no content is
 * included in the text that isn't found in a part.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Distinguishes between physical addresses (those you can visit) and mailing
 * addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
 * The definition of Address states that "address is intended to describe postal
 * addresses, not physical locations". However, many applications track whether an
 * address has a dual purpose of being a location that can be visited as well as
 * being a valid delivery destination, and Postal addresses are often used as
 * proxies for physical locations (also see the [Location](location.html#)
 * resource).
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The purpose of this address.
 * Applications can assume that an address is current unless it explicitly says
 * that it is temporary or old.
 */
  use?: string | undefined;
  _use?: Element | undefined;

        
      
    }

  


  
    /**
 * AdministrableProductDefinition
 * 
 * A medicinal product in the final form which is suitable for administering to a
 * patient (after any mixing of multiple components, dissolution etc. has been
 * performed).
 * 
 * @see {@link http://hl7.org/fhir/R4B/AdministrableProductDefinition.html}
 */
    export interface AdministrableProductDefinition extends DomainResource {
      
      readonly resourceType: "AdministrableProductDefinition";
      

      
        
          
  /**
 * The dose form of the final product after necessary reconstitution or processing.
 * Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the
 * manufactured form was 'powder for solution for injection', the administrable
 * dose form could be 'solution for injection' (once mixed with another item having
 * manufactured form 'solvent for solution for injection').
 */
  administrableDoseForm?: CodeableConcept | undefined;
  _administrableDoseForm?: Element | undefined;

        
      
        
          
  /**
 * A device that is integral to the medicinal product, in effect being considered
 * as an "ingredient" of the medicinal product. This is not intended for devices
 * that are just co-packaged.
 */
  device?: Reference | undefined;
  _device?: Element | undefined;

        
      
        
          
  /**
 * References a product from which one or more of the constituent parts of that
 * product can be prepared and used as described by this administrable product.  If
 * this administrable product describes the administration of a crushed tablet, the
 * 'formOf' would be the product representing a distribution containing tablets and
 * possibly also a cream.  This is distinct from the 'producedFrom' which refers to
 * the specific components of the product that are used in this preparation, rather
 * than the product as a whole.
 */
  formOf?: Array<Reference> | undefined;
  _formOf?: Element[] | undefined;

        
      
        
          
  /**
 * An identifier for the administrable product.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The ingredients of this administrable medicinal product. This is only needed if
 * the ingredients are not specified either using ManufacturedItemDefiniton (via
 * AdministrableProductDefinition.producedFrom) to state which component items are
 * used to make this, or using by incoming references from the Ingredient resource,
 * to state in detail which substances exist within this. This element allows a
 * basic coded ingredient to be used.
 */
  ingredient?: Array<CodeableConcept> | undefined;
  _ingredient?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the specific manufactured items that are part of the 'formOf' product
 * that are used in the preparation of this specific administrable form.  In some
 * cases, an administrable form might use all of the items from the overall product
 * (or there might only be one item), while in other cases, an administrable form
 * might use only a subset of the items available in the overall product.  For
 * example, an administrable form might involve combining a liquid and a powder
 * available as part of an overall product, but not involve applying the also
 * supplied cream.
 */
  producedFrom?: Array<Reference> | undefined;
  _producedFrom?: Element[] | undefined;

        
      
        
          
  /**
 * Characteristics e.g. a product's onset of action.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * The status of characteristic e.g. assigned or pending.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A code expressing the type of characteristic.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * A value for the characteristic.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
        
      
        
          
  /**
 * The path by which the product is taken into or makes contact with the body. In
 * some regions this is referred to as the licenced or approved route.
 * RouteOfAdministration cannot be used when the 'formOf' product already uses
 * MedicinalProductDefinition.route (and vice versa).
 */
  routeOfAdministration: Array<BackboneElement>;
  _routeOfAdministration?: Element[] | undefined;

        
      
        
          
  /**
 * Coded expression for the route.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The first dose (dose quantity) administered can be specified for the product,
 * using a numerical value and its unit of measurement.
 */
  firstDose?: Quantity | undefined;
  _firstDose?: Element | undefined;

        
      
        
          
  /**
 * The maximum dose per day (maximum dose quantity to be administered in any one
 * 24-h period) that can be administered.
 */
  maxDosePerDay?: Quantity | undefined;
  _maxDosePerDay?: Element | undefined;

        
      
        
          
  /**
 * The maximum dose per treatment period that can be administered.
 */
  maxDosePerTreatmentPeriod?: Ratio | undefined;
  _maxDosePerTreatmentPeriod?: Element | undefined;

        
      
        
          
  /**
 * The maximum single dose that can be administered, specified using a numerical
 * value and its unit of measurement.
 */
  maxSingleDose?: Quantity | undefined;
  _maxSingleDose?: Element | undefined;

        
      
        
          
  /**
 * The maximum treatment period during which the product can be administered.
 */
  maxTreatmentPeriod?: Duration | undefined;
  _maxTreatmentPeriod?: Element | undefined;

        
      
        
          
  /**
 * A species for which this route applies.
 */
  targetSpecies?: Array<BackboneElement> | undefined;
  _targetSpecies?: Element[] | undefined;

        
      
        
          
  /**
 * Coded expression for the species.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A species specific time during which consumption of animal product is not
 * appropriate.
 */
  withdrawalPeriod?: Array<BackboneElement> | undefined;
  _withdrawalPeriod?: Element[] | undefined;

        
      
        
          
  /**
 * Extra information about the withdrawal period.
 */
  supportingInformation?: string | undefined;
  _supportingInformation?: Element | undefined;

        
      
        
          
  /**
 * Coded expression for the type of tissue for which the withdrawal period applies,
 * e.g. meat, milk.
 */
  tissue: CodeableConcept;
  _tissue?: Element | undefined;

        
      
        
          
  /**
 * A value for the time.
 */
  value: Quantity;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The status of this administrable product. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of administrable products that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The presentation type in which this item is given to a patient. e.g. for a spray
 * - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in
 * 'contains 5 ml per vial').
 */
  unitOfPresentation?: CodeableConcept | undefined;
  _unitOfPresentation?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * AdverseEvent
 * 
 * Actual or  potential/avoided event causing unintended physical injury resulting
 * from or contributed to by medical care, a research study or other healthcare
 * setting factors that requires additional monitoring, treatment, or
 * hospitalization, or that results in death.
 * 
 * @see {@link http://hl7.org/fhir/R4B/AdverseEvent.html}
 */
    export interface AdverseEvent extends DomainResource {
      
      readonly resourceType: "AdverseEvent";
      

      
        
          
  /**
 * Whether the event actually happened, or just had the potential to. Note that
 * this is independent of whether anyone was affected or harmed or how severely.
 */
  actuality: string;
  _actuality?: Element | undefined;

        
      
        
          
  /**
 * The overall type of event, intended for search and filtering purposes.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Parties that may or should contribute or have contributed information to the
 * adverse event, which can consist of one or more activities.  Such information
 * includes information leading to the decision to perform the activity and how to
 * perform the activity (e.g. consultant), information that the activity itself
 * seeks to reveal (e.g. informant of clinical history), or information about what
 * activity was performed (e.g. informant witness).
 */
  contributor?: Array<Reference> | undefined;
  _contributor?: Element[] | undefined;

        
      
        
          
  /**
 * The date (and perhaps time) when the adverse event occurred.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
 */
  detected?: string | undefined;
  _detected?: Element | undefined;

        
      
        
          
  /**
 * The Encounter during which AdverseEvent was created or to which the creation of
 * this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter.  For example, if a
 * medication administration was considered an adverse event because it resulted in
 * a rash, then the encounter when the medication administration was given is the
 * context.  If the patient reports the AdverseEvent during a second encounter,
 * that second encounter is not the context.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * This element defines the specific type of event that occurred or that was
 * prevented from occurring.
 */
  event?: CodeableConcept | undefined;
  _event?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this adverse event by the performer or other
 * systems which remain constant as the resource is updated and propagates from
 * server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The information about where the adverse event occurred.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Describes the type of outcome from the adverse event.
 */
  outcome?: CodeableConcept | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * The date on which the existence of the AdverseEvent was first recorded.
 * The recordedDate represents the date when this particular AdverseEvent record
 * was created in the system, not the date of the most recent update.  The date of
 * the last record modification can be retrieved from the resource metadata.
 */
  recordedDate?: string | undefined;
  _recordedDate?: Element | undefined;

        
      
        
          
  /**
 * Information on who recorded the adverse event.  May be the patient or a
 * practitioner.
 */
  recorder?: Reference | undefined;
  _recorder?: Element | undefined;

        
      
        
          
  /**
 * AdverseEvent.referenceDocument.
 */
  referenceDocument?: Array<Reference> | undefined;
  _referenceDocument?: Element[] | undefined;

        
      
        
          
  /**
 * Includes information about the reaction that occurred as a result of exposure to
 * a substance (for example, a drug or a chemical).
 */
  resultingCondition?: Array<Reference> | undefined;
  _resultingCondition?: Element[] | undefined;

        
      
        
          
  /**
 * Assessment whether this event was of real importance.
 */
  seriousness?: CodeableConcept | undefined;
  _seriousness?: Element | undefined;

        
      
        
          
  /**
 * Describes the severity of the adverse event, in relation to the subject.
 * Contrast to AdverseEvent.seriousness - a severe rash might not be serious, but a
 * mild heart problem is.
 */
  severity?: CodeableConcept | undefined;
  _severity?: Element | undefined;

        
      
        
          
  /**
 * AdverseEvent.study.
 */
  study?: Array<Reference> | undefined;
  _study?: Element[] | undefined;

        
      
        
          
  /**
 * This subject or group impacted by the event.
 * If AdverseEvent.resultingCondition differs among members of the group, then use
 * Patient as the subject.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * AdverseEvent.subjectMedicalHistory.
 */
  subjectMedicalHistory?: Array<Reference> | undefined;
  _subjectMedicalHistory?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the entity that is suspected to have caused the adverse event.
 */
  suspectEntity?: Array<BackboneElement> | undefined;
  _suspectEntity?: Element[] | undefined;

        
      
        
          
  /**
 * Information on the possible cause of the event.
 */
  causality?: Array<BackboneElement> | undefined;
  _causality?: Element[] | undefined;

        
      
        
          
  /**
 * Assessment of if the entity caused the event.
 */
  assessment?: CodeableConcept | undefined;
  _assessment?: Element | undefined;

        
      
        
          
  /**
 * AdverseEvent.suspectEntity.causalityAuthor.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * ProbabilityScale | Bayesian | Checklist.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * AdverseEvent.suspectEntity.causalityProductRelatedness.
 */
  productRelatedness?: string | undefined;
  _productRelatedness?: Element | undefined;

        
      
        
          
  /**
 * Identifies the actual instance of what caused the adverse event.  May be a
 * substance, medication, medication administration, medication statement or a
 * device.
 */
  instance: Reference;
  _instance?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * Age
 * 
 * Base StructureDefinition for Age Type: A duration of time during which an
 * organism (or a process) has existed.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Age.html}
 */
    export interface Age extends Quantity {
      
      readonly resourceType: string;
      

      
    }

  


  


  


  
    /**
 * AllergyIntolerance
 * 
 * Risk of harmful or undesirable, physiological response which is unique to an
 * individual and associated with exposure to a substance.
 * 
 * @see {@link http://hl7.org/fhir/R4B/AllergyIntolerance.html}
 */
    export interface AllergyIntolerance extends DomainResource {
      
      readonly resourceType: "AllergyIntolerance";
      

      
        
          
  /**
 * The source of the information about the allergy that is recorded.
 * The recorder takes responsibility for the content, but can reference the source
 * from where they got it.
 */
  asserter?: Reference | undefined;
  _asserter?: Element | undefined;

        
      
        
          
  /**
 * Category of the identified substance.
 * This data element has been included because it is currently being captured in
 * some clinical systems. This data can be derived from the substance where coding
 * systems are used, and is effectively redundant in that situation.  When
 * searching on category, consider the implications of AllergyIntolerance resources
 * without a category.  For example, when searching on category = medication,
 * medication allergies that don't have a category valued will not be returned.
 * Refer to [search](search.html) for more information on how to search category
 * with a :missing modifier to get allergies that don't have a category.
 * Additionally, category should be used with caution because category can be
 * subjective based on the sender.
 */
  category?: Array<string> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The clinical status of the allergy or intolerance.
 * Refer to [discussion](extensibility.html#Special-Case) if clincalStatus is
 * missing data.
The data type is CodeableConcept because clinicalStatus has some
 * clinical judgment involved, such that there might need to be more specificity
 * than the required FHIR value set allows. For example, a SNOMED coding might
 * allow for additional specificity.
 */
  clinicalStatus?: CodeableConcept | undefined;
  _clinicalStatus?: Element | undefined;

        
      
        
          
  /**
 * Code for an allergy or intolerance statement (either a positive or a
 * negated/excluded statement).  This may be a code for a substance or
 * pharmaceutical product that is considered to be responsible for the adverse
 * reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex
 * allergy"), or a negated/excluded code for a specific substance or class (e.g.,
 * "No latex allergy") or a general or categorical negated statement (e.g.,  "No
 * known allergy", "No known drug allergies").  Note: the substance for a specific
 * reaction may be different from the substance identified as the cause of the
 * risk, but it must be consistent with it. For instance, it may be a more specific
 * substance (e.g. a brand medication) or a composite product that includes the
 * identified substance. It must be clinically safe to only process the 'code' and
 * ignore the 'reaction.substance'.  If a receiving system is unable to confirm
 * that AllergyIntolerance.reaction.substance falls within the semantic scope of
 * AllergyIntolerance.code, then the receiving system should ignore
 * AllergyIntolerance.reaction.substance.
 * It is strongly recommended that this element be populated using a terminology,
 * where possible. For example, some terminologies used include RxNorm, SNOMED CT,
 * DM+D, NDFRT, ICD-9, IDC-10, UNII, and ATC. Plain text should only be used if
 * there is no appropriate terminology available. Additional details can be
 * specified in the text.When a substance or product code is specified for the
 * 'code' element, the "default" semantic context is that this is a positive
 * statement of an allergy or intolerance (depending on the value of the 'type'
 * element, if present) condition to the specified substance/product.  In the
 * corresponding SNOMED CT allergy model, the specified substance/product is the
 * target (destination) of the "Causative agent" relationship.The
 * 'substanceExposureRisk' extension is available as a structured and more flexible
 * alternative to the 'code' element for making positive or negative allergy or
 * intolerance statements.  This extension provides the capability to make "no
 * known allergy" (or "no risk of adverse reaction") statements regarding any coded
 * substance/product (including cases when a pre-coordinated "no allergy to x"
 * concept for that substance/product does not exist).  If the
 * 'substanceExposureRisk' extension is present, the AllergyIntolerance.code
 * element SHALL be omitted.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Estimate of the potential clinical harm, or seriousness, of the reaction to the
 * identified substance.
 * The default criticality value for any propensity to an adverse reaction should
 * be 'Low Risk', indicating at the very least a relative contraindication to
 * deliberate or voluntary exposure to the substance. 'High Risk' is flagged if the
 * clinician has identified a propensity for a more serious or potentially
 * life-threatening reaction, such as anaphylaxis, and implies an absolute
 * contraindication to deliberate or voluntary exposure to the substance. If this
 * element is missing, the criticality is unknown (though it may be known
 * elsewhere).  Systems that capture a severity at the condition level are actually
 * representing the concept of criticality whereas the severity documented at the
 * reaction level is representing the true reaction severity.  Existing systems
 * that are capturing both condition criticality and reaction severity may use the
 * term "severity" to represent both.  Criticality is the worst it could be in the
 * future (i.e. situation-agnostic) whereas severity is situation-dependent.
 */
  criticality?: string | undefined;
  _criticality?: Element | undefined;

        
      
        
          
  /**
 * The encounter when the allergy or intolerance was asserted.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this AllergyIntolerance by the performer or
 * other systems which remain constant as the resource is updated and propagates
 * from server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Represents the date and/or time of the last known occurrence of a reaction
 * event.
 * This date may be replicated by one of the Onset of Reaction dates. Where a
 * textual representation of the date of last occurrence is required e.g. 'In
 * Childhood, '10 years ago' the Comment element should be used.
 */
  lastOccurrence?: string | undefined;
  _lastOccurrence?: Element | undefined;

        
      
        
          
  /**
 * Additional narrative about the propensity for the Adverse Reaction, not captured
 * in other fields.
 * For example: including reason for flagging a seriousness of 'High Risk'; and
 * instructions related to future exposure or administration of the substance, such
 * as administration within an Intensive Care Unit or under corticosteroid cover.
 * The notes should be related to an allergy or intolerance as a condition in
 * general and not related to any particular episode of it. For episode notes and
 * descriptions, use AllergyIntolerance.event.description and
 * AllergyIntolerance.event.notes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * Estimated or actual date,  date-time, or age when allergy or intolerance was
 * identified.
 */
  onsetDateTime?: string | undefined;
  _onsetDateTime?: Element | undefined;

          
            
  /**
 * Estimated or actual date,  date-time, or age when allergy or intolerance was
 * identified.
 */
  onsetAge?: Age | undefined;
  _onsetAge?: Element | undefined;

          
            
  /**
 * Estimated or actual date,  date-time, or age when allergy or intolerance was
 * identified.
 */
  onsetPeriod?: Period | undefined;
  _onsetPeriod?: Element | undefined;

          
            
  /**
 * Estimated or actual date,  date-time, or age when allergy or intolerance was
 * identified.
 */
  onsetRange?: Range | undefined;
  _onsetRange?: Element | undefined;

          
            
  /**
 * Estimated or actual date,  date-time, or age when allergy or intolerance was
 * identified.
 */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;

          
        
      
        
          
  /**
 * The patient who has the allergy or intolerance.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * Details about each adverse reaction event linked to exposure to the identified
 * substance.
 */
  reaction?: Array<BackboneElement> | undefined;
  _reaction?: Element[] | undefined;

        
      
        
          
  /**
 * Text description about the reaction as a whole, including details of the
 * manifestation if required.
 * Use the description to provide any details of a particular event of the occurred
 * reaction such as circumstances, reaction specifics, what happened before/after.
 * Information, related to the event, but not describing a particular care should
 * be captured in the comment field. For example: at the age of four, the patient
 * was given penicillin for strep throat and subsequently developed severe hives.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Identification of the route by which the subject was exposed to the substance.
 * Coding of the route of exposure with a terminology should be used wherever
 * possible.
 */
  exposureRoute?: CodeableConcept | undefined;
  _exposureRoute?: Element | undefined;

        
      
        
          
  /**
 * Clinical symptoms and/or signs that are observed or associated with the adverse
 * reaction event.
 * Manifestation can be expressed as a single word, phrase or brief description.
 * For example: nausea, rash or no reaction. It is preferable that manifestation
 * should be coded with a terminology, where possible. The values entered here may
 * be used to display on an application screen as part of a list of adverse
 * reactions, as recommended in the UK NHS CUI guidelines.  Terminologies commonly
 * used include, but are not limited to, SNOMED CT or ICD10.
 */
  manifestation: Array<CodeableConcept>;
  _manifestation?: Element[] | undefined;

        
      
        
          
  /**
 * Additional text about the adverse reaction event not captured in other fields.
 * Use this field to record information indirectly related to a particular event
 * and not captured in the description. For example: Clinical records are no longer
 * available, recorded based on information provided to the patient by her mother
 * and her mother is deceased.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Record of the date and/or time of the onset of the Reaction.
 */
  onset?: string | undefined;
  _onset?: Element | undefined;

        
      
        
          
  /**
 * Clinical assessment of the severity of the reaction event as a whole,
 * potentially considering multiple different manifestations.
 * It is acknowledged that this assessment is very subjective. There may be some
 * specific practice domains where objective scales have been applied. Objective
 * scales can be included in this model as extensions.
 */
  severity?: string | undefined;
  _severity?: Element | undefined;

        
      
        
          
  /**
 * Identification of the specific substance (or pharmaceutical product) considered
 * to be responsible for the Adverse Reaction event. Note: the substance for a
 * specific reaction may be different from the substance identified as the cause of
 * the risk, but it must be consistent with it. For instance, it may be a more
 * specific substance (e.g. a brand medication) or a composite product that
 * includes the identified substance. It must be clinically safe to only process
 * the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable
 * to confirm that AllergyIntolerance.reaction.substance falls within the semantic
 * scope of AllergyIntolerance.code, then the receiving system should ignore
 * AllergyIntolerance.reaction.substance.
 * Coding of the specific substance (or pharmaceutical product) with a terminology
 * capable of triggering decision support should be used wherever possible.  The
 * 'code' element allows for the use of a specific substance or pharmaceutical
 * product, or a group or class of substances. In the case of an allergy or
 * intolerance to a class of substances, (for example, "penicillins"), the
 * 'reaction.substance' element could be used to code the specific substance that
 * was identified as having caused the reaction (for example, "amoxycillin").
 * Duplication of the value in the 'code' and 'reaction.substance' elements is
 * acceptable when a specific substance has been recorded in 'code'.
 */
  substance?: CodeableConcept | undefined;
  _substance?: Element | undefined;

        
      
        
          
  /**
 * The recordedDate represents when this particular AllergyIntolerance record was
 * created in the system, which is often a system-generated date.
 */
  recordedDate?: string | undefined;
  _recordedDate?: Element | undefined;

        
      
        
          
  /**
 * Individual who recorded the record and takes responsibility for its content.
 */
  recorder?: Reference | undefined;
  _recorder?: Element | undefined;

        
      
        
          
  /**
 * Identification of the underlying physiological mechanism for the reaction risk.
 * Allergic (typically immune-mediated) reactions have been traditionally regarded
 * as an indicator for potential escalation to significant future risk.
 * Contemporary knowledge suggests that some reactions previously thought to be
 * immune-mediated are, in fact, non-immune, but in some cases can still pose a
 * life threatening risk. It is acknowledged that many clinicians might not be in a
 * position to distinguish the mechanism of a particular reaction. Often the term
 * "allergy" is used rather generically and may overlap with the use of
 * "intolerance" - in practice the boundaries between these two concepts might not
 * be well-defined or understood. This data element is included nevertheless,
 * because many legacy systems have captured this attribute. Immunologic testing
 * may provide supporting evidence for the basis of the reaction and the causative
 * substance, but no tests are 100% sensitive or specific for sensitivity to a
 * particular substance. If, as is commonly the case, it is unclear whether the
 * reaction is due to an allergy or an intolerance, then the type element should be
 * omitted from the resource.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Assertion about certainty associated with the propensity, or potential risk, of
 * a reaction to the identified substance (including pharmaceutical product).
 * The data type is CodeableConcept because verificationStatus has some clinical
 * judgment involved, such that there might need to be more specificity than the
 * required FHIR value set allows. For example, a SNOMED coding might allow for
 * additional specificity.
 */
  verificationStatus?: CodeableConcept | undefined;
  _verificationStatus?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  
    /**
 * Annotation
 * 
 * Base StructureDefinition for Annotation Type: A  text note which also  contains
 * information about who made the statement and when.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Annotation.html}
 */
    export interface Annotation extends Element {
      
      readonly resourceType: string;
      

      
        
          
            
  /**
 * The individual responsible for making the annotation.
 * Organization is used when there's no need for specific attribution as to who
 * made the comment.
 */
  authorReference?: Reference | undefined;
  _authorReference?: Element | undefined;

          
            
  /**
 * The individual responsible for making the annotation.
 * Organization is used when there's no need for specific attribution as to who
 * made the comment.
 */
  authorString?: string | undefined;
  _authorString?: Element | undefined;

          
        
      
        
          
  /**
 * The text of the annotation in markdown format.
 */
  text: string;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Indicates when this particular annotation was made.
 */
  time?: string | undefined;
  _time?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Appointment
 * 
 * A booking of a healthcare event among patient(s), practitioner(s), related
 * person(s) and/or device(s) for a specific date/time. This may result in one or
 * more Encounter(s).
 * 
 * @see {@link http://hl7.org/fhir/R4B/Appointment.html}
 */
    export interface Appointment extends DomainResource {
      
      readonly resourceType: "Appointment";
      

      
        
          
  /**
 * The style of appointment or patient that has been booked in the slot (not
 * service type).
 */
  appointmentType?: CodeableConcept | undefined;
  _appointmentType?: Element | undefined;

        
      
        
          
  /**
 * The service request this appointment is allocated to assess (e.g. incoming
 * referral or procedure request).
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * The coded reason for the appointment being cancelled. This is often used in
 * reporting/billing/futher processing to determine if further actions are
 * required, or specific fees apply.
 */
  cancelationReason?: CodeableConcept | undefined;
  _cancelationReason?: Element | undefined;

        
      
        
          
  /**
 * Additional comments about the appointment.
 * Additional text to aid in facilitating the appointment. For instance, a comment
 * might be, "patient should proceed immediately to infusion room upon
 * arrival"Where this is a planned appointment and the start/end dates are not
 * set then this field can be used to provide additional guidance on the details of
 * the appointment request, including any restrictions on when to book it.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * The date that this appointment was initially created. This could be different to
 * the meta.lastModified value on the initial entry, as this could have been before
 * the resource was created on the FHIR server, and should remain unchanged over
 * the lifespan of the appointment.
 * This property is required for many use cases where the age of an appointment is
 * considered in processing workflows for scheduling and billing of appointments.
 */
  created?: string | undefined;
  _created?: Element | undefined;

        
      
        
          
  /**
 * The brief description of the appointment as would be shown on a subject line in
 * a meeting request, or appointment list. Detailed or expanded information should
 * be put in the comment field.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Date/Time that the appointment is to conclude.
 */
  end?: string | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * This records identifiers associated with this appointment concern that are
 * defined by business processes and/or used to refer to it when a direct URL
 * reference to the resource itself is not appropriate (e.g. in CDA documents, or
 * in written / printed documentation).
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Number of minutes that the appointment is to take. This can be less than the
 * duration between the start and end times.  For example, where the actual time of
 * appointment is only an estimate or if a 30 minute appointment is being
 * requested, but any time would work.  Also, if there is, for example, a planned
 * 15 minute break in the middle of a long appointment, the duration may be 15
 * minutes less than the difference between the start and end.
 */
  minutesDuration?: number | undefined;
  _minutesDuration?: Element | undefined;

        
      
        
          
  /**
 * List of participants involved in the appointment.
 */
  participant: Array<BackboneElement>;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * A Person, Location/HealthcareService or Device that is participating in the
 * appointment.
 */
  actor?: Reference | undefined;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Participation period of the actor.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Whether this participant is required to be present at the meeting. This covers a
 * use-case where two doctors need to meet to discuss the results for a specific
 * patient, and the patient is not required to be present.
 */
  required?: string | undefined;
  _required?: Element | undefined;

        
      
        
          
  /**
 * Participation status of the actor.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Role of participant in the appointment.
 * The role of the participant can be used to declare what the actor will be doing
 * in the scope of this appointment.If the actor is not specified, then it is
 * expected that the actor will be filled in at a later stage of planning.This
 * value SHALL be the same when creating an AppointmentResponse so that they can be
 * matched, and subsequently update the Appointment.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * While Appointment.comment contains information for internal use,
 * Appointment.patientInstructions is used to capture patient facing information
 * about the Appointment (e.g. please bring your referral or fast from 8pm night
 * before).
 */
  patientInstruction?: string | undefined;
  _patientInstruction?: Element | undefined;

        
      
        
          
  /**
 * The priority of the appointment. Can be used to make informed decisions if
 * needing to re-prioritize appointments. (The iCal Standard specifies 0 as
 * undefined, 1 as highest, 9 as lowest priority).
 * Seeking implementer feedback on this property and how interoperable it
 * is.Using an extension to record a CodeableConcept for named values may be
 * tested at a future connectathon.
 */
  priority?: unsignedInt | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * The coded reason that this appointment is being scheduled. This is more clinical
 * than administrative.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Reason the appointment has been scheduled to take place, as specified using
 * information from another resource. When the patient arrives and the encounter
 * begins it may be used as the admission diagnosis. The indication will typically
 * be a Condition (with other resources referenced in the evidence.detail), or a
 * Procedure.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * A set of date ranges (potentially including times) that the appointment is
 * preferred to be scheduled within.

The duration (usually in minutes) could also
 * be provided to indicate the length of the appointment to fill and populate the
 * start/end times for the actual allocated time. However, in other situations the
 * duration may be calculated by the scheduling system.
 * This does not introduce a capacity for recurring appointments.
 */
  requestedPeriod?: Array<Period> | undefined;
  _requestedPeriod?: Element[] | undefined;

        
      
        
          
  /**
 * A broad categorization of the service that is to be performed during this
 * appointment.
 */
  serviceCategory?: Array<CodeableConcept> | undefined;
  _serviceCategory?: Element[] | undefined;

        
      
        
          
  /**
 * The specific service that is to be performed during this appointment.
 * For a provider to provider appointment the code "FOLLOWUP" may be appropriate,
 * as this is expected to be discussing some patient that was seen in the past.
 */
  serviceType?: Array<CodeableConcept> | undefined;
  _serviceType?: Element[] | undefined;

        
      
        
          
  /**
 * The slots from the participants' schedules that will be filled by the
 * appointment.
 */
  slot?: Array<Reference> | undefined;
  _slot?: Element[] | undefined;

        
      
        
          
  /**
 * The specialty of a practitioner that would be required to perform the service
 * requested in this appointment.
 */
  specialty?: Array<CodeableConcept> | undefined;
  _specialty?: Element[] | undefined;

        
      
        
          
  /**
 * Date/Time that the appointment is to take place.
 */
  start?: string | undefined;
  _start?: Element | undefined;

        
      
        
          
  /**
 * The overall status of the Appointment. Each of the participants has their own
 * participation status which indicates their involvement in the process, however
 * this status indicates the shared status.
 * If the Appointment's status is "cancelled" then all participants are expected to
 * have their calendars released for the appointment period, and as such any Slots
 * that were marked as BUSY can be re-set to FREE.

This element is labeled as a
 * modifier because the status contains the code entered-in-error that mark the
 * Appointment as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Additional information to support the appointment provided when making the
 * appointment.
 */
  supportingInformation?: Array<Reference> | undefined;
  _supportingInformation?: Element[] | undefined;

        
      
    }

  


  
    /**
 * AppointmentResponse
 * 
 * A reply to an appointment request for a patient and/or practitioner(s), such as
 * a confirmation or rejection.
 * 
 * @see {@link http://hl7.org/fhir/R4B/AppointmentResponse.html}
 */
    export interface AppointmentResponse extends DomainResource {
      
      readonly resourceType: "AppointmentResponse";
      

      
        
          
  /**
 * A Person, Location, HealthcareService, or Device that is participating in the
 * appointment.
 */
  actor?: Reference | undefined;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Appointment that this response is replying to.
 */
  appointment: Reference;
  _appointment?: Element | undefined;

        
      
        
          
  /**
 * Additional comments about the appointment.
 * This comment is particularly important when the responder is declining,
 * tentatively accepting or requesting another time to indicate the reasons why.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * This may be either the same as the appointment request to confirm the details of
 * the appointment, or alternately a new time to request a re-negotiation of the
 * end time.
 */
  end?: string | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * This records identifiers associated with this appointment response concern that
 * are defined by business processes and/ or used to refer to it when a direct URL
 * reference to the resource itself is not appropriate.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Participation status of the participant. When the status is declined or
 * tentative if the start/end times are different to the appointment, then these
 * times should be interpreted as a requested time change. When the status is
 * accepted, the times can either be the time of the appointment (as a confirmation
 * of the time) or can be empty.
 * This element is labeled as a modifier because the status contains the code
 * entered-in-error that marks the participant as not currently valid.
 */
  participantStatus: string;
  _participantStatus?: Element | undefined;

        
      
        
          
  /**
 * Role of participant in the appointment.
 * The role of the participant can be used to declare what the actor will be doing
 * in the scope of the referenced appointment.If the actor is not specified, then
 * it is expected that the actor will be filled in at a later stage of
 * planning.This value SHALL be the same as specified on the referenced
 * Appointment so that they can be matched, and subsequently updated.
 */
  participantType?: Array<CodeableConcept> | undefined;
  _participantType?: Element[] | undefined;

        
      
        
          
  /**
 * Date/Time that the appointment is to take place, or requested new start time.
 * This may be either the same as the appointment request to confirm the details of
 * the appointment, or alternately a new time to request a re-negotiation of the
 * start time.
 */
  start?: string | undefined;
  _start?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  
    /**
 * Attachment
 * 
 * Base StructureDefinition for Attachment Type: For referring to data content
 * defined in other formats.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Attachment.html}
 */
    export interface Attachment extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Identifies the type of the data in the attachment and allows a method to be
 * chosen to interpret or render the data. Includes mime type parameters such as
 * charset where appropriate.
 */
  contentType?: string | undefined;
  _contentType?: Element | undefined;

        
      
        
          
  /**
 * The date that the attachment was first created.
 */
  creation?: string | undefined;
  _creation?: Element | undefined;

        
      
        
          
  /**
 * The actual data of the attachment - a sequence of bytes, base64 encoded.
 * The base64-encoded data SHALL be expressed in the same character set as the base
 * resource XML or JSON.
 */
  data?: string | undefined;
  _data?: Element | undefined;

        
      
        
          
  /**
 * The calculated hash of the data using SHA-1. Represented using base64.
 * The hash is calculated on the data prior to base64 encoding, if the data is
 * based64 encoded. The hash is not intended to support digital signatures. Where
 * protection against malicious threats a digital signature should be considered,
 * see [Provenance.signature](provenance-definitions.html#Provenance.signature) for
 * mechanism to protect a resource with a digital signature.
 */
  hash?: string | undefined;
  _hash?: Element | undefined;

        
      
        
          
  /**
 * The human language of the content. The value can be any valid value according to
 * BCP 47.
 */
  language?: string | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * The number of bytes of data that make up this attachment (before base64
 * encoding, if that is done).
 * The number of bytes is redundant if the data is provided as a base64binary, but
 * is useful if the data is provided as a url reference.
 */
  size?: unsignedInt | undefined;
  _size?: Element | undefined;

        
      
        
          
  /**
 * A label or set of text to display in place of the data.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * A location where the data can be accessed.
 * If both data and url are provided, the url SHALL point to the same content as
 * the data contains. Urls may be relative references or may reference transient
 * locations such as a wrapping envelope using cid: though this has ramifications
 * for using signatures. Relative URLs are interpreted relative to the service url,
 * like a resource reference, rather than relative to the resource itself. If a URL
 * is provided, it SHALL resolve to actual data.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
    }

  


  
    /**
 * AuditEvent
 * 
 * A record of an event made for purposes of maintaining a security log. Typical
 * uses include detection of intrusion attempts and monitoring for inappropriate
 * usage.
 * 
 * @see {@link http://hl7.org/fhir/R4B/AuditEvent.html}
 */
    export interface AuditEvent extends DomainResource {
      
      readonly resourceType: "AuditEvent";
      

      
        
          
  /**
 * Indicator for type of action performed during the event that generated the
 * audit.
 */
  action?: string | undefined;
  _action?: Element | undefined;

        
      
        
          
  /**
 * An actor taking an active role in the event or activity that is logged.
 * Several agents may be associated (i.e. have some responsibility for an activity)
 * with an event or activity.

For example, an activity may be initiated by one
 * user for other users or involve more than one user. However, only one user may
 * be the initiator/requestor for the activity.
 */
  agent: Array<BackboneElement>;
  _agent?: Element[] | undefined;

        
      
        
          
  /**
 * Alternative agent Identifier. For a human, this should be a user identifier text
 * string from authentication system. This identifier would be one known to a
 * common authentication system (e.g. single sign-on), if available.
 */
  altId?: string | undefined;
  _altId?: Element | undefined;

        
      
        
          
  /**
 * Where the event occurred.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Type of media involved. Used when the event is about exporting/importing onto
 * media.
 */
  media?: Coding | undefined;
  _media?: Element | undefined;

        
      
        
          
  /**
 * Human-meaningful name for the agent.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Logical network location for application activity, if the activity has a network
 * location.
 */
  network?: BackboneElement | undefined;
  _network?: Element | undefined;

        
      
        
          
  /**
 * An identifier for the network access point of the user device for the audit
 * event.
 * This could be a device id, IP address or some other identifier associated with a
 * device.
 */
  address?: string | undefined;
  _address?: Element | undefined;

        
      
        
          
  /**
 * An identifier for the type of network access point that originated the audit
 * event.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The policy or plan that authorized the activity being recorded. Typically, a
 * single activity may have multiple applicable policies, such as patient consent,
 * guarantor funding, etc. The policy would also indicate the security token used.
 * For example: Where an OAuth token authorizes, the unique identifier from the
 * OAuth token is placed into the policy element Where a policy engine (e.g. XACML)
 * holds policy logic, the unique policy identifier is placed into the policy
 * element.
 */
  policy?: Array<string> | undefined;
  _policy?: Element[] | undefined;

        
      
        
          
  /**
 * The reason (purpose of use), specific to this agent, that was used during the
 * event being recorded.
 * Use AuditEvent.agent.purposeOfUse when you know that is specific to the agent,
 * otherwise use AuditEvent.purposeOfEvent. For example, during a
 * machine-to-machine transfer it might not be obvious to the audit system who
 * caused the event, but it does know why.
 */
  purposeOfUse?: Array<CodeableConcept> | undefined;
  _purposeOfUse?: Element[] | undefined;

        
      
        
          
  /**
 * Indicator that the user is or is not the requestor, or initiator, for the event
 * being audited.
 * There can only be one initiator. If the initiator is not clear, then do not
 * choose any one agent as the initiator.
 */
  requestor: boolean;
  _requestor?: Element | undefined;

        
      
        
          
  /**
 * The security role that the user was acting under, that come from local codes
 * defined by the access control security system (e.g. RBAC, ABAC) used in the
 * local context.
 * Should be roles relevant to the event. Should  not be an exhaustive list of
 * roles.
 */
  role?: Array<CodeableConcept> | undefined;
  _role?: Element[] | undefined;

        
      
        
          
  /**
 * Specification of the participation type the user plays when performing the
 * event.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Reference to who this agent is that was involved in the event.
 * Where a User ID is available it will go into who.identifier.
 */
  who?: Reference | undefined;
  _who?: Element | undefined;

        
      
        
          
  /**
 * Specific instances of data or objects that have been accessed.
 * Required unless the values for event identification, agent identification, and
 * audit source identification are sufficient to document the entire auditable
 * event. Because events may have more than one entity, this group can be a
 * repeating set of values.
 */
  entity?: Array<BackboneElement> | undefined;
  _entity?: Element[] | undefined;

        
      
        
          
  /**
 * Text that describes the entity in more detail.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Tagged value pairs for conveying additional information about the entity.
 */
  detail?: Array<BackboneElement> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * The type of extra detail provided in the value.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * The  value of the extra detail.
 * The value can be string when known to be a string, else base64 encoding should
 * be used to protect binary or undefined content.  The meaning and
 * secondary-encoding of the content of base64 encoded blob is specific to the
 * AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and
 * AuditEvent.entity.role.  The base64 is a general-use and safe container for
 * event specific data blobs regardless of the encoding used by the transaction
 * being recorded.  An AuditEvent consuming application must understand the event
 * it is consuming and the formats used by the event. For example if auditing an
 * Oracle network database access, the Oracle formats must be understood as they
 * will be simply encoded in the base64binary blob.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The  value of the extra detail.
 * The value can be string when known to be a string, else base64 encoding should
 * be used to protect binary or undefined content.  The meaning and
 * secondary-encoding of the content of base64 encoded blob is specific to the
 * AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and
 * AuditEvent.entity.role.  The base64 is a general-use and safe container for
 * event specific data blobs regardless of the encoding used by the transaction
 * being recorded.  An AuditEvent consuming application must understand the event
 * it is consuming and the formats used by the event. For example if auditing an
 * Oracle network database access, the Oracle formats must be understood as they
 * will be simply encoded in the base64binary blob.
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
        
      
        
          
  /**
 * Identifier for the data life-cycle stage for the entity.
 * This can be used to provide an audit trail for data, over time, as it passes
 * through the system.
 */
  lifecycle?: Coding | undefined;
  _lifecycle?: Element | undefined;

        
      
        
          
  /**
 * A name of the entity in the audit event.
 * This field may be used in a query/report to identify audit events for a specific
 * person.  For example, where multiple synonymous entity identifiers (patient
 * number, medical record number, encounter number, etc.) have been used.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The query parameters for a query-type entities.
 * The meaning and secondary-encoding of the content of base64 encoded blob is
 * specific to the AuditEvent.type, AuditEvent.subtype, AuditEvent.entity.type, and
 * AuditEvent.entity.role.  The base64 is a general-use and safe container for
 * event specific data blobs regardless of the encoding used by the transaction
 * being recorded.  An AuditEvent consuming application must understand the event
 * it is consuming and the formats used by the event. For example, if auditing an
 * Oracle network database access, the Oracle formats must be understood as they
 * will be simply encoded in the base64binary blob.
 */
  query?: string | undefined;
  _query?: Element | undefined;

        
      
        
          
  /**
 * Code representing the role the entity played in the event being audited.
 */
  role?: Coding | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Security labels for the identified entity.
 * Copied from entity meta security tags.
 */
  securityLabel?: Array<Coding> | undefined;
  _securityLabel?: Element[] | undefined;

        
      
        
          
  /**
 * The type of the object that was involved in this audit event.
 * This value is distinct from the user's role or any user relationship to the
 * entity.
 */
  type?: Coding | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Identifies a specific instance of the entity. The reference should be version
 * specific.
 */
  what?: Reference | undefined;
  _what?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether the event succeeded or failed.
 * In some cases a "success" may be partial, for example, an incomplete or
 * interrupted transfer of a radiological study. For the purpose of establishing
 * accountability, these distinctions are not relevant.
 */
  outcome?: string | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * A free text description of the outcome of the event.
 */
  outcomeDesc?: string | undefined;
  _outcomeDesc?: Element | undefined;

        
      
        
          
  /**
 * The period during which the activity occurred.
 * The period can be a little arbitrary; where possible, the time should correspond
 * to human assessment of the activity time.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The purposeOfUse (reason) that was used during the event being recorded.
 * Use AuditEvent.agent.purposeOfUse when you know that it is specific to the
 * agent, otherwise use AuditEvent.purposeOfEvent. For example, during a
 * machine-to-machine transfer it might not be obvious to the audit system who
 * caused the event, but it does know why.
 */
  purposeOfEvent?: Array<CodeableConcept> | undefined;
  _purposeOfEvent?: Element[] | undefined;

        
      
        
          
  /**
 * The time when the event was recorded.
 * In a distributed system, some sort of common time base (e.g. an NTP [RFC1305]
 * server) is a good implementation tactic.
 */
  recorded: string;
  _recorded?: Element | undefined;

        
      
        
          
  /**
 * The system that is reporting the event.
 * Since multi-tier, distributed, or composite applications make source
 * identification ambiguous, this collection of fields may repeat for each
 * application or process actively involved in the event. For example, multiple
 * value-sets can identify participating web servers, application processes, and
 * database server threads in an n-tier distributed application. Passive event
 * participants (e.g. low-level network transports) need not be identified.
 */
  source: BackboneElement;
  _source?: Element | undefined;

        
      
        
          
  /**
 * Identifier of the source where the event was detected.
 */
  observer: Reference;
  _observer?: Element | undefined;

        
      
        
          
  /**
 * Logical source location within the healthcare enterprise network.  For example,
 * a hospital or other provider location within a multi-entity provider group.
 */
  site?: string | undefined;
  _site?: Element | undefined;

        
      
        
          
  /**
 * Code specifying the type of source where event originated.
 */
  type?: Array<Coding> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier for the category of event.
 */
  subtype?: Array<Coding> | undefined;
  _subtype?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier for a family of the event.  For example, a menu item, program, rule,
 * policy, function code, application name or URL. It identifies the performed
 * function.
 */
  type: Coding;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  
    /**
 * BackboneElement
 * 
 * Base StructureDefinition for BackboneElement Type: Base definition for all
 * elements that are defined inside a resource - but not those in a data type.
 * 
 * @see {@link http://hl7.org/fhir/R4B/BackboneElement.html}
 */
    export interface BackboneElement extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * May be used to represent additional information that is not part of the basic
 * definition of the element and that modifies the understanding of the element in
 * which it is contained and/or the understanding of the containing element's
 * descendants. Usually modifier elements provide negation or qualification. To
 * make the use of extensions safe and manageable, there is a strict set of
 * governance applied to the definition and use of extensions. Though any
 * implementer can define an extension, there is a set of requirements that SHALL
 * be met as part of the definition of the extension. Applications processing a
 * resource are required to check for modifier extensions.

Modifier extensions
 * SHALL NOT change the meaning of any elements on Resource or DomainResource
 * (including cannot change the meaning of modifierExtension itself).
 * There can be no stigma associated with the use of extensions by any application,
 * project, or standard - regardless of the institution or jurisdiction that uses
 * or defines the extensions.  The use of extensions is what allows the FHIR
 * specification to retain a core level of simplicity for everyone.
 */
  modifierExtension?: Array<Extension> | undefined;
  _modifierExtension?: Element[] | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Basic
 * 
 * Basic is used for handling concepts not yet defined in FHIR, narrative-only
 * resources that don't map to an existing resource, and custom resources not
 * appropriate for inclusion in the FHIR specification.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Basic.html}
 */
    export interface Basic extends DomainResource {
      
      readonly resourceType: "Basic";
      

      
        
          
  /**
 * Indicates who was responsible for creating the resource instance.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * Identifies the 'type' of resource - equivalent to the resource name for other
 * resources.
 * Because resource references will only be able to indicate 'Basic', the type of
 * reference will need to be specified in a Profile identified as part of the
 * resource.  Refer to the resource notes section for information on appropriate
 * terminologies for this code.

This element is labeled as a modifier because it
 * defines the meaning of the resource and cannot be ignored.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Identifies when the resource was first created.
 */
  created?: string | undefined;
  _created?: Element | undefined;

        
      
        
          
  /**
 * Identifier assigned to the resource for business purposes, outside the context
 * of FHIR.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the patient, practitioner, device or any other resource that is the
 * "focus" of this resource.
 * Optional as not all potential resources will have subjects.  Resources
 * associated with multiple subjects can handle this via extension.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Binary
 * 
 * A resource that represents the data of a single raw artifact as digital content
 * accessible in its native format.  A Binary resource can contain any content,
 * whether text, image, pdf, zip archive, etc.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Binary.html}
 */
    export interface Binary extends Resource {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * MimeType of the binary content represented as a standard MimeType (BCP 13).
 */
  contentType: string;
  _contentType?: Element | undefined;

        
      
        
          
  /**
 * The actual content, base64 encoded.
 * If the content type is itself base64 encoding, then this will be base64 encoded
 * twice - what is created by un-base64ing the content must be the specified
 * content type.
 */
  data?: string | undefined;
  _data?: Element | undefined;

        
      
        
          
  /**
 * This element identifies another resource that can be used as a proxy of the
 * security sensitivity to use when deciding and enforcing access control rules for
 * the Binary resource. Given that the Binary resource contains very few elements
 * that can be used to determine the sensitivity of the data and relationships to
 * individuals, the referenced resource stands in as a proxy equivalent for this
 * purpose. This referenced resource may be related to the Binary (e.g. Media,
 * DocumentReference), or may be some non-related Resource purely as a security
 * proxy. E.g. to identify that the binary resource relates to a patient, and
 * access should only be granted to applications that have access to the patient.
 * Very often, a server will also know of a resource that references the binary,
 * and can automatically apply the appropriate access rules based on that
 * reference. However, there are some circumstances where this is not appropriate,
 * e.g. the binary is uploaded directly to the server without any linking resource,
 * the binary is referred to from multiple different resources, and/or the binary
 * is content such as an application logo that has less protection than any of the
 * resources that reference it.
 */
  securityContext?: Reference | undefined;
  _securityContext?: Element | undefined;

        
      
    }

  


  


  
    /**
 * BiologicallyDerivedProduct
 * 
 * A material substance originating from a biological entity intended to be
 * transplanted or infused
into another (possibly the same) biological entity.
 * 
 * @see {@link http://hl7.org/fhir/R4B/BiologicallyDerivedProduct.html}
 */
    export interface BiologicallyDerivedProduct extends DomainResource {
      
      readonly resourceType: "BiologicallyDerivedProduct";
      

      
        
          
  /**
 * How this product was collected.
 */
  collection?: BackboneElement | undefined;
  _collection?: Element | undefined;

        
      
        
          
            
  /**
 * Time of product collection.
 */
  collectedDateTime?: string | undefined;
  _collectedDateTime?: Element | undefined;

          
            
  /**
 * Time of product collection.
 */
  collectedPeriod?: Period | undefined;
  _collectedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Healthcare professional who is performing the collection.
 */
  collector?: Reference | undefined;
  _collector?: Element | undefined;

        
      
        
          
  /**
 * The patient or entity, such as a hospital or vendor in the case of a
 * processed/manipulated/manufactured product, providing the product.
 */
  source?: Reference | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * This records identifiers associated with this biologically derived product
 * instance that are defined by business processes and/or used to refer to it when
 * a direct URL reference to the resource itself is not appropriate (e.g. in CDA
 * documents, or in written / printed documentation).
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Any manipulation of product post-collection that is intended to alter the
 * product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral
 * Blood Stem Cells to make it more suitable for infusion.
 */
  manipulation?: BackboneElement | undefined;
  _manipulation?: Element | undefined;

        
      
        
          
  /**
 * Description of manipulation.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
            
  /**
 * Time of manipulation.
 */
  timeDateTime?: string | undefined;
  _timeDateTime?: Element | undefined;

          
            
  /**
 * Time of manipulation.
 */
  timePeriod?: Period | undefined;
  _timePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Parent product (if any).
 * For products that have multiple collections. For example Peripheral Blood Stem
 * Cells may be collected over several days from a single donor and the donation
 * split into in multiple containers which must be linked to the parent donation.
 */
  parent?: Array<Reference> | undefined;
  _parent?: Element[] | undefined;

        
      
        
          
  /**
 * Any processing of the product during collection that does not change the
 * fundamental nature of the product. For example adding anti-coagulants during the
 * collection of Peripheral Blood Stem Cells.
 */
  processing?: Array<BackboneElement> | undefined;
  _processing?: Element[] | undefined;

        
      
        
          
  /**
 * Substance added during processing.
 */
  additive?: Reference | undefined;
  _additive?: Element | undefined;

        
      
        
          
  /**
 * Description of of processing.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Procesing code.
 */
  procedure?: CodeableConcept | undefined;
  _procedure?: Element | undefined;

        
      
        
          
            
  /**
 * Time of processing.
 */
  timeDateTime?: string | undefined;
  _timeDateTime?: Element | undefined;

          
            
  /**
 * Time of processing.
 */
  timePeriod?: Period | undefined;
  _timePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Broad category of this product.
 */
  productCategory?: string | undefined;
  _productCategory?: Element | undefined;

        
      
        
          
  /**
 * A code that identifies the kind of this biologically derived product (SNOMED
 * Ctcode).
 */
  productCode?: CodeableConcept | undefined;
  _productCode?: Element | undefined;

        
      
        
          
  /**
 * Number of discrete units within this product.
 */
  quantity?: number | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Procedure request to obtain this biologically derived product.
 */
  request?: Array<Reference> | undefined;
  _request?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the product is currently available.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Product storage.
 */
  storage?: Array<BackboneElement> | undefined;
  _storage?: Element[] | undefined;

        
      
        
          
  /**
 * Description of storage.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Storage timeperiod.
 */
  duration?: Period | undefined;
  _duration?: Element | undefined;

        
      
        
          
  /**
 * Temperature scale used.
 */
  scale?: string | undefined;
  _scale?: Element | undefined;

        
      
        
          
  /**
 * Storage temperature.
 */
  temperature?: number | undefined;
  _temperature?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * BodyStructure
 * 
 * Record details about an anatomical structure.  This resource may be used when a
 * coded concept does not provide the necessary detail needed for the use case.
 * 
 * @see {@link http://hl7.org/fhir/R4B/BodyStructure.html}
 */
    export interface BodyStructure extends DomainResource {
      
      readonly resourceType: "BodyStructure";
      

      
        
          
  /**
 * Whether this body site is in active use.
 * This element is labeled as a modifier because it may be used to mark that the
 * resource was created in error.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * A summary, characterization or explanation of the body structure.
 * This description could include any visual markings used to orientate the viewer
 * e.g. external reference points, special sutures, ink markings.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Identifier for this instance of the anatomical structure.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Image or images used to identify a location.
 */
  image?: Array<Attachment> | undefined;
  _image?: Element[] | undefined;

        
      
        
          
  /**
 * The anatomical location or region of the specimen, lesion, or body structure.
 */
  location?: CodeableConcept | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Qualifier to refine the anatomical location.  These include qualifiers for
 * laterality, relative location, directionality, number, and plane.
 */
  locationQualifier?: Array<CodeableConcept> | undefined;
  _locationQualifier?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of structure being represented by the body structure at
 * `BodyStructure.location`.  This can define both normal and abnormal
 * morphologies.
 * The minimum cardinality of 0 supports the use case of specifying a location
 * without defining a morphology.
 */
  morphology?: CodeableConcept | undefined;
  _morphology?: Element | undefined;

        
      
        
          
  /**
 * The person to which the body site belongs.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Bundle
 * 
 * A container for a collection of resources.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Bundle.html}
 */
    export interface Bundle extends Resource {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * An entry in a bundle resource - will either contain a resource or information
 * about a resource (transactions and history only).
 */
  entry?: Array<BackboneElement> | undefined;
  _entry?: Element[] | undefined;

        
      
        
          
  /**
 * The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id
 * in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be
 * version-independent URL consistent with the Resource.id. The fullUrl is a
 * version independent reference to the resource. The fullUrl element SHALL have a
 * value except that: 
* fullUrl can be empty on a POST (although it does not need
 * to when specifying a temporary id for reference in the bundle)
* Results from
 * operations might involve resources that are not identified.
 * fullUrl might not be [unique in the context of a
 * resource](bundle.html#bundle-unique). Note that since [FHIR resources do not
 * need to be served through the FHIR API](references.html), the fullURL might be a
 * URN or an absolute URL that does not end with the logical id of the resource
 * (Resource.id). However, but if the fullUrl does look like a RESTful server URL
 * (e.g. meets the [regex](references.html#regex), then the 'id' portion of the
 * fullUrl SHALL end with the Resource.id.

Note that the fullUrl is not the same
 * as the canonical URL - it's an absolute url for an endpoint serving the resource
 * (these will happen to have the same value on the canonical server for the
 * resource with the canonical URL).
 */
  fullUrl?: string | undefined;
  _fullUrl?: Element | undefined;

        
      
        
          
  /**
 * A series of links that provide context to this entry.
 */
  link?: Array<undefined> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * Additional information about how this entry should be processed as part of a
 * transaction or batch.  For history, it shows how the entry was processed to
 * create the version contained in the entry.
 */
  request?: BackboneElement | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * Only perform the operation if the Etag value matches. For more information, see
 * the API section ["Managing Resource Contention"](http.html#concurrency).
 */
  ifMatch?: string | undefined;
  _ifMatch?: Element | undefined;

        
      
        
          
  /**
 * Only perform the operation if the last updated date matches. See the API
 * documentation for ["Conditional Read"](http.html#cread).
 */
  ifModifiedSince?: string | undefined;
  _ifModifiedSince?: Element | undefined;

        
      
        
          
  /**
 * Instruct the server not to perform the create if a specified resource already
 * exists. For further information, see the API documentation for ["Conditional
 * Create"](http.html#ccreate). This is just the query portion of the URL - what
 * follows the "?" (not including the "?").
 */
  ifNoneExist?: string | undefined;
  _ifNoneExist?: Element | undefined;

        
      
        
          
  /**
 * If the ETag values match, return a 304 Not Modified status. See the API
 * documentation for ["Conditional Read"](http.html#cread).
 */
  ifNoneMatch?: string | undefined;
  _ifNoneMatch?: Element | undefined;

        
      
        
          
  /**
 * In a transaction or batch, this is the HTTP action to be executed for this
 * entry. In a history bundle, this indicates the HTTP action that occurred.
 */
  method: string;
  _method?: Element | undefined;

        
      
        
          
  /**
 * The URL for this entry, relative to the root (the address to which the request
 * is posted).
 * E.g. for a Patient Create, the method would be "POST" and the URL would be
 * "Patient". For a Patient Update, the method would be PUT and the URL would be
 * "Patient/[id]".
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The Resource for the entry. The purpose/meaning of the resource is determined by
 * the Bundle.type.
 */
  resource?: Resource | undefined;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * Indicates the results of processing the corresponding 'request' entry in the
 * batch or transaction being responded to or what the results of an operation
 * where when returning history.
 */
  response?: BackboneElement | undefined;
  _response?: Element | undefined;

        
      
        
          
  /**
 * The Etag for the resource, if the operation for the entry produced a versioned
 * resource (see [Resource Metadata and Versioning](http.html#versioning) and
 * [Managing Resource Contention](http.html#concurrency)).
 * Etags match the Resource.meta.versionId. The ETag has to match the version id in
 * the header if a resource is included.
 */
  etag?: string | undefined;
  _etag?: Element | undefined;

        
      
        
          
  /**
 * The date/time that the resource was modified on the server.
 * This has to match the same time in the meta header (meta.lastUpdated) if a
 * resource is included.
 */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;

        
      
        
          
  /**
 * The location header created by processing this operation, populated if the
 * operation returns a location.
 */
  location?: string | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * An OperationOutcome containing hints and warnings produced as part of processing
 * this entry in a batch or transaction.
 * For a POST/PUT operation, this is the equivalent outcome that would be returned
 * for prefer = operationoutcome - except that the resource is always returned
 * whether or not the outcome is returned.

This outcome is not used for error
 * responses in batch/transaction, only for hints and warnings. In a batch
 * operation, the error will be in Bundle.entry.response, and for transaction,
 * there will be a single OperationOutcome instead of a bundle in the case of an
 * error.
 */
  outcome?: Resource | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * The status code returned by processing this entry. The status SHALL start with a
 * 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description
 * associated with the status code.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Information about the search process that lead to the creation of this entry.
 */
  search?: BackboneElement | undefined;
  _search?: Element | undefined;

        
      
        
          
  /**
 * Why this entry is in the result set - whether it's included as a match or
 * because of an _include requirement, or to convey information or warning
 * information about the search process.
 * There is only one mode. In some corner cases, a resource may be included because
 * it is both a match and an include. In these circumstances, 'match' takes
 * precedence.
 */
  mode?: string | undefined;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * When searching, the server's search ranking score for the entry.
 * Servers are not required to return a ranking score. 1 is most relevant, and 0 is
 * least relevant. Often, search results are sorted by score, but the client may
 * specify a different sort order.

See [Patient
 * Match](patient-operation-match.html) for the EMPI search which relates to this
 * element.
 */
  score?: number | undefined;
  _score?: Element | undefined;

        
      
        
          
  /**
 * A persistent identifier for the bundle that won't change as a bundle is copied
 * from server to server.
 * Persistent identity generally only matters for batches of type Document,
 * Message, and Collection. It would not normally be populated for search and
 * history results and servers ignore Bundle.identifier when processing batches and
 * transactions. For Documents  the .identifier SHALL be populated such that the
 * .identifier is globally unique.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * A series of links that provide context to this bundle.
 * Both Bundle.link and Bundle.entry.link are defined to support providing
 * additional context when Bundles are used (e.g.
 * [HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)). 

Bundle.entry.link
 * corresponds to links found in the HTTP header if the resource in the entry was
 * [read](http.html#read) directly.

This specification defines some specific uses
 * of Bundle.link for [searching](search.html#conformance) and
 * [paging](http.html#paging), but no specific uses for Bundle.entry.link, and no
 * defined function in a transaction - the meaning is implementation specific.
 */
  link?: Array<BackboneElement> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * A name which details the functional use for this link - see
 * [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relati
 * ons-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-
 * relations-1).
 */
  relation: string;
  _relation?: Element | undefined;

        
      
        
          
  /**
 * The reference details for the link.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * Digital Signature - base64 encoded. XML-DSig or a JWT.
 * The signature could be created by the "author" of the bundle or by the
 * originating device.   Requirements around inclusion of a signature, verification
 * of signatures and treatment of signed/non-signed bundles is
 * implementation-environment specific.
 */
  signature?: Signature | undefined;
  _signature?: Element | undefined;

        
      
        
          
  /**
 * The date/time that the bundle was assembled - i.e. when the resources were
 * placed in the bundle.
 * For many bundles, the timestamp is equal to .meta.lastUpdated, because they are
 * not stored (e.g. search results). When a bundle is placed in a persistent store,
 * .meta.lastUpdated will be usually be changed by the server. When the bundle is a
 * message, a middleware agent altering the message (even if not stored) SHOULD
 * update .meta.lastUpdated. .timestamp is used to track the original time of the
 * Bundle, and SHOULD be populated.  

Usage:

* document : the date the document
 * was created. Note: the composition may predate the document, or be associated
 * with multiple documents. The date of the composition - the authoring time - may
 * be earlier than the document assembly time
* message : the date that the content
 * of the message was assembled. This date is not changed by middleware engines
 * unless they add additional data that changes the meaning of the time of the
 * message
* history : the date that the history was assembled. This time would be
 * used as the _since time to ask for subsequent updates
* searchset : the time
 * that the search set was assembled. Note that different pages MAY have different
 * timestamps but need not. Having different timestamps does not imply that
 * subsequent pages will represent or include changes made since the initial
 * query
* transaction | transaction-response | batch | batch-response | collection
 * : no particular assigned meaning

The timestamp value should be greater than the
 * lastUpdated and other timestamps in the resources in the bundle, and it should
 * be equal or earlier than the .meta.lastUpdated on the Bundle itself.
 */
  timestamp?: string | undefined;
  _timestamp?: Element | undefined;

        
      
        
          
  /**
 * If a set of search matches, this is the total number of entries of type 'match'
 * across all pages in the search.  It does not include search.mode = 'include' or
 * 'outcome' entries and it does not provide a count of the number of entries in
 * the Bundle.
 * Only used if the bundle is a search result set. The total does not include
 * resources such as OperationOutcome and included resources, only the total number
 * of matching resources.
 */
  total?: unsignedInt | undefined;
  _total?: Element | undefined;

        
      
        
          
  /**
 * Indicates the purpose of this bundle - how it is intended to be used.
 * It's possible to use a bundle for other purposes (e.g. a document can be
 * accepted as a transaction). This is primarily defined so that there can be
 * specific rules for some of the bundle types.
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  
    /**
 * CapabilityStatement
 * 
 * A Capability Statement documents a set of capabilities (behaviors) of a FHIR
 * Server for a particular version of FHIR that may be used as a statement of
 * actual server functionality or a statement of required or desired server
 * implementation.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CapabilityStatement.html}
 */
    export interface CapabilityStatement extends DomainResource {
      
      readonly resourceType: "CapabilityStatement";
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the capability statement and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the capability statement.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the capability statement was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the capability statement changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the capability statement.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date: string;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the capability statement from a
 * consumer's perspective. Typically, this is used when the capability statement
 * describes a desired rather than an actual solution, for example as a formal
 * expression of requirements as part of an RFP.
 * This description can be used to capture details such as why the capability
 * statement was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the capability statement as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the capability statement is
 * presumed to be the predominant language in the place the capability statement
 * was created).This does not need to be populated if the description is adequately
 * implied by the software or implementation details.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A document definition.
 */
  document?: Array<BackboneElement> | undefined;
  _document?: Element[] | undefined;

        
      
        
          
  /**
 * A description of how the application supports or uses the specified document
 * profile.  For example, when documents are created, what action is taken with
 * consumed documents, etc.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Mode of this document declaration - whether an application is a producer or
 * consumer.
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * A profile on the document Bundle that constrains which resources are present,
 * and their contents.
 * The profile is actually on the Bundle.
 */
  profile: string;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this capability statement is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of capability statements that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * The version of the FHIR specification that this CapabilityStatement describes
 * (which SHALL be the same as the FHIR version of the CapabilityStatement itself).
 * There is no default value.
 * Servers may implement multiple versions (see [Managing Multiple
 * Versions](versioning.html), and the
 * [$versions](capabilitystatement-operation-versions.html) operation). If they do,
 * and the CapabilityStatement is requested from the server, then this fhirVersion
 * will be either the version requested, or the server's default version.
 */
  fhirVersion: string;
  _fhirVersion?: Element | undefined;

        
      
        
          
  /**
 * A list of the formats supported by this implementation using their content
 * types.
 * "xml", "json" and "ttl" are allowed, which describe the simple encodings
 * described in the specification (and imply appropriate bundle support).
 * Otherwise, mime types are legal here.
 */
  format: Array<string>;
  _format?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies a specific implementation instance that is described by the
 * capability statement - i.e. a particular installation, rather than the
 * capabilities of a software program.
 */
  implementation?: BackboneElement | undefined;
  _implementation?: Element | undefined;

        
      
        
          
  /**
 * The organization responsible for the management of the instance and oversight of
 * the data on the server at the specified URL.
 */
  custodian?: Reference | undefined;
  _custodian?: Element | undefined;

        
      
        
          
  /**
 * Information about the specific installation that this capability statement
 * relates to.
 */
  description: string;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An absolute base URL for the implementation.  This forms the base for REST
 * interfaces as well as the mailbox and document interfaces.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A list of implementation guides that the server does (or should) support in
 * their entirety.
 */
  implementationGuide?: Array<string> | undefined;
  _implementationGuide?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to a canonical URL of another CapabilityStatement that this software
 * adds to. The capability statement automatically includes everything in the other
 * statement, and it is not duplicated, though the server may repeat the same
 * resources, interactions and operations to add additional details to them.
 * the contents of any directly or indirectly imported CapabilityStatements SHALL
 * NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name,
 * searchparam/name, interaction/code, messaging/endpoint, document/mode pair.

A
 * capability statement that imports another CapabilityStatement automatically
 * instantiates it too (though this is often not a very useful statement for the
 * kinds of CapabilityStatements that are suitable for importing).
 */
  imports?: Array<string> | undefined;
  _imports?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to a canonical URL of another CapabilityStatement that this software
 * implements. This capability statement is a published API description that
 * corresponds to a business service. The server may actually implement a subset of
 * the capability statement it claims to implement, so the capability statement
 * must specify the full capability details.
 * HL7 defines the following Services: [Terminology
 * Service](terminology-service.html).    

Many [Implementation
 * Guides](http://fhir.org/guides/registry) define additional services.
 */
  instantiates?: Array<string> | undefined;
  _instantiates?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the capability statement is intended to be
 * used.
 * It may be possible for the capability statement to be used in jurisdictions
 * other than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The way that this statement is intended to be used, to describe an actual
 * running instance of software, a particular product (kind, not instance of
 * software) or a class of implementation (e.g. a desired purchase).
 */
  kind: string;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * A description of the messaging capabilities of the solution.
 * Multiple repetitions allow the documentation of multiple endpoints per solution.
 */
  messaging?: Array<BackboneElement> | undefined;
  _messaging?: Element[] | undefined;

        
      
        
          
  /**
 * Documentation about the system's messaging capabilities for this endpoint not
 * otherwise documented by the capability statement.  For example, the process for
 * becoming an authorized messaging exchange partner.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * An endpoint (network accessible address) to which messages and/or replies are to
 * be sent.
 */
  endpoint?: Array<BackboneElement> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * The network address of the endpoint. For solutions that do not use network
 * addresses for routing, it can be just an identifier.
 */
  address: string;
  _address?: Element | undefined;

        
      
        
          
  /**
 * A list of the messaging transport protocol(s) identifiers, supported by this
 * endpoint.
 */
  protocol: Coding;
  _protocol?: Element | undefined;

        
      
        
          
  /**
 * Length if the receiver's reliable messaging cache in minutes (if a receiver) or
 * how long the cache length on the receiver should be (if a sender).
 * If this value is missing then the application does not implement (receiver) or
 * depend on (sender) reliable messaging.
 */
  reliableCache?: unsignedInt | undefined;
  _reliableCache?: Element | undefined;

        
      
        
          
  /**
 * References to message definitions for messages this system can send or receive.
 * This is a proposed alternative to the messaging.event structure.
 */
  supportedMessage?: Array<BackboneElement> | undefined;
  _supportedMessage?: Element[] | undefined;

        
      
        
          
  /**
 * Points to a message definition that identifies the messaging event, message
 * structure, allowed responses, etc.
 */
  definition: string;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * The mode of this event declaration - whether application is sender or receiver.
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the capability statement. This name should
 * be usable as an identifier for the module by machine processing applications
 * such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A list of the patch formats supported by this implementation using their content
 * types.
 * At present, the patch mime types application/json-patch+json and
 * application/xml-patch+xml are legal. Generally, if a server supports PATCH, it
 * would be expected to support the patch formats and match the formats it
 * supports, but this is not always possible or necessary.
 */
  patchFormat?: Array<string> | undefined;
  _patchFormat?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the capability
 * statement.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the capability statement is the organization or individual primarily responsible
 * for the maintenance and upkeep of the capability statement. This is not
 * necessarily the same individual or organization that developed and initially
 * authored the content. The publisher is the primary point of contact for
 * questions or issues with the capability statement. This item SHOULD be populated
 * unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this capability statement is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the capability statement. Instead,
 * it provides traceability of ''why'' the resource is either needed or ''why'' it
 * is defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this capability statement.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * A definition of the restful capabilities of the solution, if any.
 * Multiple repetitions allow definition of both client and/or server behaviors or
 * possibly behaviors under different configuration settings (for software or
 * requirements statements).
 */
  rest?: Array<BackboneElement> | undefined;
  _rest?: Element[] | undefined;

        
      
        
          
  /**
 * An absolute URI which is a reference to the definition of a compartment that the
 * system supports. The reference is to a CompartmentDefinition resource by its
 * canonical URL .
 * At present, the only defined compartments are at
 * [CompartmentDefinition](compartmentdefinition.html).
 */
  compartment?: Array<string> | undefined;
  _compartment?: Element[] | undefined;

        
      
        
          
  /**
 * Information about the system's restful capabilities that apply across all
 * applications, such as security.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * A specification of restful operations supported by the system.
 */
  interaction?: Array<BackboneElement> | undefined;
  _interaction?: Element[] | undefined;

        
      
        
          
  /**
 * A coded identifier of the operation, supported by the system.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Guidance specific to the implementation of this operation, such as limitations
 * on the kind of transactions allowed, or information about system wide search is
 * implemented.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Identifies whether this portion of the statement is describing the ability to
 * initiate or receive restful operations.
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * Definition of an operation or a named query together with its parameters and
 * their meaning and type.
 * CapabilityStatement.rest.operation is for operations invoked at the system
 * level, or for operations that are supported across multiple resource types.
 * Operations linked from CapabilityStatement.rest.operation must have
 * OperationDefinition.system = true, or more than one Operation.resource.
 */
  operation?: Array<undefined> | undefined;
  _operation?: Element[] | undefined;

        
      
        
          
  /**
 * A specification of the restful capabilities of the solution for a specific
 * resource type.
 * Max of one repetition per resource type.
 */
  resource?: Array<BackboneElement> | undefined;
  _resource?: Element[] | undefined;

        
      
        
          
  /**
 * A flag that indicates that the server supports conditional create.
 * Conditional Create is mainly appropriate for interface engine scripts converting
 * from other formats, such as v2.
 */
  conditionalCreate?: boolean | undefined;
  _conditionalCreate?: Element | undefined;

        
      
        
          
  /**
 * A code that indicates how the server supports conditional delete.
 * Conditional Delete is mainly appropriate for interface engine scripts converting
 * from other formats, such as v2.
 */
  conditionalDelete?: string | undefined;
  _conditionalDelete?: Element | undefined;

        
      
        
          
  /**
 * A code that indicates how the server supports conditional read.
 * Conditional Read is mainly appropriate for interface engine scripts converting
 * from other formats, such as v2.
 */
  conditionalRead?: string | undefined;
  _conditionalRead?: Element | undefined;

        
      
        
          
  /**
 * A flag that indicates that the server supports conditional update.
 * Conditional Update is mainly appropriate for interface engine scripts converting
 * from other formats, such as v2.
 */
  conditionalUpdate?: boolean | undefined;
  _conditionalUpdate?: Element | undefined;

        
      
        
          
  /**
 * Additional information about the resource type used by the system.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Identifies a restful operation supported by the solution.
 * In general, a Resource will only appear in a CapabilityStatement if the server
 * actually has some capabilities - e.g. there is at least one interaction
 * supported. However interactions can be omitted to support summarization
 * (_summary = true).
 */
  interaction?: Array<BackboneElement> | undefined;
  _interaction?: Element[] | undefined;

        
      
        
          
  /**
 * Coded identifier of the operation, supported by the system resource.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Guidance specific to the implementation of this operation, such as 'delete is a
 * logical delete' or 'updates are only allowed with version id' or 'creates
 * permitted from pre-authorized certificates only'.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Definition of an operation or a named query together with its parameters and
 * their meaning and type. Consult the definition of the operation for details
 * about how to invoke the operation, and the parameters.
 * Operations linked from CapabilityStatement.rest.resource.operation must have
 * OperationDefinition.type = true or OperationDefinition.instance = true.    

If
 * an operation that is listed in multiple
 * CapabilityStatement.rest.resource.operation (e.g. for different resource types),
 * then clients should understand that the operation is only supported on the
 * specified resource types, and that may be a subset of those listed in
 * OperationDefinition.resource.
 */
  operation?: Array<BackboneElement> | undefined;
  _operation?: Element[] | undefined;

        
      
        
          
  /**
 * Where the formal definition can be found. If a server references the base
 * definition of an Operation (i.e. from the specification itself such as
 * ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it
 * supports the full capabilities of the operation - e.g. both GET and POST
 * invocation.  If it only supports a subset, it must define its own custom
 * [OperationDefinition](operationdefinition.html#) with a 'base' of the original
 * OperationDefinition.  The custom definition would describe the specific subset
 * of functionality supported.
 * This can be used to build an HTML form to invoke the operation, for instance.
 */
  definition: string;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * Documentation that describes anything special about the operation behavior,
 * possibly detailing different behavior for system, type and instance-level
 * invocation of the operation.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * The name of the operation or query. For an operation, this is the name  prefixed
 * with $ and used in the URL. For a query, this is the name used in the _query
 * parameter when the query is called.
 * The name here SHOULD be the same as the name in the definition, unless there is
 * a name clash and the name cannot be used. The name does not include the "$"
 * portion that is always included in the URL.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A specification of the profile that describes the solution's overall support for
 * the resource, including any constraints on cardinality, bindings, lengths or
 * other limitations. See further discussion in [Using
 * Profiles](profiling.html#profile-uses).
 * The profile applies to all  resources of this type - i.e. it is the superset of
 * what is supported by the system.
 */
  profile?: string | undefined;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * A flag for whether the server is able to return past versions as part of the
 * vRead operation.
 * It is useful to support the vRead operation for current operations, even if past
 * versions aren't available.
 */
  readHistory?: boolean | undefined;
  _readHistory?: Element | undefined;

        
      
        
          
  /**
 * A set of flags that defines how references are supported.
 */
  referencePolicy?: Array<string> | undefined;
  _referencePolicy?: Element[] | undefined;

        
      
        
          
  /**
 * A list of _include values supported by the server.
 * If this list is empty, the server does not support includes.
 */
  searchInclude?: Array<string> | undefined;
  _searchInclude?: Element[] | undefined;

        
      
        
          
  /**
 * Search parameters for implementations to support and/or make use of - either
 * references to ones defined in the specification, or additional ones defined
 * for/by the implementation.
 * The search parameters should include the control search parameters such as
 * _sort, _count, etc. that also apply to this resource (though many will be listed
 * at
 * [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#Capa
 * bilityStatement.rest.searchParam)). The behavior of some search parameters may
 * be further described by other code or extension elements, or narrative within
 * the capability statement or linked [SearchParameter](searchparameter.html#)
 * definitions.
 */
  searchParam?: Array<BackboneElement> | undefined;
  _searchParam?: Element[] | undefined;

        
      
        
          
  /**
 * An absolute URI that is a formal reference to where this parameter was first
 * defined, so that a client can be confident of the meaning of the search
 * parameter (a reference to
 * [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)).
 * This element SHALL be populated if the search parameter refers to a
 * SearchParameter defined by the FHIR core specification or externally defined
 * IGs.
 * This SHOULD be present, and matches refers to a SearchParameter by its canonical
 * URL, except for the control parameters that do not have a canonical URL (or a
 * SearchParameter definition). If systems wish to document their support for
 * modifiers, comparators, target resource types, and chained parameters, they
 * should do using a search parameter resource. This element SHALL be populated if
 * the search parameter refers to a SearchParameter defined by the FHIR core
 * specification or externally defined IGs.
 */
  definition?: string | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * This allows documentation of any distinct behaviors about how the search
 * parameter is used.  For example, text matching algorithms.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * The name of the search parameter used in the interface.
 * Parameter names cannot overlap with standard parameter names, and standard
 * parameters cannot be redefined.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The type of value a search parameter refers to, and how the content is
 * interpreted.
 * While this can be looked up from the definition, it is included here as a
 * convenience for systems that autogenerate a query interface based on the server
 * capability statement.  It SHALL be the same as the type in the search parameter
 * definition.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A list of _revinclude (reverse include) values supported by the server.
 * If this list is empty, the server does not support reverse includes.
 */
  searchRevInclude?: Array<string> | undefined;
  _searchRevInclude?: Element[] | undefined;

        
      
        
          
  /**
 * A list of profiles that represent different use cases supported by the system.
 * For a server, "supported by the system" means the system hosts/produces a set of
 * resources that are conformant to a particular profile, and allows clients that
 * use its services to search using this profile and to find appropriate data. For
 * a client, it means the system will search by this profile and process data
 * according to the guidance implicit in the profile. See further discussion in
 * [Using Profiles](profiling.html#profile-uses).
 * Supported profiles are different than the profile that applies to a particular
 * resource in .rest.resource.profile. The resource profile is a general statement
 * of what features of the resource are supported overall by the system - the sum
 * total of the facilities it supports. A supported profile is a deeper statement
 * about the functionality of the data and services provided by the server (or used
 * by the client). A typical case is a laboratory system that produces a set of
 * different reports - this is the list of types of data that it publishes. A key
 * aspect of declaring profiles here is the question of how the client converts
 * knowledge that the server publishes this data into working with the data; the
 * client can inspect individual resources to determine whether they conform to a
 * particular profile, but how does it find the ones that do? It does so by
 * searching using the _profile parameter, so any resources listed here must be
 * valid values for the _profile resource (using the identifier in the target
 * profile).
 */
  supportedProfile?: Array<string> | undefined;
  _supportedProfile?: Element[] | undefined;

        
      
        
          
  /**
 * A type of resource exposed via the restful interface.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that the server allows or needs to allow the client to create
 * new identities on the server (that is, the client PUTs to a location where there
 * is no existing resource). Allowing this operation means that the server allows
 * the client to create new identities on the server.
 * Allowing the clients to create new identities on the server means that the
 * system administrator needs to have confidence that the clients do not create
 * clashing identities between them. Obviously, if there is only one client, this
 * won't happen. While creating identities on the client means that the clients
 * need to be managed, it's much more convenient for many scenarios if such
 * management can be put in place.
 */
  updateCreate?: boolean | undefined;
  _updateCreate?: Element | undefined;

        
      
        
          
  /**
 * This field is set to no-version to specify that the system does not support
 * (server) or use (client) versioning for this resource type. If this has some
 * other value, the server must at least correctly track and populate the versionId
 * meta-property on resources. If the value is 'versioned-update', then the server
 * supports all the versioning features, including using e-tags for version
 * integrity in the API.
 * If a server supports versionIds correctly, it SHOULD support vread too, but is
 * not required to do so.
 */
  versioning?: string | undefined;
  _versioning?: Element | undefined;

        
      
        
          
  /**
 * Search parameters that are supported for searching all resources for
 * implementations to support and/or make use of - either references to ones
 * defined in the specification, or additional ones defined for/by the
 * implementation.
 * Typically, the only search parameters supported for all searches are those that
 * apply to all resources - tags, profiles, text search etc. These search
 * parameters should include the control search parameters such as _sort, _count,
 * etc. that also apply to this resource (though many will be listed at
 * [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#Capa
 * bilityStatement.rest.searchParam)). The behavior of some search parameters may
 * be further described by other code or extension elements, or narrative within
 * the capability statement or linked [SearchParameter](searchparameter.html#)
 * definitions.
 */
  searchParam?: Array<undefined> | undefined;
  _searchParam?: Element[] | undefined;

        
      
        
          
  /**
 * Information about security implementation from an interface perspective - what a
 * client needs to know.
 */
  security?: BackboneElement | undefined;
  _security?: Element | undefined;

        
      
        
          
  /**
 * Server adds CORS headers when responding to requests - this enables Javascript
 * applications to use the server.
 * The easiest CORS headers to add are Access-Control-Allow-Origin: * &
 * Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD
 * support CORS.
 */
  cors?: boolean | undefined;
  _cors?: Element | undefined;

        
      
        
          
  /**
 * General description of how security works.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Types of security services that are supported/required by the system.
 */
  service?: Array<CodeableConcept> | undefined;
  _service?: Element[] | undefined;

        
      
        
          
  /**
 * Software that is covered by this capability statement.  It is used when the
 * capability statement describes the capabilities of a particular software
 * version, independent of an installation.
 */
  software?: BackboneElement | undefined;
  _software?: Element | undefined;

        
      
        
          
  /**
 * Name the software is known by.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Date this version of the software was released.
 */
  releaseDate?: string | undefined;
  _releaseDate?: Element | undefined;

        
      
        
          
  /**
 * The version identifier for the software covered by this statement.
 * If possible, a version should be specified, as statements are likely to be
 * different for different versions of software.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * The status of this capability statement. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of capability statements that are appropriate for use versus
 * not.This is not intended for use with actual capability statements, but where
 * capability statements are used to describe possible or desired systems.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the capability statement.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this capability statement when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this capability statement
 * is (or will be) published. This URL can be the target of a canonical reference.
 * It SHALL remain the same when the capability statement is stored on different
 * servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate capability
 * statement instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the capability statement
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the capability statement author and is not expected
 * to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different capability statement instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the
 * capability statement with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * CarePlan
 * 
 * Describes the intention of how one or more practitioners intend to deliver care
 * for a particular patient, group or community for a period of time, possibly
 * limited to care for a specific condition or set of conditions.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CarePlan.html}
 */
    export interface CarePlan extends DomainResource {
      
      readonly resourceType: "CarePlan";
      

      
        
          
  /**
 * Identifies a planned action to occur as part of the plan.  For example, a
 * medication to be used, lab tests to perform, self-monitoring, education, etc.
 */
  activity?: Array<BackboneElement> | undefined;
  _activity?: Element[] | undefined;

        
      
        
          
  /**
 * A simple summary of a planned activity suitable for a general care plan system
 * (e.g. form driven) that doesn't know about specific resources such as procedure
 * etc.
 */
  detail?: BackboneElement | undefined;
  _detail?: Element | undefined;

        
      
        
          
  /**
 * Detailed description of the type of planned activity; e.g. what lab test, what
 * procedure, what kind of encounter.
 * Tends to be less relevant for activities involving particular products.  Codes
 * should not convey negation - use "prohibited" instead.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Identifies the quantity expected to be consumed in a given day.
 */
  dailyAmount?: Quantity | undefined;
  _dailyAmount?: Element | undefined;

        
      
        
          
  /**
 * This provides a textual description of constraints on the intended activity
 * occurrence, including relation to other activities.  It may also include
 * objectives, pre-conditions and end-conditions.  Finally, it may convey specifics
 * about the activity such as body site, method, route, etc.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * If true, indicates that the described activity is one that must NOT be engaged
 * in when following the plan.  If false, or missing, indicates that the described
 * activity is one that should be engaged in when following the plan.
 * This element is labeled as a modifier because it marks an activity as an
 * activity that is not to be performed.
 */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;

        
      
        
          
  /**
 * Internal reference that identifies the goals that this activity is intended to
 * contribute towards meeting.
 */
  goal?: Array<Reference> | undefined;
  _goal?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other
 * definition that is adhered to in whole or in part by this CarePlan activity.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, questionnaire
 * or other definition that is adhered to in whole or in part by this CarePlan
 * activity.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * A description of the kind of resource the in-line definition of a care plan
 * activity is representing.  The CarePlan.activity.detail is an in-line definition
 * when a resource is not referenced using CarePlan.activity.reference.  For
 * example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
 */
  kind?: string | undefined;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * Identifies the facility where the activity will occur; e.g. home, hospital,
 * specific clinic, etc.
 * May reference a specific clinical location or may identify a type of location.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Identifies who's expected to be involved in the activity.
 * A performer MAY also be a participant in the care plan.
 */
  performer?: Array<Reference> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
            
  /**
 * Identifies the food, drug or other product to be consumed or supplied in the
 * activity.
 */
  productCodeableConcept?: CodeableConcept | undefined;
  _productCodeableConcept?: Element | undefined;

          
            
  /**
 * Identifies the food, drug or other product to be consumed or supplied in the
 * activity.
 */
  productReference?: Reference | undefined;
  _productReference?: Element | undefined;

          
        
      
        
          
  /**
 * Identifies the quantity expected to be supplied, administered or consumed by the
 * subject.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Provides the rationale that drove the inclusion of this particular activity as
 * part of the plan or the reason why the activity was prohibited.
 * This could be a diagnosis code.  If a full condition record exists or additional
 * detail is needed, use reasonCondition instead.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource, such as the health condition(s), whose existence
 * justifies this request and drove the inclusion of this particular activity as
 * part of the plan.
 * Conditions can be identified at the activity level that are not identified as
 * reasons for the overall plan.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  scheduledTiming?: Timing | undefined;
  _scheduledTiming?: Element | undefined;

          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  scheduledPeriod?: Period | undefined;
  _scheduledPeriod?: Element | undefined;

          
            
  /**
 * The period, timing or frequency upon which the described activity is to occur.
 */
  scheduledString?: string | undefined;
  _scheduledString?: Element | undefined;

          
        
      
        
          
  /**
 * Identifies what progress is being made for the specific activity.
 * Some aspects of status can be inferred based on the resources linked in
 * actionTaken.  Note that "status" is only as current as the plan was most
 * recently updated.  
The unknown code is not to be used to convey other statuses.
 * The unknown code should be used when one of the statuses applies, but the
 * authoring system doesn't know the current state of the activity.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Provides reason why the activity isn't yet started, is on hold, was cancelled,
 * etc.
 * Will generally not be present if status is "complete".  Be sure to prompt to
 * update this (or at least remove the existing value) if the status is changed.
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * Identifies the outcome at the point when the status of the activity is assessed.
 * For example, the outcome of an education activity could be patient understands
 * (or not).
 * Note that this should not duplicate the activity status (e.g. completed or in
 * progress).
 */
  outcomeCodeableConcept?: Array<CodeableConcept> | undefined;
  _outcomeCodeableConcept?: Element[] | undefined;

        
      
        
          
  /**
 * Details of the outcome or action resulting from the activity.  The reference to
 * an "event" resource, such as Procedure or Encounter or Observation, is the
 * result/outcome of the activity itself.  The activity can be conveyed using
 * CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference
 * to a “request” resource).
 * The activity outcome is independent of the outcome of the related goal(s).  For
 * example, if the goal is to achieve a target body weight of 150 lbs and an
 * activity is defined to diet, then the activity outcome could be calories
 * consumed whereas the goal outcome is an observation for the actual body weight
 * measured.
 */
  outcomeReference?: Array<Reference> | undefined;
  _outcomeReference?: Element[] | undefined;

        
      
        
          
  /**
 * Notes about the adherence/status/progress of the activity.
 * This element should NOT be used to describe the activity to be performed - that
 * occurs either within the resource pointed to by activity.detail.reference or in
 * activity.detail.description.
 */
  progress?: Array<Annotation> | undefined;
  _progress?: Element[] | undefined;

        
      
        
          
  /**
 * The details of the proposed activity represented in a specific resource.
 * Standard extension exists
 * ([resource-pertainsToGoal](extension-resource-pertainstogoal.html)) that allows
 * goals to be referenced from any of the referenced resources in
 * CarePlan.activity.reference.  The goal should be visible when the resource
 * referenced by CarePlan.activity.reference is viewed independently from the
 * CarePlan.  Requests that are pointed to by a CarePlan using this element should
 * *not* point to this CarePlan using the "basedOn" element.  i.e. Requests that
 * are part of a CarePlan are not "based on" the CarePlan.
 */
  reference?: Reference | undefined;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * Identifies the conditions/problems/concerns/diagnoses/etc. whose management
 * and/or mitigation are handled by this plan.
 * When the diagnosis is related to an allergy or intolerance, the Condition and
 * AllergyIntolerance resources can both be used. However, to be actionable for
 * decision support, using Condition alone is not sufficient as the allergy or
 * intolerance condition needs to be represented as an AllergyIntolerance.
 */
  addresses?: Array<Reference> | undefined;
  _addresses?: Element[] | undefined;

        
      
        
          
  /**
 * When populated, the author is responsible for the care plan.  The care plan is
 * attributed to the author.
 * The author may also be a contributor.  For example, an organization can be an
 * author, but not listed as a contributor.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * A care plan that is fulfilled in whole or in part by this care plan.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies all people and organizations who are expected to be involved in the
 * care envisioned by this plan.
 */
  careTeam?: Array<Reference> | undefined;
  _careTeam?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies what "kind" of plan this is to support differentiation between
 * multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma",
 * "disease management", "wellness plan", etc.
 * There may be multiple axes of categorization and one plan may serve multiple
 * purposes.  In some cases, this may be redundant with references to
 * CarePlan.concern.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the individual(s) or organization who provided the contents of the
 * care plan.
 * Collaborative care plans may have multiple contributors.
 */
  contributor?: Array<Reference> | undefined;
  _contributor?: Element[] | undefined;

        
      
        
          
  /**
 * Represents when this particular CarePlan record was created in the system, which
 * is often a system-generated date.
 */
  created?: string | undefined;
  _created?: Element | undefined;

        
      
        
          
  /**
 * A description of the scope and nature of the plan.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The Encounter during which this CarePlan was created or to which the creation of
 * this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter. CarePlan activities
 * conducted as a result of the care plan may well occur as part of other
 * encounters.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Describes the intended objective(s) of carrying out the care plan.
 * Goal can be achieving a particular change or merely maintaining a current state
 * or even slowing a decline.
 */
  goal?: Array<Reference> | undefined;
  _goal?: Element[] | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this care plan by the performer or other
 * systems which remain constant as the resource is updated and propagates from
 * server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other
 * definition that is adhered to in whole or in part by this CarePlan.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, questionnaire
 * or other definition that is adhered to in whole or in part by this CarePlan.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the level of authority/intentionality associated with the care plan
 * and where the care plan fits into the workflow chain.
 * This element is labeled as a modifier because the intent alters when and how the
 * resource is actually applicable.
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * General notes about the care plan not covered elsewhere.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * A larger care plan of which this particular care plan is a component or step.
 * Each care plan is an independent request, such that having a care plan be part
 * of another care plan can cause issues with cascading statuses.  As such, this
 * element is still being discussed.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates when the plan did (or is intended to) come into effect and end.
 * Any activities scheduled as part of the plan should be constrained to the
 * specified period regardless of whether the activities are planned within a
 * single encounter/episode or across multiple encounters/episodes (e.g. the
 * longitudinal management of a chronic condition).
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Completed or terminated care plan whose function is taken by this new care plan.
 * The replacement could be because the initial care plan was immediately rejected
 * (due to an issue) or because the previous care plan was completed, but the need
 * for the action described by the care plan remains ongoing.
 */
  replaces?: Array<Reference> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates whether the plan is currently being acted upon, represents future
 * intentions or is now a historical record.
 * The unknown code is not to be used to convey other statuses.  The unknown code
 * should be used when one of the statuses applies, but the authoring system
 * doesn't know the current state of the care plan.

This element is labeled as a
 * modifier because the status contains the code entered-in-error that marks the
 * plan as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Identifies the patient or group whose intended care is described by the plan.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Identifies portions of the patient's record that specifically influenced the
 * formation of the plan.  These might include comorbidities, recent procedures,
 * limitations, recent assessments, etc.
 * Use "concern" to identify specific conditions addressed by the care plan.
 */
  supportingInfo?: Array<Reference> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
        
          
  /**
 * Human-friendly name for the care plan.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
    }

  


  
    /**
 * CareTeam
 * 
 * The Care Team includes all the people and organizations who plan to participate
 * in the coordination and delivery of care for a patient.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CareTeam.html}
 */
    export interface CareTeam extends DomainResource {
      
      readonly resourceType: "CareTeam";
      

      
        
          
  /**
 * Identifies what kind of team.  This is to support differentiation between
 * multiple co-existing teams, such as care plan team, episode of care team,
 * longitudinal care team.
 * There may be multiple axis of categorization and one team may serve multiple
 * purposes.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The Encounter during which this CareTeam was created or to which the creation of
 * this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this care team by the performer or other
 * systems which remain constant as the resource is updated and propagates from
 * server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The organization responsible for the care team.
 */
  managingOrganization?: Array<Reference> | undefined;
  _managingOrganization?: Element[] | undefined;

        
      
        
          
  /**
 * A label for human use intended to distinguish like teams.  E.g. the "red" vs.
 * "green" trauma teams.
 * The meaning/purpose of the team is conveyed in CareTeam.category.  This element
 * may also convey semantics of the team (e.g. "Red trauma team"), but its primary
 * purpose is to distinguish between identical teams in a human-friendly way.
 * ("Team 18735" isn't as friendly.).
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Comments made about the CareTeam.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies all people and organizations who are expected to be involved in the
 * care team.
 */
  participant?: Array<BackboneElement> | undefined;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * The specific person or organization who is participating/expected to participate
 * in the care team.
 * Patient only needs to be listed if they have a role other than "subject of
 * care".

Member is optional because some participants may be known only by their
 * role, particularly in draft plans.
 */
  member?: Reference | undefined;
  _member?: Element | undefined;

        
      
        
          
  /**
 * The organization of the practitioner.
 */
  onBehalfOf?: Reference | undefined;
  _onBehalfOf?: Element | undefined;

        
      
        
          
  /**
 * Indicates when the specific member or organization did (or is intended to) come
 * into effect and end.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Indicates specific responsibility of an individual within the care team, such as
 * "Primary care physician", "Trained social worker counselor", "Caregiver", etc.
 * Roles may sometimes be inferred by type of Practitioner.  These are
 * relationships that hold only within the context of the care team.  General
 * relationships should be handled as properties of the Patient resource directly.
 */
  role?: Array<CodeableConcept> | undefined;
  _role?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates when the team did (or is intended to) come into effect and end.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Describes why the care team exists.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Condition(s) that this care team addresses.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the current state of the care team.
 * This element is labeled as a modifier because the status contains the code
 * entered-in-error that marks the care team as not currently valid.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Identifies the patient or group whose intended care is handled by the team.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * A central contact detail for the care team (that applies to all members).
 * The ContactPoint.use code of home is not appropriate to use. These contacts are
 * not the contact details of individual care team members.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  


  
    /**
 * CatalogEntry
 * 
 * Catalog entries are wrappers that contextualize items included in a catalog.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CatalogEntry.html}
 */
    export interface CatalogEntry extends DomainResource {
      
      readonly resourceType: "CatalogEntry";
      

      
        
          
  /**
 * Used for examplefor Out of Formulary, or any specifics.
 */
  additionalCharacteristic?: Array<CodeableConcept> | undefined;
  _additionalCharacteristic?: Element[] | undefined;

        
      
        
          
  /**
 * User for example for ATC classification, or.
 */
  additionalClassification?: Array<CodeableConcept> | undefined;
  _additionalClassification?: Element[] | undefined;

        
      
        
          
  /**
 * Used in supporting related concepts, e.g. NDC to RxNorm.
 */
  additionalIdentifier?: Array<Identifier> | undefined;
  _additionalIdentifier?: Element[] | undefined;

        
      
        
          
  /**
 * Classes of devices, or ATC for medication.
 */
  classification?: Array<CodeableConcept> | undefined;
  _classification?: Element[] | undefined;

        
      
        
          
  /**
 * Used in supporting different identifiers for the same product, e.g. manufacturer
 * code and retailer code.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Typically date of issue is different from the beginning of the validity. This
 * can be used to see when an item was last updated.
 * Perhaps not needed - if we use fhir resource metadata.
 */
  lastUpdated?: string | undefined;
  _lastUpdated?: Element | undefined;

        
      
        
          
  /**
 * Whether the entry represents an orderable item.
 */
  orderable: boolean;
  _orderable?: Element | undefined;

        
      
        
          
  /**
 * The item in a catalog or definition.
 */
  referencedItem: Reference;
  _referencedItem?: Element | undefined;

        
      
        
          
  /**
 * Used for example, to point to a substance, or to a device used to administer a
 * medication.
 */
  relatedEntry?: Array<BackboneElement> | undefined;
  _relatedEntry?: Element[] | undefined;

        
      
        
          
  /**
 * The reference to the related item.
 */
  item: Reference;
  _item?: Element | undefined;

        
      
        
          
  /**
 * The type of relation to the related item: child, parent, packageContent,
 * containerPackage, usedIn, uses, requires, etc.
 */
  relationtype: string;
  _relationtype?: Element | undefined;

        
      
        
          
  /**
 * Used to support catalog exchange even for unsupported products, e.g. getting
 * list of medications even if not prescribable.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The type of item - medication, device, service, protocol or other.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The time period in which this catalog entry is expected to be active.
 */
  validityPeriod?: Period | undefined;
  _validityPeriod?: Element | undefined;

        
      
        
          
  /**
 * The date until which this catalog entry is expected to be active.
 */
  validTo?: string | undefined;
  _validTo?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  
    /**
 * ChargeItem
 * 
 * The resource ChargeItem describes the provision of healthcare provider products
 * for a certain patient, therefore referring not only to the product, but
 * containing in addition details of the provision, like date, time, amounts and
 * participating organizations and persons. Main Usage of the ChargeItem is to
 * enable the billing process and internal cost allocation.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ChargeItem.html}
 */
    export interface ChargeItem extends DomainResource {
      
      readonly resourceType: "ChargeItem";
      

      
        
          
  /**
 * Account into which this ChargeItems belongs.
 * Systems posting the ChargeItems might not always be able to determine, which
 * accounts the Items need to be places into. It is up to the postprocessing
 * Financial System to apply internal rules to decide based on the
 * Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem,
 * which Account is appropriate.
 */
  account?: Array<Reference> | undefined;
  _account?: Element[] | undefined;

        
      
        
          
  /**
 * The anatomical location where the related service has been applied.
 * Only used if not implicit in code found in Condition.code. If the use case
 * requires attributes from the BodySite resource (e.g. to identify and track
 * separately) then use the standard extension [bodySite](extension-bodysite.html).
 * May be a summary code, or a reference to a very precise definition of the
 * location, or both.
 */
  bodysite?: Array<CodeableConcept> | undefined;
  _bodysite?: Element[] | undefined;

        
      
        
          
  /**
 * A code that identifies the charge, like a billing code.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The encounter or episode of care that establishes the context for this event.
 */
  context?: Reference | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * The financial cost center permits the tracking of charge attribution.
 * The costCenter could either be given as a reference to an Organization(Role)
 * resource or as the identifier of the cost center determined by
 * Reference.identifier.value and Reference.identifier.system, depending on use
 * case requirements.
 */
  costCenter?: Reference | undefined;
  _costCenter?: Element | undefined;

        
      
        
          
  /**
 * References the source of pricing information, rules of application for the code
 * this ChargeItem uses.
 */
  definitionCanonical?: Array<string> | undefined;
  _definitionCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * References the (external) source of pricing information, rules of application
 * for the code this ChargeItem uses.
 */
  definitionUri?: Array<string> | undefined;
  _definitionUri?: Element[] | undefined;

        
      
        
          
  /**
 * Date the charge item was entered.
 * The actual date when the service associated with the charge has been rendered is
 * captured in occurrence[x].
 */
  enteredDate?: string | undefined;
  _enteredDate?: Element | undefined;

        
      
        
          
  /**
 * The device, practitioner, etc. who entered the charge item.
 * The enterer is also the person considered responsible for factor/price overrides
 * if applicable.
 */
  enterer?: Reference | undefined;
  _enterer?: Element | undefined;

        
      
        
          
  /**
 * Factor overriding the factor determined by the rules associated with the code.
 * There is no reason to carry the factor in the instance of a ChargeItem unless
 * special circumstances require a manual override. The factors are usually defined
 * by a set of rules in a back catalogue of the billing codes  (see
 * ChargeItem.definition). Derived profiles may require a ChargeItem.overrideReason
 * to be provided if either factor or price are manually overridden.
 */
  factorOverride?: number | undefined;
  _factorOverride?: Element | undefined;

        
      
        
          
  /**
 * Identifiers assigned to this event performer or other systems.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Comments made about the event by the performer, subject or other participants.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * Date/time(s) or duration when the charged service was applied.
 * The list of types may be constrained as appropriate for the type of charge item.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * Date/time(s) or duration when the charged service was applied.
 * The list of types may be constrained as appropriate for the type of charge item.
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * Date/time(s) or duration when the charged service was applied.
 * The list of types may be constrained as appropriate for the type of charge item.
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * If the list price or the rule-based factor associated with the code is
 * overridden, this attribute can capture a text to indicate the  reason for this
 * action.
 * Derived Profiles may choose to add invariants requiring this field to be
 * populated if either priceOverride or factorOverride have been filled.
 */
  overrideReason?: string | undefined;
  _overrideReason?: Element | undefined;

        
      
        
          
  /**
 * ChargeItems can be grouped to larger ChargeItems covering the whole set.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed or participated in the charged service.
 */
  performer?: Array<BackboneElement> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * The device, practitioner, etc. who performed or participated in the service.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Describes the type of performance or participation(e.g. primary surgeon,
 * anesthesiologiest, etc.).
 */
  function?: CodeableConcept | undefined;
  _function?: Element | undefined;

        
      
        
          
  /**
 * The organization requesting the service.
 * Practitioners and Devices can be associated with multiple organizations. It has
 * to be made clear, on behalf of which Organization the services have been
 * rendered.
 */
  performingOrganization?: Reference | undefined;
  _performingOrganization?: Element | undefined;

        
      
        
          
  /**
 * Total price of the charge overriding the list price associated with the code.
 * There is no reason to carry the price in the instance of a ChargeItem unless
 * circumstances require a manual override. The list prices or are usually defined
 * in a back catalogue of the billing codes  (see ChargeItem.definition). Derived
 * profiles may require a ChargeItem.overrideReason to be provided if either factor
 * or price are manually overridden.
 */
  priceOverride?: Money | undefined;
  _priceOverride?: Element | undefined;

        
      
        
          
            
  /**
 * Identifies the device, food, drug or other product being charged either by type
 * code or reference to an instance.
 */
  productReference?: Reference | undefined;
  _productReference?: Element | undefined;

          
            
  /**
 * Identifies the device, food, drug or other product being charged either by type
 * code or reference to an instance.
 */
  productCodeableConcept?: CodeableConcept | undefined;
  _productCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * Quantity of which the charge item has been serviced.
 * In many cases this may just be a value, if the underlying units are implicit in
 * the definition of the charge item code.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Describes why the event occurred in coded or textual form.
 * If the application of the charge item requires a reason to be given, it can be
 * captured here. Textual reasons can be captured using reasonCode.text.
 */
  reason?: Array<CodeableConcept> | undefined;
  _reason?: Element[] | undefined;

        
      
        
          
  /**
 * The organization performing the service.
 * The rendered Service might not be associated with a Request. This property
 * indicates which Organization requested the services to be rendered. (In many
 * cases, this may just be the Department associated with the Encounter.location).
 */
  requestingOrganization?: Reference | undefined;
  _requestingOrganization?: Element | undefined;

        
      
        
          
  /**
 * Indicated the rendered service that caused this charge.
 */
  service?: Array<Reference> | undefined;
  _service?: Element[] | undefined;

        
      
        
          
  /**
 * The current state of the ChargeItem.
 * Unknown does not represent "other" - one of the defined statuses must apply.
 * Unknown is used when the authoring system is not sure what the current status
 * is.

This element is labeled as a modifier because the status contains the code
 * entered-in-error that marks the charge item as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The individual or set of individuals the action is being or was performed on.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Further information supporting this charge.
 */
  supportingInformation?: Array<Reference> | undefined;
  _supportingInformation?: Element[] | undefined;

        
      
    }

  


  
    /**
 * ChargeItemDefinition
 * 
 * The ChargeItemDefinition resource provides the properties that apply to the
 * (billing) codes necessary to calculate costs and prices. The properties may
 * differ largely depending on type and realm, therefore this resource gives only a
 * rough structure and requires profiling for each type of billing code system.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ChargeItemDefinition.html}
 */
    export interface ChargeItemDefinition extends DomainResource {
      
      readonly resourceType: "ChargeItemDefinition";
      

      
        
          
  /**
 * Expressions that describe applicability criteria for the billing code.
 * The applicability conditions can be used to ascertain whether a billing item is
 * allowed in a specific context. E.g. some billing codes may only be applicable in
 * out-patient settings, only to male/female patients or only to children.
 */
  applicability?: Array<BackboneElement> | undefined;
  _applicability?: Element[] | undefined;

        
      
        
          
  /**
 * A brief, natural language description of the condition that effectively
 * communicates the intended semantics.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An expression that returns true or false, indicating whether the condition is
 * satisfied. When using FHIRPath expressions, the %context environment variable
 * must be replaced at runtime with the ChargeItem resource to which this
 * definition is applied.
 * Please note that FHIRPath Expressions can only be evaluated in the scope of the
 * current ChargeItem resource to which this definition is being applied.
FHIRPath
 * expressions can traverse into other resources linked from the ChargeItem
 * resource, however, testing rules such as that a billing code may be billed only
 * once per encounter need a wider scope. In such scenarios, CQL may be the
 * appropriate choice.
 */
  expression?: string | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * The media type of the language for the expression, e.g. "text/cql" for Clinical
 * Query Language expressions or "text/fhirpath" for FHIRPath expressions.
 */
  language?: string | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * The defined billing details in this resource pertain to the given billing code.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the charge item definition and/or its
 * contents. Copyright statements are generally legal restrictions on the use and
 * publishing of the charge item definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the charge item definition was published.
 * The date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the charge item definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the charge item definition.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally-defined charge item definition that is adhered
 * to in whole or in part by this definition.
 */
  derivedFromUri?: Array<string> | undefined;
  _derivedFromUri?: Element[] | undefined;

        
      
        
          
  /**
 * A free text natural language description of the charge item definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the charge item
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the charge item definition as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the charge item definition is
 * presumed to be the predominant language in the place the charge item definition
 * was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The period during which the charge item definition content was or is planned to
 * be in active use.
 * The effective period for a charge item definition  determines when the content
 * is applicable for usage and is independent of publication and review dates. For
 * example, a measure intended to be used for the year 2016 might be published in
 * 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this charge item definition is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of charge item definitions that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this charge item definition when it
 * is represented in other formats, or referenced in a specification, model, design
 * or an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this charge item definition outside
 * of FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The defined billing details in this resource pertain to the given product
 * instance(s).
 * In case of highly customized, individually produced or fitted
 * devices/substances, the pricing information may be different for each instance
 * of the product. This reference links pricing details to specific product
 * instances.
 */
  instance?: Array<Reference> | undefined;
  _instance?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the charge item definition is intended to
 * be used.
 * It may be possible for the charge item definition to be used in jurisdictions
 * other than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A larger definition of which this particular definition is a component or step.
 */
  partOf?: Array<string> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Group of properties which are applicable under the same conditions. If no
 * applicability rules are established for the group, then all properties always
 * apply.
 */
  propertyGroup?: Array<BackboneElement> | undefined;
  _propertyGroup?: Element[] | undefined;

        
      
        
          
  /**
 * Expressions that describe applicability criteria for the priceComponent.
 * The applicability conditions can be used to ascertain whether a billing item is
 * allowed in a specific context. E.g. some billing codes may only be applicable in
 * out-patient settings, only to male/female patients or only to children.
 */
  applicability?: Array<undefined> | undefined;
  _applicability?: Element[] | undefined;

        
      
        
          
  /**
 * The price for a ChargeItem may be calculated as a base price with
 * surcharges/deductions that apply in certain conditions. A ChargeItemDefinition
 * resource that defines the prices, factors and conditions that apply to a billing
 * code is currently under development. The priceComponent element can be used to
 * offer transparency to the recipient of the Invoice of how the prices have been
 * calculated.
 */
  priceComponent?: Array<BackboneElement> | undefined;
  _priceComponent?: Element[] | undefined;

        
      
        
          
  /**
 * The amount calculated for this component.
 */
  amount?: Money | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * A code that identifies the component. Codes may be used to differentiate between
 * kinds of taxes, surcharges, discounts etc.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The factor that has been applied on the base price for calculating this
 * component.
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * This code identifies the type of the component.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the charge item
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the charge item definition is the organization or individual primarily
 * responsible for the maintenance and upkeep of the charge item definition. This
 * is not necessarily the same individual or organization that developed and
 * initially authored the content. The publisher is the primary point of contact
 * for questions or issues with the charge item definition. This item SHOULD be
 * populated unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * As new versions of a protocol or guideline are defined, allows identification of
 * what versions are replaced by a new instance.
 */
  replaces?: Array<string> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
  /**
 * The current state of the ChargeItemDefinition.
 * Allows filtering of charge item definitions that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the charge item definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this charge item definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this charge item
 * definition is (or will be) published. This URL can be the target of a canonical
 * reference. It SHALL remain the same when the charge item definition is stored on
 * different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate charge item
 * definition instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the charge item
 * definition when it is referenced in a specification, model, design or instance.
 * This is an arbitrary value managed by the charge item definition author and is
 * not expected to be globally unique. For example, it might be a timestamp (e.g.
 * yyyymmdd) if a managed version is not available. There is also no expectation
 * that versions can be placed in a lexicographical sequence. To provide a version
 * consistent with the Decision Support Service specification, use the format
 * Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge
 * assets, refer to the Decision Support Service specification. Note that a version
 * is required for non-experimental active assets.
 * There may be different charge item definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the charge
 * item definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Citation
 * 
 * The Citation Resource enables reference to any knowledge artifact for purposes
 * of identification and attribution. The Citation Resource supports existing
 * reference structures and developing publication practices such as versioning,
 * expressing complex contributorship roles, and referencing computable resources.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Citation.html}
 */
    export interface Citation extends DomainResource {
      
      readonly resourceType: "Citation";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * Who authored the Citation.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * The article or artifact being described.
 */
  citedArtifact?: BackboneElement | undefined;
  _citedArtifact?: Element | undefined;

        
      
        
          
  /**
 * Summary of the article or artifact.
 */
  abstract?: Array<BackboneElement> | undefined;
  _abstract?: Element[] | undefined;

        
      
        
          
  /**
 * Copyright notice for the abstract.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * Used to express the specific language.
 */
  language?: CodeableConcept | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * Abstract content.
 */
  text: string;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Used to express the reason or specific aspect for the abstract.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The assignment to an organizing scheme.
 */
  classification?: Array<BackboneElement> | undefined;
  _classification?: Element[] | undefined;

        
      
        
          
  /**
 * The specific classification value.
 */
  classifier?: Array<CodeableConcept> | undefined;
  _classifier?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of classifier (e.g. publication type, keyword).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Provenance and copyright of classification.
 */
  whoClassified?: BackboneElement | undefined;
  _whoClassified?: Element | undefined;

        
      
        
          
  /**
 * Rights management statement for the classification.
 */
  classifierCopyright?: string | undefined;
  _classifierCopyright?: Element | undefined;

        
      
        
          
  /**
 * Acceptable to re-use the classification.
 */
  freeToShare?: boolean | undefined;
  _freeToShare?: Element | undefined;

        
      
        
          
  /**
 * Organization who created the classification.
 */
  organization?: Reference | undefined;
  _organization?: Element | undefined;

        
      
        
          
  /**
 * Person who created the classification.
 */
  person?: Reference | undefined;
  _person?: Element | undefined;

        
      
        
          
  /**
 * The publisher of the classification, not the publisher of the article or
 * artifact being cited.
 */
  publisher?: Reference | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * This element is used to list authors and other contributors, their contact
 * information, specific contributions, and summary statements.
 */
  contributorship?: BackboneElement | undefined;
  _contributorship?: Element | undefined;

        
      
        
          
  /**
 * Indicates if the list includes all authors and/or contributors.
 * If list is incomplete "et al" can be appended to Contributorship.summary.value
 * for display purposes.
 */
  complete?: boolean | undefined;
  _complete?: Element | undefined;

        
      
        
          
  /**
 * An individual entity named in the author list or contributor list.
 * Used to report contributorship in individualized ways.
 */
  entry?: Array<BackboneElement> | undefined;
  _entry?: Element[] | undefined;

        
      
        
          
  /**
 * Physical mailing address for the author or contributor.
 */
  address?: Array<Address> | undefined;
  _address?: Element[] | undefined;

        
      
        
          
  /**
 * Organization affiliated with the entity.
 */
  affiliationInfo?: Array<BackboneElement> | undefined;
  _affiliationInfo?: Element[] | undefined;

        
      
        
          
  /**
 * Display for the organization.
 */
  affiliation?: string | undefined;
  _affiliation?: Element | undefined;

        
      
        
          
  /**
 * Identifier for the organization.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Role within the organization, such as professional title.
 */
  role?: string | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Used for collective or corporate name as an author.
 * This element is used in Medline based citations, but not supported fully by FHIR
 * HumanName datatype.
 */
  collectiveName?: string | undefined;
  _collectiveName?: Element | undefined;

        
      
        
          
  /**
 * Contributions with accounting for time or number.
 */
  contributionInstance?: Array<BackboneElement> | undefined;
  _contributionInstance?: Element[] | undefined;

        
      
        
          
  /**
 * The time that the contribution was made.
 */
  time?: string | undefined;
  _time?: Element | undefined;

        
      
        
          
  /**
 * The specific contribution.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * This element identifies the specific nature of an individual’s contribution with
 * respect to the cited work.
 * The CreDiT taxonomy provides a way to encode contribution information inside
 * article XML files. The purpose of CRediT is to provide transparency in
 * contributions to scholarly published work, to enable improved systems of
 * attribution, credit, and accountability.
 */
  contributionType?: Array<CodeableConcept> | undefined;
  _contributionType?: Element[] | undefined;

        
      
        
          
  /**
 * Indication of which contributor is the corresponding contributor for the role.
 */
  correspondingContact?: boolean | undefined;
  _correspondingContact?: Element | undefined;

        
      
        
          
  /**
 * Unique person identifier.
 * Avoids needing to disambiguate common last names or changes of name. ORCID is
 * commonly used as author identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Initials for forename.
 * This element is used in Medline based citations, but not supported fully by FHIR
 * HumanName datatype.
 */
  initials?: string | undefined;
  _initials?: Element | undefined;

        
      
        
          
  /**
 * Used to code order of authors.
 */
  listOrder?: number | undefined;
  _listOrder?: Element | undefined;

        
      
        
          
  /**
 * A name associated with the individual.
 * humanName.family can match MEDLINE-based lastName (used for surname or single
 * name), humanName.given can match MEDLINE-based forename (used for remainder of
 * name except for suffix), humanName.suffix can match MEDLINE-based suffix (eg
 * 2nd, 3rd, Jr, Sr).
 */
  name?: HumanName | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The role of the contributor (e.g. author, editor, reviewer).
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Email or telephone contact methods for the author or contributor.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
        
          
  /**
 * Used to record a display of the author/contributor list without separate coding
 * for each list member.
 */
  summary?: Array<BackboneElement> | undefined;
  _summary?: Element[] | undefined;

        
      
        
          
  /**
 * Used to code the producer or rule for creating the display string.
 */
  source?: CodeableConcept | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * The format for the display string.
 */
  style?: CodeableConcept | undefined;
  _style?: Element | undefined;

        
      
        
          
  /**
 * Used most commonly to express an author list or a contributorship statement.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The display string for the author list, contributor list, or contributorship
 * statement.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The status of the cited artifact.
 */
  currentState?: Array<CodeableConcept> | undefined;
  _currentState?: Element[] | undefined;

        
      
        
          
  /**
 * When the cited artifact was accessed.
 */
  dateAccessed?: string | undefined;
  _dateAccessed?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this citation when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * May include DOI, PMID, PMCID, etc. This element will contain unique identifiers
 * that support de-duplication of citations. This identifier can be valid for only
 * one citation resource.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Any additional information or content for the article or artifact.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The component of the article or artifact.
 */
  part?: BackboneElement | undefined;
  _part?: Element | undefined;

        
      
        
          
  /**
 * The citation for the full article or artifact.
 */
  baseCitation?: Reference | undefined;
  _baseCitation?: Element | undefined;

        
      
        
          
  /**
 * The kind of component.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The specification of the component.
 */
  value?: string | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * If multiple, used to represent alternative forms of the article that are not
 * separate citations.
 * A common use is a journal article with a publication date and pagination for a
 * print version and a different publication date for the online version of the
 * same article.
 */
  publicationForm?: Array<BackboneElement> | undefined;
  _publicationForm?: Element[] | undefined;

        
      
        
          
  /**
 * Entry number or identifier for inclusion in a database.
 */
  accessionNumber?: string | undefined;
  _accessionNumber?: Element | undefined;

        
      
        
          
  /**
 * The date the article was added to the database, or the date the article was
 * released (which may differ from the journal issue publication date).
 */
  articleDate?: string | undefined;
  _articleDate?: Element | undefined;

        
      
        
          
  /**
 * Copyright notice for the full article or artifact.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * Used for isolated representation of first page.
 */
  firstPage?: string | undefined;
  _firstPage?: Element | undefined;

        
      
        
          
  /**
 * Language in which this form of the article is published.
 * Language is provided to support indexing and accessibility (typically, services
 * such as text to speech use the language tag). The html language tag in the
 * narrative applies  to the narrative. The language tag on the resource may be
 * used to specify the language of other presentations generated from the data in
 * the resource. Not all the content has to be in the base language. The
 * Resource.language should not be assumed to apply to the narrative automatically.
 * If a language is specified, it should it also be specified on the div element in
 * the html (see rules in HTML5 for information about the relationship between
 * xml:lang and the html lang attribute).
 */
  language?: Array<CodeableConcept> | undefined;
  _language?: Element[] | undefined;

        
      
        
          
  /**
 * Used for isolated representation of last page.
 */
  lastPage?: string | undefined;
  _lastPage?: Element | undefined;

        
      
        
          
  /**
 * The date the article was last revised or updated in the database.
 */
  lastRevisionDate?: string | undefined;
  _lastRevisionDate?: Element | undefined;

        
      
        
          
  /**
 * Actual or approximate number of pages or screens.
 */
  pageCount?: string | undefined;
  _pageCount?: Element | undefined;

        
      
        
          
  /**
 * Used for full display of pagination.
 */
  pageString?: string | undefined;
  _pageString?: Element | undefined;

        
      
        
          
  /**
 * The specific issue in which the cited article resides.
 */
  periodicRelease?: BackboneElement | undefined;
  _periodicRelease?: Element | undefined;

        
      
        
          
  /**
 * Describes the form of the medium cited. Common codes are "Internet" or "Print".
 * National Library of Medicine uses the codes "Internet" or "Print".
 */
  citedMedium?: CodeableConcept | undefined;
  _citedMedium?: Element | undefined;

        
      
        
          
  /**
 * Defining the date on which the issue of the journal was published.
 */
  dateOfPublication?: BackboneElement | undefined;
  _dateOfPublication?: Element | undefined;

        
      
        
          
  /**
 * Date on which the issue of the journal was published.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Day on which the issue of the journal was published.
 */
  day?: string | undefined;
  _day?: Element | undefined;

        
      
        
          
  /**
 * Month on which the issue of the journal was published.
 */
  month?: string | undefined;
  _month?: Element | undefined;

        
      
        
          
  /**
 * Spring, Summer, Fall/Autumn, Winter.
 */
  season?: string | undefined;
  _season?: Element | undefined;

        
      
        
          
  /**
 * Text representation of the date of which the issue of the journal was published.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Year on which the issue of the journal was published.
 */
  year?: string | undefined;
  _year?: Element | undefined;

        
      
        
          
  /**
 * Issue, part or supplement of journal in which the article is published.
 */
  issue?: string | undefined;
  _issue?: Element | undefined;

        
      
        
          
  /**
 * Volume number of journal in which the article is published.
 */
  volume?: string | undefined;
  _volume?: Element | undefined;

        
      
        
          
  /**
 * The collection the cited article or artifact is published in.
 */
  publishedIn?: BackboneElement | undefined;
  _publishedIn?: Element | undefined;

        
      
        
          
  /**
 * Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book
 * identifiers include ISBN.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Name of the publisher.
 */
  publisher?: Reference | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Geographic location of the publisher.
 */
  publisherLocation?: string | undefined;
  _publisherLocation?: Element | undefined;

        
      
        
          
  /**
 * Name of the database or title of the book or journal.
 * ClinicalTrials.gov is a name of a database.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Kind of container (e.g. Periodical, database, or book).
 * Journals and newspapers are coded as Periodical.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify things closely related to this
 * citation.
 * May include trial registry identifiers, e.g. NCT04372602 from
 * clinicaltrials.gov. This identifier can be valid for multiple citation
 * resources.
 */
  relatedIdentifier?: Array<Identifier> | undefined;
  _relatedIdentifier?: Element[] | undefined;

        
      
        
          
  /**
 * The artifact related to the cited artifact.
 */
  relatesTo?: Array<BackboneElement> | undefined;
  _relatesTo?: Element[] | undefined;

        
      
        
          
  /**
 * How the cited artifact relates to the target artifact.
 */
  relationshipType: CodeableConcept;
  _relationshipType?: Element | undefined;

        
      
        
          
            
  /**
 * The article or artifact that the cited artifact is related to.
 */
  targetUri?: string | undefined;
  _targetUri?: Element | undefined;

          
            
  /**
 * The article or artifact that the cited artifact is related to.
 */
  targetIdentifier?: Identifier | undefined;
  _targetIdentifier?: Element | undefined;

          
            
  /**
 * The article or artifact that the cited artifact is related to.
 */
  targetReference?: Reference | undefined;
  _targetReference?: Element | undefined;

          
            
  /**
 * The article or artifact that the cited artifact is related to.
 */
  targetAttachment?: Attachment | undefined;
  _targetAttachment?: Element | undefined;

          
        
      
        
          
  /**
 * The clasification of the related artifact.
 */
  targetClassifier?: Array<CodeableConcept> | undefined;
  _targetClassifier?: Element[] | undefined;

        
      
        
          
  /**
 * An effective date or period for a status of the cited artifact.
 */
  statusDate?: Array<BackboneElement> | undefined;
  _statusDate?: Element[] | undefined;

        
      
        
          
  /**
 * Classification of the status.
 */
  activity: CodeableConcept;
  _activity?: Element | undefined;

        
      
        
          
  /**
 * Either occurred or expected.
 */
  actual?: boolean | undefined;
  _actual?: Element | undefined;

        
      
        
          
  /**
 * When the status started and/or ended.
 * For an instance, place the same value in both start and end elements.
 */
  period: Period;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The title details of the article or artifact.
 */
  title?: Array<BackboneElement> | undefined;
  _title?: Element[] | undefined;

        
      
        
          
  /**
 * Used to express the specific language.
 */
  language?: CodeableConcept | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * The title of the article or artifact.
 */
  text: string;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Used to express the reason or specific aspect for the title.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * The defined version of the cited artifact.
 */
  version?: BackboneElement | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * Citation for the main version of the cited artifact.
 */
  baseCitation?: Reference | undefined;
  _baseCitation?: Element | undefined;

        
      
        
          
  /**
 * The version number or other version identifier.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * Used for any URL for the article or artifact cited.
 */
  webLocation?: Array<BackboneElement> | undefined;
  _webLocation?: Element[] | undefined;

        
      
        
          
  /**
 * Code the reason for different URLs, e.g. abstract and full-text.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The specific URL.
 * Persistent URLs, like doi, are preferred.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The assignment to an organizing scheme.
 */
  classification?: Array<BackboneElement> | undefined;
  _classification?: Element[] | undefined;

        
      
        
          
  /**
 * The specific classification value.
 */
  classifier?: Array<CodeableConcept> | undefined;
  _classifier?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of classifier (e.g. publication type, keyword).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * Use and/or publishing restrictions for the Citation, not for the cited artifact.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The status of the citation.
 */
  currentState?: Array<CodeableConcept> | undefined;
  _currentState?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the citation was published. The date must
 * change when the business version changes and it must change if the status code
 * changes. In addition, it should change when the substantive content of the
 * citation changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the citation. Additional specific
 * dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the citation from a consumer's
 * perspective.
 * This description can be used to capture details such as why the citation was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the citation as conveyed in the 'text' field of the resource itself. This
 * item SHOULD be populated unless the information is available from context (e.g.
 * the language of the citation is presumed to be the predominant language in the
 * place the citation was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Who edited the Citation.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the citation content was or is planned to be in active
 * use.
 * The effective period for a citation  determines when the content is applicable
 * for usage and is independent of publication and review dates. For example, a
 * measure intended to be used for the year 2016 might be published in 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * Who endorsed the Citation.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this citation is authored for testing purposes
 * (or education/evaluation/marketing) and is not intended to be used for genuine
 * usage.
 * Allows filtering of citations that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this citation when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * May include DOI, PMID, PMCID, etc. This element will contain unique identifiers
 * that support de-duplication of citations. This identifier can be valid for only
 * one citation resource.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the citation is intended to be used.
 * It may be possible for the citation to be used in jurisdictions other than those
 * for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the citation. This name should be usable as
 * an identifier for the module by machine processing applications such as code
 * generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Used for general notes and annotations not coded elsewhere.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the citation.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the citation is the organization or individual primarily responsible for the
 * maintenance and upkeep of the citation. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * citation. This item SHOULD be populated unless the information is available from
 * context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this citation is needed and why it has been designed as it
 * has.
 * This element does not describe the usage of the citation. Instead, it provides
 * traceability of ''why'' the resource is either needed or ''why'' it is defined
 * as it is.  This may be used to point to source materials or specifications that
 * drove the structure of this citation.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Artifact related to the Citation Resource.
 */
  relatesTo?: Array<BackboneElement> | undefined;
  _relatesTo?: Element[] | undefined;

        
      
        
          
  /**
 * How the Citation resource relates to the target artifact.
 */
  relationshipType: CodeableConcept;
  _relationshipType?: Element | undefined;

        
      
        
          
            
  /**
 * The article or artifact that the Citation Resource is related to.
 */
  targetUri?: string | undefined;
  _targetUri?: Element | undefined;

          
            
  /**
 * The article or artifact that the Citation Resource is related to.
 */
  targetIdentifier?: Identifier | undefined;
  _targetIdentifier?: Element | undefined;

          
            
  /**
 * The article or artifact that the Citation Resource is related to.
 */
  targetReference?: Reference | undefined;
  _targetReference?: Element | undefined;

          
            
  /**
 * The article or artifact that the Citation Resource is related to.
 */
  targetAttachment?: Attachment | undefined;
  _targetAttachment?: Element | undefined;

          
        
      
        
          
  /**
 * The clasification of the related artifact.
 */
  targetClassifier?: Array<CodeableConcept> | undefined;
  _targetClassifier?: Element[] | undefined;

        
      
        
          
  /**
 * Who reviewed the Citation.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this summary. Enables tracking the life-cycle of the content.
 * Allows filtering of summarys s that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * An effective date or period for a status of the citation.
 */
  statusDate?: Array<BackboneElement> | undefined;
  _statusDate?: Element[] | undefined;

        
      
        
          
  /**
 * Classification of the status.
 */
  activity: CodeableConcept;
  _activity?: Element | undefined;

        
      
        
          
  /**
 * Either occurred or expected.
 */
  actual?: boolean | undefined;
  _actual?: Element | undefined;

        
      
        
          
  /**
 * When the status started and/or ended.
 * For an instance, place the same value in both start and end elements.
 */
  period: Period;
  _period?: Element | undefined;

        
      
        
          
  /**
 * A human-readable display of the citation.
 */
  summary?: Array<BackboneElement> | undefined;
  _summary?: Element[] | undefined;

        
      
        
          
  /**
 * Format for display of the citation.
 */
  style?: CodeableConcept | undefined;
  _style?: Element | undefined;

        
      
        
          
  /**
 * The human-readable display of the citation.
 */
  text: string;
  _text?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the citation.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this citation when it is referenced in
 * a specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this summary is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the summary is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate citation
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the citation when it is
 * referenced in a specification, model, design or instance. This is an arbitrary
 * value managed by the citation author and is not expected to be globally unique.
 * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
 * available. There is also no expectation that versions can be placed in a
 * lexicographical sequence.
 * There may be different citation instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the citation with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Claim
 * 
 * A provider issued list of professional services and products which have been
 * provided, or are to be provided, to a patient which is sent to an insurer for
 * reimbursement.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Claim.html}
 */
    export interface Claim extends DomainResource {
      
      readonly resourceType: "Claim";
      

      
        
          
  /**
 * Details of an accident which resulted in injuries which required the products
 * and services listed in the claim.
 */
  accident?: BackboneElement | undefined;
  _accident?: Element | undefined;

        
      
        
          
  /**
 * Date of an accident event  related to the products and services contained in the
 * claim.
 * The date of the accident has to precede the dates of the products and services
 * but within a reasonable timeframe.
 */
  date: string;
  _date?: Element | undefined;

        
      
        
          
            
  /**
 * The physical location of the accident event.
 */
  locationAddress?: Address | undefined;
  _locationAddress?: Element | undefined;

          
            
  /**
 * The physical location of the accident event.
 */
  locationReference?: Reference | undefined;
  _locationReference?: Element | undefined;

          
        
      
        
          
  /**
 * The type or context of the accident event for the purposes of selection of
 * potential insurance coverages and determination of coordination between
 * insurers.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The period for which charges are being submitted.
 * Typically this would be today or in the past for a claim, and today or in the
 * future for preauthorizations and predeterminations. Typically line item dates of
 * service should fall within the billing period if one is specified.
 */
  billablePeriod?: Period | undefined;
  _billablePeriod?: Element | undefined;

        
      
        
          
  /**
 * The members of the team who provided the products and services.
 */
  careTeam?: Array<BackboneElement> | undefined;
  _careTeam?: Element[] | undefined;

        
      
        
          
  /**
 * Member of the team who provided the product or service.
 */
  provider: Reference;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * The qualification of the practitioner which is applicable for this service.
 */
  qualification?: CodeableConcept | undefined;
  _qualification?: Element | undefined;

        
      
        
          
  /**
 * The party who is billing and/or responsible for the claimed products or
 * services.
 * Responsible might not be required when there is only a single provider listed.
 */
  responsible?: boolean | undefined;
  _responsible?: Element | undefined;

        
      
        
          
  /**
 * The lead, assisting or supervising practitioner and their discipline if a
 * multidisciplinary team.
 * Role might not be required when there is only a single provider listed.
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify care team entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * The date this resource was created.
 * This field is independent of the date of creation of the resource as it may
 * reflect the creation date of a source document prior to digitization. Typically
 * for claims all services must be completed as of this date.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * Information about diagnoses relevant to the claim items.
 */
  diagnosis?: Array<BackboneElement> | undefined;
  _diagnosis?: Element[] | undefined;

        
      
        
          
            
  /**
 * The nature of illness or problem in a coded form or as a reference to an
 * external defined Condition.
 */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  _diagnosisCodeableConcept?: Element | undefined;

          
            
  /**
 * The nature of illness or problem in a coded form or as a reference to an
 * external defined Condition.
 */
  diagnosisReference?: Reference | undefined;
  _diagnosisReference?: Element | undefined;

          
        
      
        
          
  /**
 * Indication of whether the diagnosis was present on admission to a facility.
 */
  onAdmission?: CodeableConcept | undefined;
  _onAdmission?: Element | undefined;

        
      
        
          
  /**
 * A package billing code or bundle code used to group products and services to a
 * particular health condition (such as heart attack) which is based on a
 * predetermined grouping code system.
 * For example DRG (Diagnosis Related Group) or a bundled billing code. A patient
 * may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would
 * be assigned. The Claim item (and possible subsequent claims) would refer to the
 * DRG for those line items that were for services related to the heart attack
 * event.
 */
  packageCode?: CodeableConcept | undefined;
  _packageCode?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify diagnosis entries.
 * Diagnosis are presented in list order to their expected importance: primary,
 * secondary, etc.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * When the condition was observed or the relative ranking.
 * For example: admitting, primary, secondary, discharge.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * Individual who created the claim, predetermination or preauthorization.
 */
  enterer?: Reference | undefined;
  _enterer?: Element | undefined;

        
      
        
          
  /**
 * Facility where the services were provided.
 */
  facility?: Reference | undefined;
  _facility?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate whether and for whom funds are to be reserved for future
 * claims.
 * This field is only used for preauthorizations.
 */
  fundsReserve?: CodeableConcept | undefined;
  _fundsReserve?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this claim.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Financial instruments for reimbursement for the health care products and
 * services specified on the claim.
 * All insurance coverages for the patient which may be applicable for
 * reimbursement, of the products and services listed in the claim, are typically
 * provided in the claim to allow insurers to confirm the ordering of the insurance
 * coverages relative to local 'coordination of benefit' rules. One coverage (and
 * only one) with 'focal=true' is to be used in the adjudication of this claim.
 * Coverages appearing before the focal Coverage in the list, and where
 * 'Coverage.subrogation=false', should provide a reference to the ClaimResponse
 * containing the adjudication results of the prior claim.
 */
  insurance: Array<BackboneElement>;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * A business agreement number established between the provider and the insurer for
 * special business processing purposes.
 */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;

        
      
        
          
  /**
 * The result of the adjudication of the line items for the Coverage specified in
 * this insurance.
 * Must not be specified when 'focal=true' for this insurance.
 */
  claimResponse?: Reference | undefined;
  _claimResponse?: Element | undefined;

        
      
        
          
  /**
 * Reference to the insurance card level information contained in the Coverage
 * resource. The coverage issuing insurer will use these details to locate the
 * patient's actual coverage within the insurer's information system.
 */
  coverage: Reference;
  _coverage?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that this Coverage is to be used for adjudication of this
 * claim when set to true.
 * A patient may (will) have multiple insurance policies which provide
 * reimbursement for healthcare services and products. For example a person may
 * also be covered by their spouse's policy and both appear in the list (and may be
 * from the same insurer). This flag will be set to true for only one of the listed
 * policies and that policy will be used for adjudicating this claim. Other claims
 * would be created to request adjudication against the other listed policies.
 */
  focal: boolean;
  _focal?: Element | undefined;

        
      
        
          
  /**
 * The business identifier to be used when the claim is sent for adjudication
 * against this insurance policy.
 * Only required in jurisdictions where insurers, rather than the provider, are
 * required to send claims to  insurers that appear after them in the list. This
 * element is not required when 'subrogation=true'.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * Reference numbers previously provided by the insurer to the provider to be
 * quoted on subsequent claims containing services or products related to the prior
 * authorization.
 * This value is an alphanumeric string that may be provided over the phone, via
 * text, via paper, or within a ClaimResponse resource and is not a FHIR
 * Identifier.
 */
  preAuthRef?: Array<string> | undefined;
  _preAuthRef?: Element[] | undefined;

        
      
        
          
  /**
 * A number to uniquely identify insurance entries and provide a sequence of
 * coverages to convey coordination of benefit order.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * The Insurer who is target of the request.
 */
  insurer?: Reference | undefined;
  _insurer?: Element | undefined;

        
      
        
          
  /**
 * A claim line. Either a simple  product or service or a 'group' of details which
 * can each be a simple items or groups of sub-details.
 */
  item?: Array<BackboneElement> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * Physical service site on the patient (limb, tooth, etc.).
 * For example: Providing a tooth code, allows an insurer to identify a provider
 * performing a filling on a tooth that was previously removed.
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * CareTeam members related to this service or product.
 */
  careTeamSequence?: Array<number> | undefined;
  _careTeamSequence?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A claim detail line. Either a simple (a product or service) or a 'group' of
 * sub-details which are simple items.
 */
  detail?: Array<BackboneElement> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or out of office hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The type of revenue or cost center providing the product and/or service.
 */
  revenue?: CodeableConcept | undefined;
  _revenue?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify item entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * A claim detail line. Either a simple (a product or service) or a 'group' of
 * sub-details which are simple items.
 */
  subDetail?: Array<BackboneElement> | undefined;
  _subDetail?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or out of office hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The type of revenue or cost center providing the product and/or service.
 */
  revenue?: CodeableConcept | undefined;
  _revenue?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify item entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * Diagnosis applicable for this service or product.
 */
  diagnosisSequence?: Array<number> | undefined;
  _diagnosisSequence?: Element[] | undefined;

        
      
        
          
  /**
 * The Encounters during which this Claim was created or to which the creation of
 * this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter.
 */
  encounter?: Array<Reference> | undefined;
  _encounter?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Exceptions, special conditions and supporting information applicable for this
 * service or product.
 */
  informationSequence?: Array<number> | undefined;
  _informationSequence?: Element[] | undefined;

        
      
        
          
            
  /**
 * Where the product or service was provided.
 */
  locationCodeableConcept?: CodeableConcept | undefined;
  _locationCodeableConcept?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationAddress?: Address | undefined;
  _locationAddress?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationReference?: Reference | undefined;
  _locationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or outside of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * Procedures applicable for this service or product.
 */
  procedureSequence?: Array<number> | undefined;
  _procedureSequence?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The type of revenue or cost center providing the product and/or service.
 */
  revenue?: CodeableConcept | undefined;
  _revenue?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify item entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedDate?: string | undefined;
  _servicedDate?: Element | undefined;

          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedPeriod?: Period | undefined;
  _servicedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
 */
  subSite?: Array<CodeableConcept> | undefined;
  _subSite?: Element[] | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * Original prescription which has been superseded by this prescription to support
 * the dispensing of pharmacy services, medications or products.
 * For example, a physician may prescribe a medication which the pharmacy
 * determines is contraindicated, or for which the patient has an intolerance, and
 * therefore issues a new prescription for an alternate medication which has the
 * same therapeutic intent. The prescription from the pharmacy becomes the
 * 'prescription' and that from the physician becomes the 'original prescription'.
 */
  originalPrescription?: Reference | undefined;
  _originalPrescription?: Element | undefined;

        
      
        
          
  /**
 * The party to whom the professional services and/or products have been supplied
 * or are being considered and for whom actual or forecast reimbursement is sought.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The party to be reimbursed for cost of the products and services according to
 * the terms of the policy.
 * Often providers agree to receive the benefits payable to reduce the near-term
 * costs to the patient. The insurer may decline to pay the provider and choose to
 * pay the subscriber instead.
 */
  payee?: BackboneElement | undefined;
  _payee?: Element | undefined;

        
      
        
          
  /**
 * Reference to the individual or organization to whom any payment will be made.
 * Not required if the payee is 'subscriber' or 'provider'.
 */
  party?: Reference | undefined;
  _party?: Element | undefined;

        
      
        
          
  /**
 * Type of Party to be reimbursed: subscriber, provider, other.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Prescription to support the dispensing of pharmacy, device or vision products.
 */
  prescription?: Reference | undefined;
  _prescription?: Element | undefined;

        
      
        
          
  /**
 * The provider-required urgency of processing the request. Typical values include:
 * stat, routine deferred.
 * If a claim processor is unable to complete the processing as per the priority
 * then they should generate and error and not process the request.
 */
  priority: CodeableConcept;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * Procedures performed on the patient relevant to the billing items with the
 * claim.
 */
  procedure?: Array<BackboneElement> | undefined;
  _procedure?: Element[] | undefined;

        
      
        
          
  /**
 * Date and optionally time the procedure was performed.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
            
  /**
 * The code or reference to a Procedure resource which identifies the clinical
 * intervention performed.
 */
  procedureCodeableConcept?: CodeableConcept | undefined;
  _procedureCodeableConcept?: Element | undefined;

          
            
  /**
 * The code or reference to a Procedure resource which identifies the clinical
 * intervention performed.
 */
  procedureReference?: Reference | undefined;
  _procedureReference?: Element | undefined;

          
        
      
        
          
  /**
 * A number to uniquely identify procedure entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * When the condition was observed or the relative ranking.
 * For example: primary, secondary.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * The provider which is responsible for the claim, predetermination or
 * preauthorization.
 * Typically this field would be 1..1 where this party is responsible for the claim
 * but not necessarily professionally responsible for the provision of the
 * individual products and services listed below.
 */
  provider: Reference;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * A reference to a referral resource.
 * The referral resource which lists the date, practitioner, reason and other
 * supporting information.
 */
  referral?: Reference | undefined;
  _referral?: Element | undefined;

        
      
        
          
  /**
 * Other claims which are related to this claim such as prior submissions or claims
 * for related services or for the same event.
 * For example,  for the original treatment and follow-up exams.
 */
  related?: Array<BackboneElement> | undefined;
  _related?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to a related claim.
 */
  claim?: Reference | undefined;
  _claim?: Element | undefined;

        
      
        
          
  /**
 * An alternate organizational reference to the case or file to which this
 * particular claim pertains.
 * For example, Property/Casualty insurer claim # or Workers Compensation case # .
 */
  reference?: Identifier | undefined;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * A code to convey how the claims are related.
 * For example, prior claim or umbrella.
 */
  relationship?: CodeableConcept | undefined;
  _relationship?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A finer grained suite of claim type codes which may convey additional
 * information such as Inpatient vs Outpatient and/or a specialty service.
 * This may contain the local bill type codes, for example the US UB-04 bill type
 * code or the CMS bill type.
 */
  subType?: CodeableConcept | undefined;
  _subType?: Element | undefined;

        
      
        
          
  /**
 * Additional information codes regarding exceptions, special considerations, the
 * condition, situation, prior or concurrent issues.
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
  supportingInfo?: Array<BackboneElement> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
        
          
  /**
 * The general class of the information supplied: information; exception; accident,
 * employment; onset, etc.
 * This may contain a category for the local bill type codes.
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * System and code pertaining to the specific information regarding special
 * conditions relating to the setting, treatment or patient  for which care is
 * sought.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Provides the reason in the situation where a reason code is required in addition
 * to the content.
 * For example: the reason for the additional stay, or why a tooth is  missing.
 */
  reason?: CodeableConcept | undefined;
  _reason?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify supporting information entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
            
  /**
 * The date when or period to which this information refers.
 */
  timingDate?: string | undefined;
  _timingDate?: Element | undefined;

          
            
  /**
 * The date when or period to which this information refers.
 */
  timingPeriod?: Period | undefined;
  _timingPeriod?: Element | undefined;

          
        
      
        
          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
        
          
  /**
 * The total value of the all the items in the claim.
 */
  total?: Money | undefined;
  _total?: Element | undefined;

        
      
        
          
  /**
 * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
 * The majority of jurisdictions use: oral, pharmacy, vision, professional and
 * institutional, or variants on those terms, as the general styles of claims. The
 * valueset is extensible to accommodate other jurisdictional requirements.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate whether the nature of the request is: to request adjudication
 * of products and services previously rendered; or requesting authorization and
 * adjudication for provision in the future; or requesting the non-binding
 * adjudication of the listed products and services which could be provided in the
 * future.
 */
  use: string;
  _use?: Element | undefined;

        
      
    }

  


  
    /**
 * ClaimResponse
 * 
 * This resource provides the adjudication details from the processing of a Claim
 * resource.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ClaimResponse.html}
 */
    export interface ClaimResponse extends DomainResource {
      
      readonly resourceType: "ClaimResponse";
      

      
        
          
  /**
 * The first-tier service adjudications for payor added product or service lines.
 */
  addItem?: Array<BackboneElement> | undefined;
  _addItem?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication: Array<undefined>;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Physical service site on the patient (limb, tooth, etc.).
 * For example: Providing a tooth code allows an insurer to identify a provider
 * performing a filling on a tooth that was previously removed.
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * The second-tier service adjudications for payor added services.
 */
  detail?: Array<BackboneElement> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication: Array<undefined>;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or outside of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The third-tier service adjudications for payor added services.
 */
  subDetail?: Array<BackboneElement> | undefined;
  _subDetail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication: Array<undefined>;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or outside of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * The sequence number of the details within the claim item which this line is
 * intended to replace.
 */
  detailSequence?: Array<number> | undefined;
  _detailSequence?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Claim items which this service line is intended to replace.
 */
  itemSequence?: Array<number> | undefined;
  _itemSequence?: Element[] | undefined;

        
      
        
          
            
  /**
 * Where the product or service was provided.
 */
  locationCodeableConcept?: CodeableConcept | undefined;
  _locationCodeableConcept?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationAddress?: Address | undefined;
  _locationAddress?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationReference?: Reference | undefined;
  _locationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or outside of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The providers who are authorized for the services rendered to the patient.
 */
  provider?: Array<Reference> | undefined;
  _provider?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedDate?: string | undefined;
  _servicedDate?: Element | undefined;

          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedPeriod?: Period | undefined;
  _servicedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * The sequence number of the sub-details within the details within the claim item
 * which this line is intended to replace.
 */
  subdetailSequence?: Array<number> | undefined;
  _subdetailSequence?: Element[] | undefined;

        
      
        
          
  /**
 * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
 */
  subSite?: Array<CodeableConcept> | undefined;
  _subSite?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * The adjudication results which are presented at the header level rather than at
 * the line-item or add-item levels.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Request for additional supporting or authorizing information.
 * For example: professional reports, documents, images, clinical resources, or
 * accident reports.
 */
  communicationRequest?: Array<Reference> | undefined;
  _communicationRequest?: Element[] | undefined;

        
      
        
          
  /**
 * The date this resource was created.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * A human readable description of the status of the adjudication.
 */
  disposition?: string | undefined;
  _disposition?: Element | undefined;

        
      
        
          
  /**
 * Errors encountered during the processing of the adjudication.
 * If the request contains errors then an error element should be provided and no
 * adjudication related sections (item, addItem, or payment) should be present.
 */
  error?: Array<BackboneElement> | undefined;
  _error?: Element[] | undefined;

        
      
        
          
  /**
 * An error code, from a specified code system, which details why the claim could
 * not be adjudicated.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The sequence number of the detail within the line item submitted which contains
 * the error. This value is omitted when the error occurs outside of the item
 * structure.
 */
  detailSequence?: number | undefined;
  _detailSequence?: Element | undefined;

        
      
        
          
  /**
 * The sequence number of the line item submitted which contains the error. This
 * value is omitted when the error occurs outside of the item structure.
 */
  itemSequence?: number | undefined;
  _itemSequence?: Element | undefined;

        
      
        
          
  /**
 * The sequence number of the sub-detail within the detail within the line item
 * submitted which contains the error. This value is omitted when the error occurs
 * outside of the item structure.
 */
  subDetailSequence?: number | undefined;
  _subDetailSequence?: Element | undefined;

        
      
        
          
  /**
 * The actual form, by reference or inclusion, for printing the content or an EOB.
 * Needed to permit insurers to include the actual form.
 */
  form?: Attachment | undefined;
  _form?: Element | undefined;

        
      
        
          
  /**
 * A code for the form to be used for printing the content.
 * May be needed to identify specific jurisdictional forms.
 */
  formCode?: CodeableConcept | undefined;
  _formCode?: Element | undefined;

        
      
        
          
  /**
 * A code, used only on a response to a preauthorization, to indicate whether the
 * benefits payable have been reserved and for whom.
 * Fund would be release by a future claim quoting the preAuthRef of this response.
 * Examples of values include: provider, patient, none.
 */
  fundsReserve?: CodeableConcept | undefined;
  _fundsReserve?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this claim response.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Financial instruments for reimbursement for the health care products and
 * services specified on the claim.
 * All insurance coverages for the patient which may be applicable for
 * reimbursement, of the products and services listed in the claim, are typically
 * provided in the claim to allow insurers to confirm the ordering of the insurance
 * coverages relative to local 'coordination of benefit' rules. One coverage (and
 * only one) with 'focal=true' is to be used in the adjudication of this claim.
 * Coverages appearing before the focal Coverage in the list, and where
 * 'subrogation=false', should provide a reference to the ClaimResponse containing
 * the adjudication results of the prior claim.
 */
  insurance?: Array<BackboneElement> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * A business agreement number established between the provider and the insurer for
 * special business processing purposes.
 */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;

        
      
        
          
  /**
 * The result of the adjudication of the line items for the Coverage specified in
 * this insurance.
 * Must not be specified when 'focal=true' for this insurance.
 */
  claimResponse?: Reference | undefined;
  _claimResponse?: Element | undefined;

        
      
        
          
  /**
 * Reference to the insurance card level information contained in the Coverage
 * resource. The coverage issuing insurer will use these details to locate the
 * patient's actual coverage within the insurer's information system.
 */
  coverage: Reference;
  _coverage?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that this Coverage is to be used for adjudication of this
 * claim when set to true.
 * A patient may (will) have multiple insurance policies which provide
 * reimbursement for healthcare services and products. For example a person may
 * also be covered by their spouse's policy and both appear in the list (and may be
 * from the same insurer). This flag will be set to true for only one of the listed
 * policies and that policy will be used for adjudicating this claim. Other claims
 * would be created to request adjudication against the other listed policies.
 */
  focal: boolean;
  _focal?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify insurance entries and provide a sequence of
 * coverages to convey coordination of benefit order.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * The party responsible for authorization, adjudication and reimbursement.
 */
  insurer: Reference;
  _insurer?: Element | undefined;

        
      
        
          
  /**
 * A claim line. Either a simple (a product or service) or a 'group' of details
 * which can also be a simple items or groups of sub-details.
 */
  item?: Array<BackboneElement> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * If this item is a group then the values here are a summary of the adjudication
 * of the detail items. If this item is a simple product or service then this is
 * the result of the adjudication of this item.
 */
  adjudication: Array<BackboneElement>;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Monetary amount associated with the category.
 * For example: amount submitted, eligible amount, co-payment, and benefit payable.
 */
  amount?: Money | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate the information type of this adjudication record. Information
 * types may include the value submitted, maximum values or percentages allowed or
 * payable under the plan, amounts that: the patient is responsible for in
 * aggregate or pertaining to this item; amounts paid by other coverages; and, the
 * benefit payable for this item.
 * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A code supporting the understanding of the adjudication result and explaining
 * variance from expected amount.
 * For example may indicate that the funds for this benefit type have been
 * exhausted.
 */
  reason?: CodeableConcept | undefined;
  _reason?: Element | undefined;

        
      
        
          
  /**
 * A non-monetary value associated with the category. Mutually exclusive to the
 * amount element above.
 * For example: eligible percentage or co-payment percentage.
 */
  value?: number | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * A claim detail. Either a simple (a product or service) or a 'group' of
 * sub-details which are simple items.
 */
  detail?: Array<BackboneElement> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication: Array<undefined>;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * A number to uniquely reference the claim detail entry.
 */
  detailSequence: number;
  _detailSequence?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * A sub-detail adjudication of a simple product or service.
 */
  subDetail?: Array<BackboneElement> | undefined;
  _subDetail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * A number to uniquely reference the claim sub-detail entry.
 */
  subDetailSequence: number;
  _subDetailSequence?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely reference the claim item entries.
 */
  itemSequence: number;
  _itemSequence?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * The outcome of the claim, predetermination, or preauthorization processing.
 * The resource may be used to indicate that: the request has been held (queued)
 * for processing; that it has been processed and errors found (error); that no
 * errors were found and that some of the adjudication has been undertaken
 * (partial) or that all of the adjudication has been undertaken (complete).
 */
  outcome: string;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * The party to whom the professional services and/or products have been supplied
 * or are being considered and for whom actual for facast reimbursement is sought.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * Type of Party to be reimbursed: subscriber, provider, other.
 */
  payeeType?: CodeableConcept | undefined;
  _payeeType?: Element | undefined;

        
      
        
          
  /**
 * Payment details for the adjudication of the claim.
 */
  payment?: BackboneElement | undefined;
  _payment?: Element | undefined;

        
      
        
          
  /**
 * Total amount of all adjustments to this payment included in this transaction
 * which are not related to this claim's adjudication.
 * Insurers will deduct amounts owing from the provider (adjustment), such as a
 * prior overpayment, from the amount owing to the provider (benefits payable) when
 * payment is made to the provider.
 */
  adjustment?: Money | undefined;
  _adjustment?: Element | undefined;

        
      
        
          
  /**
 * Reason for the payment adjustment.
 */
  adjustmentReason?: CodeableConcept | undefined;
  _adjustmentReason?: Element | undefined;

        
      
        
          
  /**
 * Benefits payable less any payment adjustment.
 */
  amount: Money;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * Estimated date the payment will be issued or the actual issue date of payment.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Issuer's unique identifier for the payment instrument.
 * For example: EFT number or check number.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * Whether this represents partial or complete payment of the benefits payable.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The time frame during which this authorization is effective.
 */
  preAuthPeriod?: Period | undefined;
  _preAuthPeriod?: Element | undefined;

        
      
        
          
  /**
 * Reference from the Insurer which is used in later communications which refers to
 * this adjudication.
 * This value is only present on preauthorization adjudications.
 */
  preAuthRef?: string | undefined;
  _preAuthRef?: Element | undefined;

        
      
        
          
  /**
 * A note that describes or explains adjudication results in a human readable form.
 */
  processNote?: Array<BackboneElement> | undefined;
  _processNote?: Element[] | undefined;

        
      
        
          
  /**
 * A code to define the language used in the text of the note.
 * Only required if the language is different from the resource language.
 */
  language?: CodeableConcept | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify a note entry.
 */
  number?: number | undefined;
  _number?: Element | undefined;

        
      
        
          
  /**
 * The explanation or description associated with the processing.
 */
  text: string;
  _text?: Element | undefined;

        
      
        
          
  /**
 * The business purpose of the note text.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Original request resource reference.
 */
  request?: Reference | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * The provider which is responsible for the claim, predetermination or
 * preauthorization.
 * Typically this field would be 1..1 where this party is responsible for the claim
 * but not necessarily professionally responsible for the provision of the
 * individual products and services listed below.
 */
  requestor?: Reference | undefined;
  _requestor?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A finer grained suite of claim type codes which may convey additional
 * information such as Inpatient vs Outpatient and/or a specialty service.
 * This may contain the local bill type codes, for example the US UB-04 bill type
 * code or the CMS bill type.
 */
  subType?: CodeableConcept | undefined;
  _subType?: Element | undefined;

        
      
        
          
  /**
 * Categorized monetary totals for the adjudication.
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
  total?: Array<BackboneElement> | undefined;
  _total?: Element[] | undefined;

        
      
        
          
  /**
 * Monetary total amount associated with the category.
 */
  amount: Money;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate the information type of this adjudication record. Information
 * types may include: the value submitted, maximum values or percentages allowed or
 * payable under the plan, amounts that the patient is responsible for in aggregate
 * or pertaining to this item, amounts paid by other coverages, and the benefit
 * payable for this item.
 * For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A finer grained suite of claim type codes which may convey additional
 * information such as Inpatient vs Outpatient and/or a specialty service.
 * This may contain the local bill type codes, for example the US UB-04 bill type
 * code or the CMS bill type.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate whether the nature of the request is: to request adjudication
 * of products and services previously rendered; or requesting authorization and
 * adjudication for provision in the future; or requesting the non-binding
 * adjudication of the listed products and services which could be provided in the
 * future.
 */
  use: string;
  _use?: Element | undefined;

        
      
    }

  


  


  
    /**
 * ClinicalImpression
 * 
 * A record of a clinical assessment performed to determine what problem(s) may
 * affect the patient and before planning the treatments or management strategies
 * that are best to manage a patient's condition. Assessments are often 1:1 with a
 * clinical consultation / encounter,  but this varies greatly depending on the
 * clinical workflow. This resource is called "ClinicalImpression" rather than
 * "ClinicalAssessment" to avoid confusion with the recording of assessment tools
 * such as Apgar score.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ClinicalImpression.html}
 */
    export interface ClinicalImpression extends DomainResource {
      
      readonly resourceType: "ClinicalImpression";
      

      
        
          
  /**
 * The clinician performing the assessment.
 */
  assessor?: Reference | undefined;
  _assessor?: Element | undefined;

        
      
        
          
  /**
 * Categorizes the type of clinical assessment performed.
 * This is present as a place-holder only and may be removed based on feedback/work
 * group opinion.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Indicates when the documentation of the assessment was complete.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A summary of the context and/or cause of the assessment - why / where it was
 * performed, and what patient events/status prompted it.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
            
  /**
 * The point in time or period over which the subject was assessed.
 * This SHOULD be accurate to at least the minute, though some assessments only
 * have a known date.
 */
  effectiveDateTime?: string | undefined;
  _effectiveDateTime?: Element | undefined;

          
            
  /**
 * The point in time or period over which the subject was assessed.
 * This SHOULD be accurate to at least the minute, though some assessments only
 * have a known date.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * The Encounter during which this ClinicalImpression was created or to which the
 * creation of this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Specific findings or diagnoses that were considered likely or relevant to
 * ongoing treatment.
 */
  finding?: Array<BackboneElement> | undefined;
  _finding?: Element[] | undefined;

        
      
        
          
  /**
 * Which investigations support finding or diagnosis.
 */
  basis?: string | undefined;
  _basis?: Element | undefined;

        
      
        
          
  /**
 * Specific text or code for finding or diagnosis, which may include ruled-out or
 * resolved conditions.
 */
  itemCodeableConcept?: CodeableConcept | undefined;
  _itemCodeableConcept?: Element | undefined;

        
      
        
          
  /**
 * Specific reference for finding or diagnosis, which may include ruled-out or
 * resolved conditions.
 */
  itemReference?: Reference | undefined;
  _itemReference?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this clinical impression by the performer or
 * other systems which remain constant as the resource is updated and propagates
 * from server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * One or more sets of investigations (signs, symptoms, etc.). The actual grouping
 * of investigations varies greatly depending on the type and context of the
 * assessment. These investigations may include data generated during the
 * assessment process, or data previously generated and recorded that is pertinent
 * to the outcomes.
 */
  investigation?: Array<BackboneElement> | undefined;
  _investigation?: Element[] | undefined;

        
      
        
          
  /**
 * A name/code for the group ("set") of investigations. Typically, this will be
 * something like "signs", "symptoms", "clinical", "diagnostic", but the list is
 * not constrained, and others such groups such as
 * (exposure|family|travel|nutritional) history may be used.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A record of a specific investigation that was undertaken.
 * Most investigations are observations of one kind or another but some other
 * specific types of data collection resources can also be used.
 */
  item?: Array<Reference> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * Commentary about the impression, typically recorded after the impression itself
 * was made, though supplemental notes by the original author could also appear.
 * Don't use this element for content that should more properly appear as one of
 * the specific elements of the impression.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * A reference to the last assessment that was conducted on this patient.
 * Assessments are often/usually ongoing in nature; a care provider (practitioner
 * or team) will make new assessments on an ongoing basis as new data arises or the
 * patient's conditions changes.
 * It is always likely that multiple previous assessments exist for a patient. The
 * point of quoting a previous assessment is that this assessment is relative to it
 * (see resolved).
 */
  previous?: Reference | undefined;
  _previous?: Element | undefined;

        
      
        
          
  /**
 * A list of the relevant problems/conditions for a patient.
 * e.g. The patient is a pregnant, has congestive heart failure, has an
 * ‎Adenocarcinoma, and is allergic to penicillin.
 */
  problem?: Array<Reference> | undefined;
  _problem?: Element[] | undefined;

        
      
        
          
  /**
 * Estimate of likely outcome.
 */
  prognosisCodeableConcept?: Array<CodeableConcept> | undefined;
  _prognosisCodeableConcept?: Element[] | undefined;

        
      
        
          
  /**
 * RiskAssessment expressing likely outcome.
 */
  prognosisReference?: Array<Reference> | undefined;
  _prognosisReference?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to a specific published clinical protocol that was followed during
 * this assessment, and/or that provides evidence in support of the diagnosis.
 */
  protocol?: Array<string> | undefined;
  _protocol?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the workflow status of the assessment.
 * This element is labeled as a modifier because the status contains the code
 * entered-in-error that marks the clinical impression as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the ClinicalImpression.
 * This is generally only used for "exception" statuses such as "not-done",
 * "suspended" or "cancelled".

[distinct reason codes for different statuses can
 * be enforced using invariants if they are universal bindings].
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * The patient or group of individuals assessed as part of this record.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * A text summary of the investigations and the diagnosis.
 */
  summary?: string | undefined;
  _summary?: Element | undefined;

        
      
        
          
  /**
 * Information supporting the clinical impression.
 */
  supportingInfo?: Array<Reference> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
    }

  


  
    /**
 * ClinicalUseDefinition
 * 
 * A single issue - either an indication, contraindication, interaction or an
 * undesirable effect for a medicinal product, medication, device or procedure.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ClinicalUseDefinition.html}
 */
    export interface ClinicalUseDefinition extends DomainResource {
      
      readonly resourceType: "ClinicalUseDefinition";
      

      
        
          
  /**
 * A categorisation of the issue, primarily for dividing warnings into subject
 * heading areas such as "Pregnancy and Lactation", "Overdose", "Effects on Ability
 * to Drive and Use Machines".
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Specifics for when this is a contraindication.
 */
  contraindication?: BackboneElement | undefined;
  _contraindication?: Element | undefined;

        
      
        
          
  /**
 * A comorbidity (concurrent condition) or coinfection.
 */
  comorbidity?: Array<CodeableReference> | undefined;
  _comorbidity?: Element[] | undefined;

        
      
        
          
  /**
 * The status of the disease or symptom for the contraindication, for example
 * "chronic" or "metastatic".
 */
  diseaseStatus?: CodeableReference | undefined;
  _diseaseStatus?: Element | undefined;

        
      
        
          
  /**
 * The situation that is being documented as contraindicating against this item.
 */
  diseaseSymptomProcedure?: CodeableReference | undefined;
  _diseaseSymptomProcedure?: Element | undefined;

        
      
        
          
  /**
 * The indication which this is a contraidication for.
 */
  indication?: Array<Reference> | undefined;
  _indication?: Element[] | undefined;

        
      
        
          
  /**
 * Information about the use of the medicinal product in relation to other
 * therapies described as part of the contraindication.
 */
  otherTherapy?: Array<BackboneElement> | undefined;
  _otherTherapy?: Element[] | undefined;

        
      
        
          
  /**
 * The type of relationship between the medicinal product indication or
 * contraindication and another therapy.
 */
  relationshipType: CodeableConcept;
  _relationshipType?: Element | undefined;

        
      
        
          
  /**
 * Reference to a specific medication (active substance, medicinal product or class
 * of products) as part of an indication or contraindication.
 */
  therapy: CodeableReference;
  _therapy?: Element | undefined;

        
      
        
          
  /**
 * Business identifier for this issue.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Specifics for when this is an indication.
 */
  indication?: BackboneElement | undefined;
  _indication?: Element | undefined;

        
      
        
          
  /**
 * A comorbidity (concurrent condition) or coinfection as part of the indication.
 */
  comorbidity?: Array<CodeableReference> | undefined;
  _comorbidity?: Element[] | undefined;

        
      
        
          
  /**
 * The status of the disease or symptom for the indication, for example "chronic"
 * or "metastatic".
 */
  diseaseStatus?: CodeableReference | undefined;
  _diseaseStatus?: Element | undefined;

        
      
        
          
  /**
 * The situation that is being documented as an indicaton for this item.
 */
  diseaseSymptomProcedure?: CodeableReference | undefined;
  _diseaseSymptomProcedure?: Element | undefined;

        
      
        
          
            
  /**
 * Timing or duration information, that may be associated with use with the
 * indicated condition e.g. Adult patients suffering from myocardial infarction
 * (from a few days until less than 35 days), ischaemic stroke (from 7 days until
 * less than 6 months).
 */
  durationRange?: Range | undefined;
  _durationRange?: Element | undefined;

          
            
  /**
 * Timing or duration information, that may be associated with use with the
 * indicated condition e.g. Adult patients suffering from myocardial infarction
 * (from a few days until less than 35 days), ischaemic stroke (from 7 days until
 * less than 6 months).
 */
  durationString?: string | undefined;
  _durationString?: Element | undefined;

          
        
      
        
          
  /**
 * The intended effect, aim or strategy to be achieved.
 */
  intendedEffect?: CodeableReference | undefined;
  _intendedEffect?: Element | undefined;

        
      
        
          
  /**
 * Information about the use of the medicinal product in relation to other
 * therapies described as part of the indication.
 */
  otherTherapy?: Array<undefined> | undefined;
  _otherTherapy?: Element[] | undefined;

        
      
        
          
  /**
 * An unwanted side effect or negative outcome that may happen if you use the drug
 * (or other subject of this resource) for this indication.
 */
  undesirableEffect?: Array<Reference> | undefined;
  _undesirableEffect?: Element[] | undefined;

        
      
        
          
  /**
 * Specifics for when this is an interaction.
 */
  interaction?: BackboneElement | undefined;
  _interaction?: Element | undefined;

        
      
        
          
  /**
 * The effect of the interaction, for example "reduced gastric absorption of
 * primary medication".
 */
  effect?: CodeableReference | undefined;
  _effect?: Element | undefined;

        
      
        
          
  /**
 * The incidence of the interaction, e.g. theoretical, observed.
 */
  incidence?: CodeableConcept | undefined;
  _incidence?: Element | undefined;

        
      
        
          
  /**
 * The specific medication, food, substance or laboratory test that interacts.
 */
  interactant?: Array<BackboneElement> | undefined;
  _interactant?: Element[] | undefined;

        
      
        
          
            
  /**
 * The specific medication, food or laboratory test that interacts.
 */
  itemReference?: Reference | undefined;
  _itemReference?: Element | undefined;

          
            
  /**
 * The specific medication, food or laboratory test that interacts.
 */
  itemCodeableConcept?: CodeableConcept | undefined;
  _itemCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * Actions for managing the interaction.
 */
  management?: Array<CodeableConcept> | undefined;
  _management?: Element[] | undefined;

        
      
        
          
  /**
 * The type of the interaction e.g. drug-drug interaction, drug-food interaction,
 * drug-lab test interaction.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The population group to which this applies.
 */
  population?: Array<Reference> | undefined;
  _population?: Element[] | undefined;

        
      
        
          
  /**
 * Whether this is a current issue or one that has been retired etc.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The medication or procedure for which this is an indication.
 */
  subject?: Array<Reference> | undefined;
  _subject?: Element[] | undefined;

        
      
        
          
  /**
 * indication | contraindication | interaction | undesirable-effect | warning.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Describe the possible undesirable effects (negative outcomes) from the use of
 * the medicinal product as treatment.
 */
  undesirableEffect?: BackboneElement | undefined;
  _undesirableEffect?: Element | undefined;

        
      
        
          
  /**
 * High level classification of the effect.
 */
  classification?: CodeableConcept | undefined;
  _classification?: Element | undefined;

        
      
        
          
  /**
 * How often the effect is seen.
 */
  frequencyOfOccurrence?: CodeableConcept | undefined;
  _frequencyOfOccurrence?: Element | undefined;

        
      
        
          
  /**
 * The situation in which the undesirable effect may manifest.
 */
  symptomConditionEffect?: CodeableReference | undefined;
  _symptomConditionEffect?: Element | undefined;

        
      
        
          
  /**
 * A critical piece of information about environmental, health or physical risks or
 * hazards that serve as caution to the user. For example 'Do not operate heavy
 * machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel
 * unwell'.
 */
  warning?: BackboneElement | undefined;
  _warning?: Element | undefined;

        
      
        
          
  /**
 * A coded or unformatted textual definition of this warning.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A textual definition of this warning, with formatting.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
    }

  


  


  
    /**
 * CodeableConcept
 * 
 * Base StructureDefinition for CodeableConcept Type: A concept that may be defined
 * by a formal reference to a terminology or ontology or may be provided by text.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CodeableConcept.html}
 */
    export interface CodeableConcept extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A reference to a code defined by a terminology system.
 * Codes may be defined very casually in enumerations, or code lists, up to very
 * formal definitions such as SNOMED CT - see the HL7 v3 Core Principles for more
 * information.  Ordering of codings is undefined and SHALL NOT be used to infer
 * meaning. Generally, at most only one of the coding values will be labeled as
 * UserSelected = true.
 */
  coding?: Array<Coding> | undefined;
  _coding?: Element[] | undefined;

        
      
        
          
  /**
 * A human language representation of the concept as seen/selected/uttered by the
 * user who entered the data and/or which represents the intended meaning of the
 * user.
 * Very often the text is the same as a displayName of one of the codings.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
    }

  


  
    /**
 * CodeableReference
 * 
 * Base StructureDefinition for CodeableReference Type: A reference to a resource
 * (by instance), or instead, a reference to a concept defined in a terminology or
 * ontology (by class).
 * 
 * @see {@link http://hl7.org/fhir/R4B/CodeableReference.html}
 */
    export interface CodeableReference extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A reference to a concept - e.g. the information is identified by its general
 * class to the degree of precision found in the terminology.
 */
  concept?: CodeableConcept | undefined;
  _concept?: Element | undefined;

        
      
        
          
  /**
 * A reference to a resource the provides exact details about the information being
 * referenced.
 */
  reference?: Reference | undefined;
  _reference?: Element | undefined;

        
      
    }

  


  


  
    /**
 * CodeSystem
 * 
 * The CodeSystem resource is used to declare the existence of and describe a code
 * system or code system supplement and its key properties, and optionally define a
 * part or all of its content.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CodeSystem.html}
 */
    export interface CodeSystem extends DomainResource {
      
      readonly resourceType: "CodeSystem";
      

      
        
          
  /**
 * If code comparison is case sensitive when codes within this system are compared
 * to each other.
 * If this value is missing, then it is not specified whether a code system is case
 * sensitive or not. When the rule is not known, Postel's law should be followed:
 * produce codes with the correct case, and accept codes in any case. This element
 * is primarily provided to support validation software.
 */
  caseSensitive?: boolean | undefined;
  _caseSensitive?: Element | undefined;

        
      
        
          
  /**
 * The code system defines a compositional (post-coordination) grammar.
 * Note that the code system resource does not define what the compositional
 * grammar is, only whether or not there is one.
 */
  compositional?: boolean | undefined;
  _compositional?: Element | undefined;

        
      
        
          
  /**
 * Concepts that are in the code system. The concept definitions are inherently
 * hierarchical, but the definitions must be consulted to determine what the
 * meanings of the hierarchical relationships are.
 * If this is empty, it means that the code system resource does not represent the
 * content of the code system.
 */
  concept?: Array<BackboneElement> | undefined;
  _concept?: Element[] | undefined;

        
      
        
          
  /**
 * A code - a text symbol - that uniquely identifies the concept within the code
 * system.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Defines children of a concept to produce a hierarchy of concepts. The nature of
 * the relationships is variable (is-a/contains/categorizes) - see
 * hierarchyMeaning.
 */
  concept?: Array<undefined> | undefined;
  _concept?: Element[] | undefined;

        
      
        
          
  /**
 * The formal definition of the concept. The code system resource does not make
 * formal definitions required, because of the prevalence of legacy systems.
 * However, they are highly recommended, as without them there is no formal meaning
 * associated with the concept.
 */
  definition?: string | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * Additional representations for the concept - other languages, aliases,
 * specialized purposes, used for particular purposes, etc.
 * Concepts have both a ```display``` and an array of ```designation```. The
 * display is equivalent to a special designation with an implied
 * ```designation.use``` of "primary code" and a language equal to the [Resource
 * Language](resource.html#language).
 */
  designation?: Array<BackboneElement> | undefined;
  _designation?: Element[] | undefined;

        
      
        
          
  /**
 * The language this designation is defined for.
 * In the absence of a language, the resource language applies.
 */
  language?: string | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * A code that details how this designation would be used.
 * If no use is provided, the designation can be assumed to be suitable for general
 * display to a human user.
 */
  use?: Coding | undefined;
  _use?: Element | undefined;

        
      
        
          
  /**
 * The text value for this designation.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * A human readable string that is the recommended default way to present this
 * concept to a user.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * A property value for this concept.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * A code that is a reference to CodeSystem.property.code.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
            
  /**
 * The value of this property.
 */
  valueCode?: string | undefined;
  _valueCode?: Element | undefined;

          
            
  /**
 * The value of this property.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * The value of this property.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The value of this property.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The value of this property.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The value of this property.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The value of this property.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The extent of the content of the code system (the concepts and codes it defines)
 * are represented in this resource instance.
 */
  content: string;
  _content?: Element | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the code system and/or its contents. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * code system.
 * ... Sometimes, the copyright differs between the code system and the codes that
 * are included. The copyright statement should clearly differentiate between these
 * when required.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The total number of concepts defined by the code system. Where the code system
 * has a compositional grammar, the basis of this count is defined by the system
 * steward.
 * The count of concepts defined in this resource cannot be more than this value
 * but may be less for several reasons - see the content element.
 */
  count?: unsignedInt | undefined;
  _count?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the code system was published. The date
 * must change when the business version changes and it must change if the status
 * code changes. In addition, it should change when the substantive content of the
 * code system changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the code system. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the code system from a consumer's
 * perspective.
 * This description can be used to capture details such as why the code system was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the code system as conveyed in the 'text' field of the resource itself. This
 * item SHOULD be populated unless the information is available from context (e.g.
 * the language of the code system is presumed to be the predominant language in
 * the place the code system was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this code system is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of code systems that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A filter that can be used in a value set compose statement when selecting
 * concepts using a filter.
 * Note that filters defined in code systems usually require custom code on the
 * part of any terminology engine that will make them available for use in value
 * set filters. For this reason, they are generally only seen in high value
 * published terminologies.
 */
  filter?: Array<BackboneElement> | undefined;
  _filter?: Element[] | undefined;

        
      
        
          
  /**
 * The code that identifies this filter when it is used as a filter in
 * [ValueSet](valueset.html#).compose.include.filter.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A description of how or why the filter is used.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A list of operators that can be used with the filter.
 */
  operator: Array<string>;
  _operator?: Element[] | undefined;

        
      
        
          
  /**
 * A description of what the value for the filter should be.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The meaning of the hierarchy of concepts as represented in this resource.
 * Note that other representations might have a different hierarchy or none at all,
 * and represent the information using properties.
 */
  hierarchyMeaning?: string | undefined;
  _hierarchyMeaning?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this code system when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this code system outside of FHIR,
 * where it is not possible to use the logical URI.  Note that HL7 defines at least
 * three identifiers for many of its code systems - the FHIR canonical URL, the OID
 * and the V2 Table 0396 mnemonic code.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the code system is intended to be used.
 * It may be possible for the code system to be used in jurisdictions other than
 * those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the code system. This name should be usable
 * as an identifier for the module by machine processing applications such as code
 * generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A property defines an additional slot through which additional information can
 * be provided about a concept.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * A code that is used to identify the property. The code is used internally (in
 * CodeSystem.concept.property.code) and also externally, such as in property
 * filters.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A description of the property- why it is defined, and how its value might be
 * used.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The type of the property value. Properties of type "code" contain a code defined
 * by the code system (e.g. a reference to another defined concept).
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Reference to the formal meaning of the property. One possible source of meaning
 * is the [Concept Properties](codesystem-concept-properties.html) code system.
 */
  uri?: string | undefined;
  _uri?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the code system.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the code system is the organization or individual primarily responsible for the
 * maintenance and upkeep of the code system. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * code system. This item SHOULD be populated unless the information is available
 * from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this code system is needed and why it has been designed as it
 * has.
 * This element does not describe the usage of the code system. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this code system.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The date (and optionally time) when the code system resource was created or
 * revised.
 * Allows filtering of code systems that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The canonical URL of the code system that this code system supplement is adding
 * designations and properties to.
 * The most common use of a code system supplement is to add additional language
 * support.
 */
  supplements?: string | undefined;
  _supplements?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the code system.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this code system when it is referenced
 * in a specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this code system is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the code system is stored on different servers. This is used in
 * [Coding](datatypes.html#Coding).system.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate code system
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * Canonical reference to the value set that contains the entire code system.
 * The definition of the value set SHALL include all codes from this code system
 * and only codes from this code system, and it SHALL be immutable.
 */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the code system when it
 * is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the code system author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence. This is used in
 * [Coding](datatypes.html#Coding).version.
 * There may be different code system instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the code system with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * This flag is used to signify that the code system does not commit to concept
 * permanence across versions. If true, a version must be specified when
 * referencing this code system.
 * Best practice is that code systems do not redefine concepts, or that if concepts
 * are redefined, a new code system definition is created. But this is not always
 * possible, so some code systems may be defined as 'versionNeeded'.

Most code
 * systems occasionally refine the displays defined for concepts between versions.
 * Contexts in which the concept display values are validated may require that the
 * version be specified for some code systems irrespective of the value of this
 * property.
 */
  versionNeeded?: boolean | undefined;
  _versionNeeded?: Element | undefined;

        
      
    }

  


  
    /**
 * Coding
 * 
 * Base StructureDefinition for Coding Type: A reference to a code defined by a
 * terminology system.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Coding.html}
 */
    export interface Coding extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A symbol in syntax defined by the system. The symbol may be a predefined code or
 * an expression in a syntax defined by the coding system (e.g. post-coordination).
 */
  code?: string | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A representation of the meaning of the code in the system, following the rules
 * of the system.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * The identification of the code system that defines the meaning of the symbol in
 * the code.
 * The URI may be an OID (urn:oid:...) or a UUID (urn:uuid:...).  OIDs and UUIDs
 * SHALL be references to the HL7 OID registry. Otherwise, the URI should come from
 * HL7's list of FHIR defined special URIs or it should reference to some
 * definition that establishes the system clearly and unambiguously.
 */
  system?: string | undefined;
  _system?: Element | undefined;

        
      
        
          
  /**
 * Indicates that this coding was chosen by a user directly - e.g. off a pick list
 * of available items (codes or displays).
 * Amongst a set of alternatives, a directly chosen code is the most appropriate
 * starting point for new translations. There is some ambiguity about what exactly
 * 'directly chosen' implies, and trading partner agreement may be needed to
 * clarify the use of this element and its consequences more completely.
 */
  userSelected?: boolean | undefined;
  _userSelected?: Element | undefined;

        
      
        
          
  /**
 * The version of the code system which was used when choosing this code. Note that
 * a well-maintained code system does not need the version reported, because the
 * meaning of codes is consistent across versions. However this cannot consistently
 * be assured, and when the meaning is not guaranteed to be consistent, the version
 * SHOULD be exchanged.
 * Where the terminology does not clearly define what string should be used to
 * identify code system versions, the recommendation is to use the date (expressed
 * in FHIR date format) on which that version was officially published as the
 * version date.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Communication
 * 
 * An occurrence of information being transmitted; e.g. an alert that was sent to a
 * responsible provider, a public health agency that was notified about a
 * reportable condition.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Communication.html}
 */
    export interface Communication extends DomainResource {
      
      readonly resourceType: "Communication";
      

      
        
          
  /**
 * Other resources that pertain to this communication and to which this
 * communication should be associated.
 * Don't use Communication.about element when a more specific element exists, such
 * as basedOn or reasonReference.
 */
  about?: Array<Reference> | undefined;
  _about?: Element[] | undefined;

        
      
        
          
  /**
 * An order, proposal or plan fulfilled in whole or in part by this Communication.
 * This must point to some sort of a 'Request' resource, such as CarePlan,
 * CommunicationRequest, ServiceRequest, MedicationRequest, etc.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * The type of message conveyed such as alert, notification, reminder, instruction,
 * etc.
 * There may be multiple axes of categorization and one communication may serve
 * multiple purposes.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The Encounter during which this Communication was created or to which the
 * creation of this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this communication by the performer or other
 * systems which remain constant as the resource is updated and propagates from
 * server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Prior communication that this communication is in response to.
 */
  inResponseTo?: Array<Reference> | undefined;
  _inResponseTo?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this Communication.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this Communication.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * A channel that was used for this communication (e.g. email, fax).
 */
  medium?: Array<CodeableConcept> | undefined;
  _medium?: Element[] | undefined;

        
      
        
          
  /**
 * Additional notes or commentary about the communication by the sender, receiver
 * or other interested parties.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Part of this action.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Text, attachment(s), or resource(s) that was communicated to the recipient.
 */
  payload?: Array<BackboneElement> | undefined;
  _payload?: Element[] | undefined;

        
      
        
          
            
  /**
 * A communicated content (or for multi-part communications, one portion of the
 * communication).
 */
  contentString?: string | undefined;
  _contentString?: Element | undefined;

          
            
  /**
 * A communicated content (or for multi-part communications, one portion of the
 * communication).
 */
  contentAttachment?: Attachment | undefined;
  _contentAttachment?: Element | undefined;

          
            
  /**
 * A communicated content (or for multi-part communications, one portion of the
 * communication).
 */
  contentReference?: Reference | undefined;
  _contentReference?: Element | undefined;

          
        
      
        
          
  /**
 * Characterizes how quickly the planned or in progress communication must be
 * addressed. Includes concepts such as stat, urgent, routine.
 * Used to prioritize workflow (such as which communication to read first) when the
 * communication is planned or in progress.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * The reason or justification for the communication.
 * Textual reasons can be captured using reasonCode.text.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies this communication.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The time when this communication arrived at the destination.
 */
  received?: string | undefined;
  _received?: Element | undefined;

        
      
        
          
  /**
 * The entity (e.g. person, organization, clinical information system, care team or
 * device) which was the target of the communication. If receipts need to be
 * tracked by an individual, a separate resource instance will need to be created
 * for each recipient.  Multiple recipient communications are intended where either
 * receipts are not tracked (e.g. a mass mail-out) or a receipt is captured in
 * aggregate (all emails confirmed received by a particular time).
 */
  recipient?: Array<Reference> | undefined;
  _recipient?: Element[] | undefined;

        
      
        
          
  /**
 * The entity (e.g. person, organization, clinical information system, or device)
 * which was the source of the communication.
 */
  sender?: Reference | undefined;
  _sender?: Element | undefined;

        
      
        
          
  /**
 * The time when this communication was sent.
 */
  sent?: string | undefined;
  _sent?: Element | undefined;

        
      
        
          
  /**
 * The status of the transmission.
 * This element is labeled as a modifier because the status contains the codes
 * aborted and entered-in-error that mark the communication as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the Communication.
 * This is generally only used for "exception" statuses such as "not-done",
 * "suspended" or "aborted". The reason for performing the event at all is captured
 * in reasonCode, not here.
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * The patient or group that was the focus of this communication.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Description of the purpose/content, similar to a subject line in an email.
 * Communication.topic.text can be used without any codings.
 */
  topic?: CodeableConcept | undefined;
  _topic?: Element | undefined;

        
      
    }

  


  
    /**
 * CommunicationRequest
 * 
 * A request to convey information; e.g. the CDS system proposes that an alert be
 * sent to a responsible provider, the CDS system proposes that the public health
 * agency be notified about a reportable condition.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CommunicationRequest.html}
 */
    export interface CommunicationRequest extends DomainResource {
      
      readonly resourceType: "CommunicationRequest";
      

      
        
          
  /**
 * Other resources that pertain to this communication request and to which this
 * communication request should be associated.
 * Don't use CommunicationRequest.about element when a more specific element
 * exists, such as basedOn, reasonReference, or replaces.
 */
  about?: Array<Reference> | undefined;
  _about?: Element[] | undefined;

        
      
        
          
  /**
 * For draft requests, indicates the date of initial creation.  For requests with
 * other statuses, indicates the date of activation.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * A plan or proposal that is fulfilled in whole or in part by this request.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * The type of message to be sent such as alert, notification, reminder,
 * instruction, etc.
 * There may be multiple axes of categorization and one communication request may
 * serve multiple purposes.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * If true indicates that the CommunicationRequest is asking for the specified
 * action to *not* occur.
 * The attributes provided with the request qualify what is not to be done.
 */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;

        
      
        
          
  /**
 * The Encounter during which this CommunicationRequest was created or to which the
 * creation of this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * A shared identifier common to all requests that were authorized more or less
 * simultaneously by a single author, representing the identifier of the
 * requisition, prescription or similar form.
 * Requests are linked either by a "basedOn" relationship (i.e. one request is
 * fulfilling another) or by having a common requisition.  Requests that are part
 * of the same requisition are generally treated independently from the perspective
 * of changing their state or maintaining them after initial creation.
 */
  groupIdentifier?: Identifier | undefined;
  _groupIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this communication request by the performer or
 * other systems which remain constant as the resource is updated and propagates
 * from server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A channel that was used for this communication (e.g. email, fax).
 */
  medium?: Array<CodeableConcept> | undefined;
  _medium?: Element[] | undefined;

        
      
        
          
  /**
 * Comments made about the request by the requester, sender, recipient, subject or
 * other participants.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * The time when this communication is to occur.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * The time when this communication is to occur.
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Text, attachment(s), or resource(s) to be communicated to the recipient.
 */
  payload?: Array<BackboneElement> | undefined;
  _payload?: Element[] | undefined;

        
      
        
          
            
  /**
 * The communicated content (or for multi-part communications, one portion of the
 * communication).
 */
  contentString?: string | undefined;
  _contentString?: Element | undefined;

          
            
  /**
 * The communicated content (or for multi-part communications, one portion of the
 * communication).
 */
  contentAttachment?: Attachment | undefined;
  _contentAttachment?: Element | undefined;

          
            
  /**
 * The communicated content (or for multi-part communications, one portion of the
 * communication).
 */
  contentReference?: Reference | undefined;
  _contentReference?: Element | undefined;

          
        
      
        
          
  /**
 * Characterizes how quickly the proposed act must be initiated. Includes concepts
 * such as stat, urgent, routine.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * Describes why the request is being made in coded or textual form.
 * Textual reasons can be captured using reasonCode.text.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies this request.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The entity (e.g. person, organization, clinical information system, device,
 * group, or care team) which is the intended target of the communication.
 */
  recipient?: Array<Reference> | undefined;
  _recipient?: Element[] | undefined;

        
      
        
          
  /**
 * Completed or terminated request(s) whose function is taken by this new request.
 * The replacement could be because the initial request was immediately rejected
 * (due to an issue) or because the previous request was completed, but the need
 * for the action described by the request remains ongoing.
 */
  replaces?: Array<Reference> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
  /**
 * The device, individual, or organization who initiated the request and has
 * responsibility for its activation.
 */
  requester?: Reference | undefined;
  _requester?: Element | undefined;

        
      
        
          
  /**
 * The entity (e.g. person, organization, clinical information system, or device)
 * which is to be the source of the communication.
 */
  sender?: Reference | undefined;
  _sender?: Element | undefined;

        
      
        
          
  /**
 * The status of the proposal or order.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the CommunicationRequest.
 * This is generally only used for "exception" statuses such as "suspended" or
 * "cancelled".  The reason why the CommunicationRequest was created at all is
 * captured in reasonCode, not here.  [distinct reason codes for different statuses
 * can be enforced using invariants if they are universal bindings].
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * The patient or group that is the focus of this communication request.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
    }

  


  
    /**
 * CompartmentDefinition
 * 
 * A compartment definition that defines how resources are accessed on a server.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CompartmentDefinition.html}
 */
    export interface CompartmentDefinition extends DomainResource {
      
      readonly resourceType: "CompartmentDefinition";
      

      
        
          
  /**
 * Which compartment this definition describes.
 * Only the specification can define the compartments that can exist. Servers can
 * choose to support them.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the compartment definition was published.
 * The date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the compartment definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the compartment definition.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the compartment definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the compartment
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the compartment definition as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the compartment definition is
 * presumed to be the predominant language in the place the compartment definition
 * was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this compartment definition is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of compartment definitions that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the compartment definition. This name should
 * be usable as an identifier for the module by machine processing applications
 * such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.This is
 * often the same as the code for the parameter, but does not need to be.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the compartment
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the compartment definition is the organization or individual primarily
 * responsible for the maintenance and upkeep of the compartment definition. This
 * is not necessarily the same individual or organization that developed and
 * initially authored the content. The publisher is the primary point of contact
 * for questions or issues with the compartment definition. This item SHOULD be
 * populated unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this compartment definition is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the compartment definition. Instead,
 * it provides traceability of ''why'' the resource is either needed or ''why'' it
 * is defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this compartment definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Information about how a resource is related to the compartment.
 */
  resource?: Array<BackboneElement> | undefined;
  _resource?: Element[] | undefined;

        
      
        
          
  /**
 * The name of a resource supported by the server.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Additional documentation about the resource and compartment.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * The name of a search parameter that represents the link to the compartment. More
 * than one may be listed because a resource may be linked to a compartment in more
 * than one way,.
 * If no search parameters are listed, then the resource is not linked to the
 * compartment.
 */
  param?: Array<string> | undefined;
  _param?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the search syntax is supported,.
 * Servers may define and use compartments to manage logical access without
 * implementing the compartment related syntax.
 */
  search: boolean;
  _search?: Element | undefined;

        
      
        
          
  /**
 * The status of this compartment definition. Enables tracking the life-cycle of
 * the content.
 * Allows filtering of compartment definitions that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this compartment definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this compartment
 * definition is (or will be) published. This URL can be the target of a canonical
 * reference. It SHALL remain the same when the compartment definition is stored on
 * different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate compartment
 * definition instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the compartment
 * definition when it is referenced in a specification, model, design or instance.
 * This is an arbitrary value managed by the compartment definition author and is
 * not expected to be globally unique. For example, it might be a timestamp (e.g.
 * yyyymmdd) if a managed version is not available. There is also no expectation
 * that versions can be placed in a lexicographical sequence.
 * There may be different compartment definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the
 * compartment definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Composition
 * 
 * A set of healthcare-related information that is assembled together into a single
 * logical package that provides a single coherent statement of meaning,
 * establishes its own context and that has clinical attestation with regard to who
 * is making the statement. A Composition defines the structure and narrative
 * content necessary for a document. However, a Composition alone does not
 * constitute a document. Rather, the Composition must be the first entry in a
 * Bundle where Bundle.type=document, and any other resources referenced from
 * Composition must be included as subsequent entries in the Bundle (for example
 * Patient, Practitioner, Encounter, etc.).
 * 
 * @see {@link http://hl7.org/fhir/R4B/Composition.html}
 */
    export interface Composition extends DomainResource {
      
      readonly resourceType: "Composition";
      

      
        
          
  /**
 * A participant who has attested to the accuracy of the composition/document.
 * Only list each attester once.
 */
  attester?: Array<BackboneElement> | undefined;
  _attester?: Element[] | undefined;

        
      
        
          
  /**
 * The type of attestation the authenticator offers.
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * Who attested the composition in the specified way.
 */
  party?: Reference | undefined;
  _party?: Element | undefined;

        
      
        
          
  /**
 * When the composition was attested by the party.
 */
  time?: string | undefined;
  _time?: Element | undefined;

        
      
        
          
  /**
 * Identifies who is responsible for the information in the composition, not
 * necessarily who typed it in.
 */
  author: Array<Reference>;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * A categorization for the type of the composition - helps for indexing and
 * searching. This may be implied by or derived from the code specified in the
 * Composition Type.
 * This is a metadata field from
 * [XDS/MHD](http://wiki.ihe.net/index.php?title=Mobile_access_to_Health_Documents_
 * (MHD)).
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The code specifying the level of confidentiality of the Composition.
 * The exact use of this element, and enforcement and issues related to highly
 * sensitive documents are out of scope for the base specification, and delegated
 * to implementation profiles (see security section).  This element is labeled as a
 * modifier because highly confidential documents must not be treated as if they
 * are not.
 */
  confidentiality?: string | undefined;
  _confidentiality?: Element | undefined;

        
      
        
          
  /**
 * Identifies the organization or group who is responsible for ongoing maintenance
 * of and access to the composition/document information.
 * This is useful when documents are derived from a composition - provides guidance
 * for how to get the latest version of the document. This is optional because this
 * is sometimes not known by the authoring system, and can be inferred by context.
 * However, it is important that this information be known when working with a
 * derived document, so providing a custodian is encouraged.
 */
  custodian?: Reference | undefined;
  _custodian?: Element | undefined;

        
      
        
          
  /**
 * The composition editing time, when the composition was last logically changed by
 * the author.
 * The Last Modified Date on the composition may be after the date of the document
 * was attested without being changed.
 */
  date: string;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Describes the clinical encounter or type of care this documentation is
 * associated with.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * The clinical service, such as a colonoscopy or an appendectomy, being
 * documented.
 * The event needs to be consistent with the type element, though can provide
 * further information if desired.
 */
  event?: Array<BackboneElement> | undefined;
  _event?: Element[] | undefined;

        
      
        
          
  /**
 * This list of codes represents the main clinical acts, such as a colonoscopy or
 * an appendectomy, being documented. In some cases, the event is inherent in the
 * typeCode, such as a "History and Physical Report" in which the procedure being
 * documented is necessarily a "History and Physical" act.
 * An event can further specialize the act inherent in the typeCode, such as where
 * it is simply "Procedure Report" and the procedure was a "colonoscopy". If one or
 * more eventCodes are included, they SHALL NOT conflict with the values inherent
 * in the classCode, practiceSettingCode or typeCode, as such a conflict would
 * create an ambiguous situation. This short list of codes is provided to be used
 * as key words for certain types of queries.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * The description and/or reference of the event(s) being documented. For example,
 * this could be used to document such a colonoscopy or an appendectomy.
 */
  detail?: Array<Reference> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * The period of time covered by the documentation. There is no assertion that the
 * documentation is a complete representation for this period, only that it
 * documents events during this time.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * A version-independent identifier for the Composition. This identifier stays
 * constant as the composition is changed over time.
 * Similar to ClinicalDocument/setId in CDA. See discussion in resource definition
 * for how these relate.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * Relationships that this composition has with other compositions or documents
 * that already exist.
 * A document is a version specific composition.
 */
  relatesTo?: Array<BackboneElement> | undefined;
  _relatesTo?: Element[] | undefined;

        
      
        
          
  /**
 * The type of relationship that this composition has with anther composition or
 * document.
 * If this document appends another document, then the document cannot be fully
 * understood without also accessing the referenced document.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
            
  /**
 * The target composition/document of this relationship.
 */
  targetIdentifier?: Identifier | undefined;
  _targetIdentifier?: Element | undefined;

          
            
  /**
 * The target composition/document of this relationship.
 */
  targetReference?: Reference | undefined;
  _targetReference?: Element | undefined;

          
        
      
        
          
  /**
 * The root of the sections that make up the composition.
 */
  section?: Array<BackboneElement> | undefined;
  _section?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies who is responsible for the information in this section, not
 * necessarily who typed it in.
 */
  author?: Array<Reference> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * A code identifying the kind of content contained within the section. This must
 * be consistent with the section title.
 * The code identifies the section for an automated processor of the document. This
 * is particularly relevant when using profiles to control the structure of the
 * document.   

If the section has content (instead of sub-sections), the
 * section.code does not change the meaning or interpretation of the resource that
 * is the content of the section in the comments for the section.code.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * If the section is empty, why the list is empty. An empty section typically has
 * some text explaining the empty reason.
 * The various reasons for an empty section make a significant interpretation to
 * its interpretation. Note that this code is for use when the entire section
 * content has been suppressed, and not for when individual items are omitted -
 * implementers may consider using a text note or a flag on an entry in these
 * cases.
 */
  emptyReason?: CodeableConcept | undefined;
  _emptyReason?: Element | undefined;

        
      
        
          
  /**
 * A reference to the actual resource from which the narrative in the section is
 * derived.
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
  entry?: Array<Reference> | undefined;
  _entry?: Element[] | undefined;

        
      
        
          
  /**
 * The actual focus of the section when it is not the subject of the composition,
 * but instead represents something or someone associated with the subject such as
 * (for a patient subject) a spouse, parent, fetus, or donor. If not focus is
 * specified, the focus is assumed to be focus of the parent section, or, for a
 * section in the Composition itself, the subject of the composition. Sections with
 * a focus SHALL only include resources where the logical subject (patient,
 * subject, focus, etc.) matches the section focus, or the resources have no
 * logical subject (few resources).
 * Typically, sections in a doument are about the subject of the document, whether
 * that is a  patient, or group of patients, location, or device, or whatever. For
 * some kind of documents, some sections actually contain data about related
 * entities. Typical examples are  a section in a newborn discharge summary
 * concerning the mother, or family history documents, with a section about each
 * family member, though there are many other examples.
 */
  focus?: Reference | undefined;
  _focus?: Element | undefined;

        
      
        
          
  /**
 * How the entry list was prepared - whether it is a working list that is suitable
 * for being maintained on an ongoing basis, or if it represents a snapshot of a
 * list of items from another source, or whether it is a prepared list where items
 * may be marked as added, modified or deleted.
 * This element is labeled as a modifier because a change list must not be
 * misunderstood as a complete list.
 */
  mode?: string | undefined;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * Specifies the order applied to the items in the section entries.
 * Applications SHOULD render ordered lists in the order provided, but MAY allow
 * users to re-order based on their own preferences as well. If there is no order
 * specified, the order is unknown, though there may still be some order.
 */
  orderedBy?: CodeableConcept | undefined;
  _orderedBy?: Element | undefined;

        
      
        
          
  /**
 * A nested sub-section within this section.
 * Nested sections are primarily used to help human readers navigate to particular
 * portions of the document.
 */
  section?: Array<undefined> | undefined;
  _section?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable narrative that contains the attested content of the section,
 * used to represent the content of the resource to a human. The narrative need not
 * encode all the structured data, but is required to contain sufficient detail to
 * make it "clinically safe" for a human to just read the narrative.
 * Document profiles may define what content should be represented in the narrative
 * to ensure clinical safety.
 */
  text?: Narrative | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * The label for this particular section.  This will be part of the rendered
 * content for the document, and is often used to build a table of contents.
 * The title identifies the section for a human reader. The title must be
 * consistent with the narrative of the resource that is the target of the
 * section.content reference. Generally, sections SHOULD have titles, but in some
 * documents, it is unnecessary or inappropriate. Typically, this is where a
 * section has subsections that have their own adequately distinguishing title,  or
 * documents that only have a single section. Most Implementation Guides will make
 * section title to be a required element.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * The workflow/clinical status of this composition. The status is a marker for the
 * clinical standing of the document.
 * If a composition is marked as withdrawn, the compositions/documents in the
 * series, or data from the composition or document series, should never be
 * displayed to a user without being clearly marked as untrustworthy. The flag
 * "entered-in-error" is why this element is labeled as a modifier of other
 * elements.   

Some reporting work flows require that the original narrative of a
 * final document never be altered; instead, only new narrative can be added. The
 * composition resource has no explicit status for explicitly noting whether this
 * business rule is in effect. This would be handled by an extension if required.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Who or what the composition is about. The composition can be about a person,
 * (patient or healthcare practitioner), a device (e.g. a machine) or even a group
 * of subjects (such as a document about a herd of livestock, or a set of patients
 * that share a common exposure).
 * For clinical documents, this is usually the patient.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Official human-readable label for the composition.
 * For many compositions, the title is the same as the text or a display name of
 * Composition.type (e.g. a "consultation" or "progress note"). Note that CDA does
 * not make title mandatory, but there are no known cases where it is useful for
 * title to be omitted, so it is mandatory here. Feedback on this requirement is
 * welcome during the trial use period.
 */
  title: string;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Specifies the particular kind of composition (e.g. History and Physical,
 * Discharge Summary, Progress Note). This usually equates to the purpose of making
 * the composition.
 * For Composition type, LOINC is ubiquitous and strongly endorsed by HL7. Most
 * implementation guides will require a specific LOINC code, or use LOINC as an
 * extensible binding.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * ConceptMap
 * 
 * A statement of relationships from one set of concepts to one or more other
 * concepts - either concepts in code systems, or data element/data element
 * concepts, or classes in class models.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ConceptMap.html}
 */
    export interface ConceptMap extends DomainResource {
      
      readonly resourceType: "ConceptMap";
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the concept map and/or its contents. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * concept map.
 * Frequently the copyright differs between the concept map and codes that are
 * included. The copyright statement should clearly differentiate between these
 * when required.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the concept map was published. The date
 * must change when the business version changes and it must change if the status
 * code changes. In addition, it should change when the substantive content of the
 * concept map changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the concept map. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the concept map from a consumer's
 * perspective.
 * The description is not intended to describe the semantics of the concept map.
 * The description should capture its intended use, which is needed for ensuring
 * integrity for its use in models across future changes.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this concept map is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of concept maps that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A group of mappings that all have the same source and target system.
 */
  group?: Array<BackboneElement> | undefined;
  _group?: Element[] | undefined;

        
      
        
          
  /**
 * Mappings for an individual concept in the source to one or more concepts in the
 * target.
 * Generally, the ideal is that there would only be one mapping for each concept in
 * the source value set, but a given concept may be mapped multiple times with
 * different comments or dependencies.
 */
  element: Array<BackboneElement>;
  _element?: Element[] | undefined;

        
      
        
          
  /**
 * Identity (code or path) or the element/item being mapped.
 */
  code?: string | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The display for the code. The display is only provided to help editors when
 * editing the concept map.
 * The display is ignored when processing the map.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * A concept from the target value set that this concept maps to.
 * Ideally there would only be one map, with equal or equivalent mapping. But
 * multiple maps are allowed for several narrower options, or to assert that other
 * concepts are unmatched.
 */
  target?: Array<BackboneElement> | undefined;
  _target?: Element[] | undefined;

        
      
        
          
  /**
 * Identity (code or path) or the element/item that the map refers to.
 */
  code?: string | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A description of status/issues in mapping that conveys additional information
 * not represented in  the structured data.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * A set of additional dependencies for this mapping to hold. This mapping is only
 * applicable if the specified element can be resolved, and it has the specified
 * value.
 */
  dependsOn?: Array<BackboneElement> | undefined;
  _dependsOn?: Element[] | undefined;

        
      
        
          
  /**
 * The display for the code. The display is only provided to help editors when
 * editing the concept map.
 * The display is ignored when processing the map.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * A reference to an element that holds a coded value that corresponds to a code
 * system property. The idea is that the information model carries an element
 * somewhere that is labeled to correspond with a code system property.
 */
  property: string;
  _property?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that identifies the code system of the dependency code (if the
 * source/dependency is a value set that crosses code systems).
 */
  system?: string | undefined;
  _system?: Element | undefined;

        
      
        
          
  /**
 * Identity (code or path) or the element/item/ValueSet/text that the map depends
 * on / refers to.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The display for the code. The display is only provided to help editors when
 * editing the concept map.
 * The display is ignored when processing the map.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * The equivalence between the source and target concepts (counting for the
 * dependencies and products). The equivalence is read from target to source (e.g.
 * the target is 'wider' than the source).
 * This element is labeled as a modifier because it may indicate that a target does
 * not apply.
 */
  equivalence: string;
  _equivalence?: Element | undefined;

        
      
        
          
  /**
 * A set of additional outcomes from this mapping to other elements. To properly
 * execute this mapping, the specified element must be mapped to some data element
 * or source that is in context. The mapping may still be useful without a place
 * for the additional data elements, but the equivalence cannot be relied on.
 */
  product?: Array<undefined> | undefined;
  _product?: Element[] | undefined;

        
      
        
          
  /**
 * An absolute URI that identifies the source system where the concepts to be
 * mapped are defined.
 * This is not needed if the source value set is specified and it contains concepts
 * from only a single system.
 */
  source?: string | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * The specific version of the code system, as determined by the code system
 * authority.
 * The specification of a particular code system version may be required for code
 * systems which lack concept permanence.
 */
  sourceVersion?: string | undefined;
  _sourceVersion?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that identifies the target system that the concepts will be
 * mapped to.
 * This is not needed if the target value set is specified and it contains concepts
 * from only a single system. The group target may also be omitted if all of the
 * target element equivalence values are 'unmatched'.
 */
  target?: string | undefined;
  _target?: Element | undefined;

        
      
        
          
  /**
 * The specific version of the code system, as determined by the code system
 * authority.
 * The specification of a particular code system version may be required for code
 * systems which lack concept permanence.
 */
  targetVersion?: string | undefined;
  _targetVersion?: Element | undefined;

        
      
        
          
  /**
 * What to do when there is no mapping for the source concept. "Unmapped" does not
 * include codes that are unmatched, and the unmapped element is ignored in a code
 * is specified to have equivalence = unmatched.
 * This only applies if the source code has a system value that matches the system
 * defined for the group.
 */
  unmapped?: BackboneElement | undefined;
  _unmapped?: Element | undefined;

        
      
        
          
  /**
 * The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped
 * to a single fixed code.
 */
  code?: string | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The display for the code. The display is only provided to help editors when
 * editing the concept map.
 * The display is ignored when processing the map.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * Defines which action to take if there is no match for the source concept in the
 * target system designated for the group. One of 3 actions are possible: use the
 * unmapped code (this is useful when doing a mapping between versions, and only a
 * few codes have changed), use a fixed code (a default code), or alternatively, a
 * reference to a different concept map can be provided (by canonical URL).
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * The canonical reference to an additional ConceptMap resource instance to use for
 * mapping if this ConceptMap resource contains no matching mapping for the source
 * concept.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this concept map when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this concept map outside of FHIR,
 * where it is not possible to use the logical URI.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the concept map is intended to be used.
 * It may be possible for the concept map to be used in jurisdictions other than
 * those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the concept map. This name should be usable
 * as an identifier for the module by machine processing applications such as code
 * generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the concept map.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the concept map is the organization or individual primarily responsible for the
 * maintenance and upkeep of the concept map. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * concept map. This item SHOULD be populated unless the information is available
 * from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this concept map is needed and why it has been designed as it
 * has.
 * This element does not describe the usage of the concept map. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this concept map.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
            
  /**
 * Identifier for the source value set that contains the concepts that are being
 * mapped and provides context for the mappings.
 * Should be a version specific reference. URIs SHOULD be absolute. If there is no
 * source or target value set, there is no specified context for the map (not
 * recommended).  The source value set may select codes from either an explicit
 * (standard or local) or implicit code system.
 */
  sourceUri?: string | undefined;
  _sourceUri?: Element | undefined;

          
            
  /**
 * Identifier for the source value set that contains the concepts that are being
 * mapped and provides context for the mappings.
 * Should be a version specific reference. URIs SHOULD be absolute. If there is no
 * source or target value set, there is no specified context for the map (not
 * recommended).  The source value set may select codes from either an explicit
 * (standard or local) or implicit code system.
 */
  sourceCanonical?: string | undefined;
  _sourceCanonical?: Element | undefined;

          
        
      
        
          
  /**
 * The status of this concept map. Enables tracking the life-cycle of the content.
 * Allows filtering of concept maps that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * The target value set provides context for the mappings. Note that the mapping is
 * made between concepts, not between value sets, but the value set provides
 * important context about how the concept mapping choices are made.
 * Should be a version specific reference. URIs SHOULD be absolute. If there is no
 * source or target value set, the is no specified context for the map.
 */
  targetUri?: string | undefined;
  _targetUri?: Element | undefined;

          
            
  /**
 * The target value set provides context for the mappings. Note that the mapping is
 * made between concepts, not between value sets, but the value set provides
 * important context about how the concept mapping choices are made.
 * Should be a version specific reference. URIs SHOULD be absolute. If there is no
 * source or target value set, the is no specified context for the map.
 */
  targetCanonical?: string | undefined;
  _targetCanonical?: Element | undefined;

          
        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the concept map.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this concept map when it is referenced
 * in a specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this concept map is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the concept map is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate concept map
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the concept map when it
 * is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the concept map author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different concept map instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the concept map with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Condition
 * 
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or
 * clinical concept that has risen to a level of concern.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Condition.html}
 */
    export interface Condition extends DomainResource {
      
      readonly resourceType: "Condition";
      

      
        
          
            
  /**
 * The date or estimated date that the condition resolved or went into remission.
 * This is called "abatement" because of the many overloaded connotations
 * associated with "remission" or "resolution" - Conditions are never really
 * resolved, but they can abate.
 * There is no explicit distinction between resolution and remission because in
 * many cases the distinction is not clear. Age is generally used when the patient
 * reports an age at which the Condition abated.  If there is no abatement element,
 * it is unknown whether the condition has resolved or entered remission;
 * applications and users should generally assume that the condition is still
 * valid.  When abatementString exists, it implies the condition is abated.
 */
  abatementDateTime?: string | undefined;
  _abatementDateTime?: Element | undefined;

          
            
  /**
 * The date or estimated date that the condition resolved or went into remission.
 * This is called "abatement" because of the many overloaded connotations
 * associated with "remission" or "resolution" - Conditions are never really
 * resolved, but they can abate.
 * There is no explicit distinction between resolution and remission because in
 * many cases the distinction is not clear. Age is generally used when the patient
 * reports an age at which the Condition abated.  If there is no abatement element,
 * it is unknown whether the condition has resolved or entered remission;
 * applications and users should generally assume that the condition is still
 * valid.  When abatementString exists, it implies the condition is abated.
 */
  abatementAge?: Age | undefined;
  _abatementAge?: Element | undefined;

          
            
  /**
 * The date or estimated date that the condition resolved or went into remission.
 * This is called "abatement" because of the many overloaded connotations
 * associated with "remission" or "resolution" - Conditions are never really
 * resolved, but they can abate.
 * There is no explicit distinction between resolution and remission because in
 * many cases the distinction is not clear. Age is generally used when the patient
 * reports an age at which the Condition abated.  If there is no abatement element,
 * it is unknown whether the condition has resolved or entered remission;
 * applications and users should generally assume that the condition is still
 * valid.  When abatementString exists, it implies the condition is abated.
 */
  abatementPeriod?: Period | undefined;
  _abatementPeriod?: Element | undefined;

          
            
  /**
 * The date or estimated date that the condition resolved or went into remission.
 * This is called "abatement" because of the many overloaded connotations
 * associated with "remission" or "resolution" - Conditions are never really
 * resolved, but they can abate.
 * There is no explicit distinction between resolution and remission because in
 * many cases the distinction is not clear. Age is generally used when the patient
 * reports an age at which the Condition abated.  If there is no abatement element,
 * it is unknown whether the condition has resolved or entered remission;
 * applications and users should generally assume that the condition is still
 * valid.  When abatementString exists, it implies the condition is abated.
 */
  abatementRange?: Range | undefined;
  _abatementRange?: Element | undefined;

          
            
  /**
 * The date or estimated date that the condition resolved or went into remission.
 * This is called "abatement" because of the many overloaded connotations
 * associated with "remission" or "resolution" - Conditions are never really
 * resolved, but they can abate.
 * There is no explicit distinction between resolution and remission because in
 * many cases the distinction is not clear. Age is generally used when the patient
 * reports an age at which the Condition abated.  If there is no abatement element,
 * it is unknown whether the condition has resolved or entered remission;
 * applications and users should generally assume that the condition is still
 * valid.  When abatementString exists, it implies the condition is abated.
 */
  abatementString?: string | undefined;
  _abatementString?: Element | undefined;

          
        
      
        
          
  /**
 * Individual who is making the condition statement.
 */
  asserter?: Reference | undefined;
  _asserter?: Element | undefined;

        
      
        
          
  /**
 * The anatomical location where this condition manifests itself.
 * Only used if not implicit in code found in Condition.code. If the use case
 * requires attributes from the BodySite resource (e.g. to identify and track
 * separately) then use the standard extension [bodySite](extension-bodysite.html).
 * May be a summary code, or a reference to a very precise definition of the
 * location, or both.
 */
  bodySite?: Array<CodeableConcept> | undefined;
  _bodySite?: Element[] | undefined;

        
      
        
          
  /**
 * A category assigned to the condition.
 * The categorization is often highly contextual and may appear poorly
 * differentiated or not very useful in other contexts.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The clinical status of the condition.
 * The data type is CodeableConcept because clinicalStatus has some clinical
 * judgment involved, such that there might need to be more specificity than the
 * required FHIR value set allows. For example, a SNOMED coding might allow for
 * additional specificity.
 */
  clinicalStatus?: CodeableConcept | undefined;
  _clinicalStatus?: Element | undefined;

        
      
        
          
  /**
 * Identification of the condition, problem or diagnosis.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The Encounter during which this Condition was created or to which the creation
 * of this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter. This record
 * indicates the encounter this particular record is associated with.  In the case
 * of a "new" diagnosis reflecting ongoing/revised information about the condition,
 * this might be distinct from the first encounter in which the underlying
 * condition was first "known".
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Supporting evidence / manifestations that are the basis of the Condition's
 * verification status, such as evidence that confirmed or refuted the condition.
 * The evidence may be a simple list of coded symptoms/manifestations, or
 * references to observations or formal assessments, or both.
 */
  evidence?: Array<BackboneElement> | undefined;
  _evidence?: Element[] | undefined;

        
      
        
          
  /**
 * A manifestation or symptom that led to the recording of this condition.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * Links to other relevant information, including pathology reports.
 */
  detail?: Array<Reference> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this condition by the performer or other
 * systems which remain constant as the resource is updated and propagates from
 * server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Additional information about the Condition. This is a general notes/comments
 * entry  for description of the Condition, its diagnosis and prognosis.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * Estimated or actual date or date-time  the condition began, in the opinion of
 * the clinician.
 * Age is generally used when the patient reports an age at which the Condition
 * began to occur.
 */
  onsetDateTime?: string | undefined;
  _onsetDateTime?: Element | undefined;

          
            
  /**
 * Estimated or actual date or date-time  the condition began, in the opinion of
 * the clinician.
 * Age is generally used when the patient reports an age at which the Condition
 * began to occur.
 */
  onsetAge?: Age | undefined;
  _onsetAge?: Element | undefined;

          
            
  /**
 * Estimated or actual date or date-time  the condition began, in the opinion of
 * the clinician.
 * Age is generally used when the patient reports an age at which the Condition
 * began to occur.
 */
  onsetPeriod?: Period | undefined;
  _onsetPeriod?: Element | undefined;

          
            
  /**
 * Estimated or actual date or date-time  the condition began, in the opinion of
 * the clinician.
 * Age is generally used when the patient reports an age at which the Condition
 * began to occur.
 */
  onsetRange?: Range | undefined;
  _onsetRange?: Element | undefined;

          
            
  /**
 * Estimated or actual date or date-time  the condition began, in the opinion of
 * the clinician.
 * Age is generally used when the patient reports an age at which the Condition
 * began to occur.
 */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;

          
        
      
        
          
  /**
 * The recordedDate represents when this particular Condition record was created in
 * the system, which is often a system-generated date.
 */
  recordedDate?: string | undefined;
  _recordedDate?: Element | undefined;

        
      
        
          
  /**
 * Individual who recorded the record and takes responsibility for its content.
 */
  recorder?: Reference | undefined;
  _recorder?: Element | undefined;

        
      
        
          
  /**
 * A subjective assessment of the severity of the condition as evaluated by the
 * clinician.
 * Coding of the severity with a terminology is preferred, where possible.
 */
  severity?: CodeableConcept | undefined;
  _severity?: Element | undefined;

        
      
        
          
  /**
 * Clinical stage or grade of a condition. May include formal severity assessments.
 */
  stage?: Array<BackboneElement> | undefined;
  _stage?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to a formal record of the evidence on which the staging assessment is
 * based.
 */
  assessment?: Array<Reference> | undefined;
  _assessment?: Element[] | undefined;

        
      
        
          
  /**
 * A simple summary of the stage such as "Stage 3". The determination of the stage
 * is disease-specific.
 */
  summary?: CodeableConcept | undefined;
  _summary?: Element | undefined;

        
      
        
          
  /**
 * The kind of staging, such as pathological or clinical staging.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Indicates the patient or group who the condition record is associated with.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * The verification status to support the clinical status of the condition.
 * verificationStatus is not required.  For example, when a patient has abdominal
 * pain in the ED, there is not likely going to be a verification status.
The data
 * type is CodeableConcept because verificationStatus has some clinical judgment
 * involved, such that there might need to be more specificity than the required
 * FHIR value set allows. For example, a SNOMED coding might allow for additional
 * specificity.
 */
  verificationStatus?: CodeableConcept | undefined;
  _verificationStatus?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Consent
 * 
 * A record of a healthcare consumer’s  choices, which permits or denies identified
 * recipient(s) or recipient role(s) to perform one or more actions within a given
 * policy context, for specific purposes and periods of time.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Consent.html}
 */
    export interface Consent extends DomainResource {
      
      readonly resourceType: "Consent";
      

      
        
          
  /**
 * A classification of the type of consents found in the statement. This element
 * supports indexing and retrieval of consent statements.
 */
  category: Array<CodeableConcept>;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * When this  Consent was issued / created / indexed.
 * This is not the time of the original consent, but the time that this statement
 * was made or derived.
 */
  dateTime?: string | undefined;
  _dateTime?: Element | undefined;

        
      
        
          
  /**
 * Unique identifier for this copy of the Consent Statement.
 * This identifier identifies this copy of the consent. Where this identifier is
 * also used elsewhere as the identifier for a consent record (e.g. a CDA consent
 * document) then the consent details are expected to be the same.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The organization that manages the consent, and the framework within which it is
 * executed.
 */
  organization?: Array<Reference> | undefined;
  _organization?: Element[] | undefined;

        
      
        
          
  /**
 * The patient/healthcare consumer to whom this consent applies.
 * Commonly, the patient the consent pertains to is the author, but for young and
 * old people, it may be some other person.
 */
  patient?: Reference | undefined;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * Either the Grantor, which is the entity responsible for granting the rights
 * listed in a Consent Directive or the Grantee, which is the entity responsible
 * for complying with the Consent Directive, including any obligations or
 * limitations on authorizations and enforcement of prohibitions.
 * Commonly, the patient the consent pertains to is the consentor, but particularly
 * for young and old people, it may be some other person - e.g. a legal guardian.
 */
  performer?: Array<Reference> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * The references to the policies that are included in this consent scope. Policies
 * may be organizational, but are often defined jurisdictionally, or in law.
 */
  policy?: Array<BackboneElement> | undefined;
  _policy?: Element[] | undefined;

        
      
        
          
  /**
 * Entity or Organization having regulatory jurisdiction or accountability for
 * enforcing policies pertaining to Consent Directives.
 */
  authority?: string | undefined;
  _authority?: Element | undefined;

        
      
        
          
  /**
 * The references to the policies that are included in this consent scope. Policies
 * may be organizational, but are often defined jurisdictionally, or in law.
 * This element is for discoverability / documentation and does not modify or
 * qualify the policy rules.
 */
  uri?: string | undefined;
  _uri?: Element | undefined;

        
      
        
          
  /**
 * A reference to the specific base computable regulation or policy.
 * If the policyRule is absent, computable consent would need to be constructed
 * from the elements of the Consent resource.
 */
  policyRule?: CodeableConcept | undefined;
  _policyRule?: Element | undefined;

        
      
        
          
  /**
 * An exception to the base policy of this consent. An exception can be an addition
 * or removal of access permissions.
 */
  provision?: BackboneElement | undefined;
  _provision?: Element | undefined;

        
      
        
          
  /**
 * Actions controlled by this Rule.
 * Note that this is the direct action (not the grounds for the action covered in
 * the purpose element). At present, the only action in the understood and tested
 * scope of this resource is 'read'.
 */
  action?: Array<CodeableConcept> | undefined;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Who or what is controlled by this rule. Use group to identify a set of actors by
 * some property they share (e.g. 'admitting officers').
 */
  actor?: Array<BackboneElement> | undefined;
  _actor?: Element[] | undefined;

        
      
        
          
  /**
 * The resource that identifies the actor. To identify actors by type, use group to
 * identify a set of actors by some property they share (e.g. 'admitting
 * officers').
 */
  reference: Reference;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * How the individual is involved in the resources content that is described in the
 * exception.
 */
  role: CodeableConcept;
  _role?: Element | undefined;

        
      
        
          
  /**
 * The class of information covered by this rule. The type can be a FHIR resource
 * type, a profile on a type, or a CDA document, or some other type that indicates
 * what sort of information the consent relates to.
 * Multiple types are or'ed together. The intention of the contentType element is
 * that the codes refer to profiles or document types defined in a standard or an
 * implementation guide somewhere.
 */
  class?: Array<Coding> | undefined;
  _class?: Element[] | undefined;

        
      
        
          
  /**
 * If this code is found in an instance, then the rule applies.
 * Typical use of this is a Document code with class = CDA.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * The resources controlled by this rule if specific resources are referenced.
 */
  data?: Array<BackboneElement> | undefined;
  _data?: Element[] | undefined;

        
      
        
          
  /**
 * How the resource reference is interpreted when testing consent restrictions.
 */
  meaning: string;
  _meaning?: Element | undefined;

        
      
        
          
  /**
 * A reference to a specific resource that defines which resources are covered by
 * this consent.
 */
  reference: Reference;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * Clinical or Operational Relevant period of time that bounds the data controlled
 * by this rule.
 * This has a different sense to the Consent.period - that is when the consent
 * agreement holds. This is the time period of the data that is controlled by the
 * agreement.
 */
  dataPeriod?: Period | undefined;
  _dataPeriod?: Element | undefined;

        
      
        
          
  /**
 * The timeframe in this rule is valid.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Rules which provide exceptions to the base rule or subrules.
 */
  provision?: Array<undefined> | undefined;
  _provision?: Element[] | undefined;

        
      
        
          
  /**
 * The context of the activities a user is taking - why the user is accessing the
 * data - that are controlled by this rule.
 * When the purpose of use tag is on the data, access request purpose of use shall
 * not conflict.
 */
  purpose?: Array<Coding> | undefined;
  _purpose?: Element[] | undefined;

        
      
        
          
  /**
 * A security label, comprised of 0..* security label fields (Privacy tags), which
 * define which resources are controlled by this exception.
 * If the consent specifies a security label of "R" then it applies to all
 * resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high
 * water mark. For other kinds of security labels, subsumption logic applies. When
 * the purpose of use tag is on the data, access request purpose of use shall not
 * conflict.
 */
  securityLabel?: Array<Coding> | undefined;
  _securityLabel?: Element[] | undefined;

        
      
        
          
  /**
 * Action  to take - permit or deny - when the rule conditions are met.  Not
 * permitted in root rule, required in all nested rules.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A selector of the type of consent being presented: ADR, Privacy, Treatment,
 * Research.  This list is now extensible.
 */
  scope: CodeableConcept;
  _scope?: Element | undefined;

        
      
        
          
            
  /**
 * The source on which this consent statement is based. The source might be a
 * scanned original paper form, or a reference to a consent that links back to such
 * a source, a reference to a document repository (e.g. XDS) that stores the
 * original consent document.
 * The source can be contained inline (Attachment), referenced directly (Consent),
 * referenced in a consent repository (DocumentReference), or simply by an
 * identifier (Identifier), e.g. a CDA document id.
 */
  sourceAttachment?: Attachment | undefined;
  _sourceAttachment?: Element | undefined;

          
            
  /**
 * The source on which this consent statement is based. The source might be a
 * scanned original paper form, or a reference to a consent that links back to such
 * a source, a reference to a document repository (e.g. XDS) that stores the
 * original consent document.
 * The source can be contained inline (Attachment), referenced directly (Consent),
 * referenced in a consent repository (DocumentReference), or simply by an
 * identifier (Identifier), e.g. a CDA document id.
 */
  sourceReference?: Reference | undefined;
  _sourceReference?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates the current state of this consent.
 * This element is labeled as a modifier because the status contains the codes
 * rejected and entered-in-error that mark the Consent as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Whether a treatment instruction (e.g. artificial respiration yes or no) was
 * verified with the patient, his/her family or another authorized person.
 */
  verification?: Array<BackboneElement> | undefined;
  _verification?: Element[] | undefined;

        
      
        
          
  /**
 * Date verification was collected.
 */
  verificationDate?: string | undefined;
  _verificationDate?: Element | undefined;

        
      
        
          
  /**
 * Has the instruction been verified.
 */
  verified: boolean;
  _verified?: Element | undefined;

        
      
        
          
  /**
 * Who verified the instruction (Patient, Relative or other Authorized Person).
 */
  verifiedWith?: Reference | undefined;
  _verifiedWith?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * ContactDetail
 * 
 * Base StructureDefinition for ContactDetail Type: Specifies contact information
 * for a person or organization.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ContactDetail.html}
 */
    export interface ContactDetail extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The name of an individual to contact.
 * If there is no named individual, the telecom information is for the organization
 * as a whole.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The contact details for the individual (if a name was provided) or the
 * organization.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  
    /**
 * ContactPoint
 * 
 * Base StructureDefinition for ContactPoint Type: Details for all kinds of
 * technology mediated contact points for a person or organization, including
 * telephone, email, etc.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ContactPoint.html}
 */
    export interface ContactPoint extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Time period when the contact point was/is in use.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Specifies a preferred order in which to use a set of contacts. ContactPoints
 * with lower rank values are more preferred than those with higher rank values.
 * Note that rank does not necessarily follow the order in which the contacts are
 * represented in the instance.
 */
  rank?: number | undefined;
  _rank?: Element | undefined;

        
      
        
          
  /**
 * Telecommunications form for contact point - what communications system is
 * required to make use of the contact.
 */
  system?: string | undefined;
  _system?: Element | undefined;

        
      
        
          
  /**
 * Identifies the purpose for the contact point.
 * Applications can assume that a contact is current unless it explicitly says that
 * it is temporary or old.
 */
  use?: string | undefined;
  _use?: Element | undefined;

        
      
        
          
  /**
 * The actual contact point details, in a form that is meaningful to the designated
 * communication system (i.e. phone number or email address).
 * Additional text data such as phone extension numbers, or notes about use of the
 * contact are sometimes included in the value.
 */
  value?: string | undefined;
  _value?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Contract
 * 
 * Legally enforceable, formally recorded unilateral or bilateral directive i.e., a
 * policy or agreement.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Contract.html}
 */
    export interface Contract extends DomainResource {
      
      readonly resourceType: "Contract";
      

      
        
          
  /**
 * Alternative representation of the title for this Contract definition,
 * derivative, or instance in any legal state., e.g., a domain specific contract
 * number related to legislation.
 */
  alias?: Array<string> | undefined;
  _alias?: Element[] | undefined;

        
      
        
          
  /**
 * Relevant time or time-period when this Contract is applicable.
 */
  applies?: Period | undefined;
  _applies?: Element | undefined;

        
      
        
          
  /**
 * The individual or organization that authored the Contract definition,
 * derivative, or instance in any legal state.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * A formally or informally recognized grouping of people, principals,
 * organizations, or jurisdictions formed for the purpose of achieving some form of
 * collective action such as the promulgation, administration and enforcement of
 * contracts and policies.
 */
  authority?: Array<Reference> | undefined;
  _authority?: Element[] | undefined;

        
      
        
          
  /**
 * Precusory content developed with a focus and intent of supporting the formation
 * a Contract instance, which may be associated with and transformable into a
 * Contract.
 */
  contentDefinition?: BackboneElement | undefined;
  _contentDefinition?: Element | undefined;

        
      
        
          
  /**
 * A copyright statement relating to Contract precursor content. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * Contract precursor content.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date (and optionally time) when the contract was published. The date must
 * change when the business version changes and it must change if the status code
 * changes. In addition, it should change when the substantive content of the
 * contract changes.
 */
  publicationDate?: string | undefined;
  _publicationDate?: Element | undefined;

        
      
        
          
  /**
 * amended | appended | cancelled | disputed | entered-in-error | executable |
 * executed | negotiable | offered | policy | rejected | renewed | revoked |
 * resolved | terminated.
 */
  publicationStatus: string;
  _publicationStatus?: Element | undefined;

        
      
        
          
  /**
 * The  individual or organization that published the Contract precursor content.
 */
  publisher?: Reference | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Detailed Precusory content type.
 */
  subType?: CodeableConcept | undefined;
  _subType?: Element | undefined;

        
      
        
          
  /**
 * Precusory content structure and use, i.e., a boilerplate, template, application
 * for a contract such as an insurance policy or benefits under a program, e.g.,
 * workers compensation.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The minimal content derived from the basal information source at a specific
 * stage in its lifecycle.
 */
  contentDerivative?: CodeableConcept | undefined;
  _contentDerivative?: Element | undefined;

        
      
        
          
  /**
 * Recognized governance framework or system operating with a circumscribed scope
 * in accordance with specified principles, policies, processes or procedures for
 * managing rights, actions, or behaviors of parties or principals relative to
 * resources.
 */
  domain?: Array<Reference> | undefined;
  _domain?: Element[] | undefined;

        
      
        
          
  /**
 * Event resulting in discontinuation or termination of this Contract instance by
 * one or more parties to the contract.
 */
  expirationType?: CodeableConcept | undefined;
  _expirationType?: Element | undefined;

        
      
        
          
  /**
 * The "patient friendly language" versionof the Contract in whole or in parts.
 * "Patient friendly language" means the representation of the Contract and
 * Contract Provisions in a manner that is readily accessible and understandable by
 * a layperson in accordance with best practices for communication styles that
 * ensure that those agreeing to or signing the Contract understand the roles,
 * actions, obligations, responsibilities, and implication of the agreement.
 */
  friendly?: Array<BackboneElement> | undefined;
  _friendly?: Element[] | undefined;

        
      
        
          
            
  /**
 * Human readable rendering of this Contract in a format and representation
 * intended to enhance comprehension and ensure understandability.
 */
  contentAttachment?: Attachment | undefined;
  _contentAttachment?: Element | undefined;

          
            
  /**
 * Human readable rendering of this Contract in a format and representation
 * intended to enhance comprehension and ensure understandability.
 */
  contentReference?: Reference | undefined;
  _contentReference?: Element | undefined;

          
        
      
        
          
  /**
 * Unique identifier for this Contract or a derivative that references a Source
 * Contract.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined Contract Definition that is adhered to in
 * whole or part by this Contract.
 */
  instantiatesCanonical?: Reference | undefined;
  _instantiatesCanonical?: Element | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained definition that is adhered to in
 * whole or in part by this Contract.
 */
  instantiatesUri?: string | undefined;
  _instantiatesUri?: Element | undefined;

        
      
        
          
  /**
 * When this  Contract was issued.
 */
  issued?: string | undefined;
  _issued?: Element | undefined;

        
      
        
          
  /**
 * List of Legal expressions or representations of this Contract.
 */
  legal?: Array<BackboneElement> | undefined;
  _legal?: Element[] | undefined;

        
      
        
          
            
  /**
 * Contract legal text in human renderable form.
 */
  contentAttachment?: Attachment | undefined;
  _contentAttachment?: Element | undefined;

          
            
  /**
 * Contract legal text in human renderable form.
 */
  contentReference?: Reference | undefined;
  _contentReference?: Element | undefined;

          
        
      
        
          
            
  /**
 * Legally binding Contract: This is the signed and legally recognized
 * representation of the Contract, which is considered the "source of truth" and
 * which would be the basis for legal action related to enforcement of this
 * Contract.
 */
  legallyBindingAttachment?: Attachment | undefined;
  _legallyBindingAttachment?: Element | undefined;

          
            
  /**
 * Legally binding Contract: This is the signed and legally recognized
 * representation of the Contract, which is considered the "source of truth" and
 * which would be the basis for legal action related to enforcement of this
 * Contract.
 */
  legallyBindingReference?: Reference | undefined;
  _legallyBindingReference?: Element | undefined;

          
        
      
        
          
  /**
 * Legal states of the formation of a legal instrument, which is a formally
 * executed written document that can be formally attributed to its author, records
 * and formally expresses a legally enforceable act, process, or contractual duty,
 * obligation, or right, and therefore evidences that act, process, or agreement.
 */
  legalState?: CodeableConcept | undefined;
  _legalState?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying this Contract definition, derivative, or
 * instance in any legal state. Provides additional information about its content.
 * This name should be usable as an identifier for the module by machine processing
 * applications such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Links to Provenance records for past versions of this Contract definition,
 * derivative, or instance, which identify key state transitions or updates that
 * are likely to be relevant to a user looking at the current version of the
 * Contract.  The Provence.entity indicates the target that was changed in the
 * update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
 */
  relevantHistory?: Array<Reference> | undefined;
  _relevantHistory?: Element[] | undefined;

        
      
        
          
  /**
 * List of Computable Policy Rule Language Representations of this Contract.
 */
  rule?: Array<BackboneElement> | undefined;
  _rule?: Element[] | undefined;

        
      
        
          
            
  /**
 * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL,
 * SecPal).
 */
  contentAttachment?: Attachment | undefined;
  _contentAttachment?: Element | undefined;

          
            
  /**
 * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL,
 * SecPal).
 */
  contentReference?: Reference | undefined;
  _contentReference?: Element | undefined;

          
        
      
        
          
  /**
 * A selector of legal concerns for this Contract definition, derivative, or
 * instance in any legal state.
 */
  scope?: CodeableConcept | undefined;
  _scope?: Element | undefined;

        
      
        
          
  /**
 * Parties with legal standing in the Contract, including the principal parties,
 * the grantor(s) and grantee(s), which are any person or organization bound by the
 * contract, and any ancillary parties, which facilitate the execution of the
 * contract such as a notary or witness.
 * Signers who are principal parties to the contract are bound by the
 * Contract.activity related to the Contract.topic, and the Contract.term(s), which
 * either extend or restrict the overall action on the topic by, for example,
 * stipulating specific policies or obligations constraining actions, action
 * reason, or agents with respect to some or all of the topic.For example,
 * specifying how policies or obligations shall constrain actions and action
 * reasons permitted or denied on all or a subset of the Contract.topic (e.g., all
 * or a portion of property being transferred by the contract), agents (e.g., who
 * can resell, assign interests, or alter the property being transferred by the
 * contract), actions, and action reasons; or with respect to Contract.terms,
 * stipulating, extending, or limiting the Contract.period of applicability or
 * valuation of items under consideration.
 */
  signer?: Array<BackboneElement> | undefined;
  _signer?: Element[] | undefined;

        
      
        
          
  /**
 * Party which is a signator to this Contract.
 */
  party: Reference;
  _party?: Element | undefined;

        
      
        
          
  /**
 * Legally binding Contract DSIG signature contents in Base64.
 */
  signature: Array<Signature>;
  _signature?: Element[] | undefined;

        
      
        
          
  /**
 * Role of this Contract signer, e.g. notary, grantee.
 */
  type: Coding;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Sites in which the contract is complied with,  exercised, or in force.
 */
  site?: Array<Reference> | undefined;
  _site?: Element[] | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the contract as not currently valid or active.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The target entity impacted by or of interest to parties to the agreement.
 * The Contract.subject is an entity that has some role with respect to the
 * Contract.topic and Contract.topic.term, which is of focal interest to the
 * parties to the contract and likely impacted in a significant way by the
 * Contract.action/Contract.action.reason and the
 * Contract.term.action/Contract.action.reason. In many cases, the
 * Contract.subject is a Contract.signer if the subject is an adult; has a legal
 * interest in the contract; and incompetent to participate in the contract
 * agreement.
 */
  subject?: Array<Reference> | undefined;
  _subject?: Element[] | undefined;

        
      
        
          
  /**
 * An explanatory or alternate user-friendly title for this Contract definition,
 * derivative, or instance in any legal state.t giving additional information about
 * its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * Sub-category for the Contract that distinguishes the kinds of systems that would
 * be interested in the Contract within the context of the Contract's scope.
 */
  subType?: Array<CodeableConcept> | undefined;
  _subType?: Element[] | undefined;

        
      
        
          
  /**
 * Information that may be needed by/relevant to the performer in their execution
 * of this term action.
 */
  supportingInfo?: Array<Reference> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
        
          
  /**
 * One or more Contract Provisions, which may be related and conveyed as a group,
 * and may contain nested groups.
 */
  term?: Array<BackboneElement> | undefined;
  _term?: Element[] | undefined;

        
      
        
          
  /**
 * An actor taking a role in an activity for which it can be assigned some degree
 * of responsibility for the activity taking place.
 * Several agents may be associated (i.e. has some responsibility for an activity)
 * with an activity and vice-versa.For example, in cases of actions initiated by
 * one user for other users, or in events that involve more than one user, hardware
 * device, software, or system process. However, only one user may be the
 * initiator/requestor for the event.
 */
  action?: Array<BackboneElement> | undefined;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Encounter or Episode with primary association to specified term activity.
 */
  context?: Reference | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * Id [identifier??] of the clause or question text related to the requester of
 * this action in the referenced form or QuestionnaireResponse.
 */
  contextLinkId?: Array<string> | undefined;
  _contextLinkId?: Element[] | undefined;

        
      
        
          
  /**
 * True if the term prohibits the  action.
 */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;

        
      
        
          
  /**
 * Reason or purpose for the action stipulated by this Contract Provision.
 */
  intent: CodeableConcept;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * Id [identifier??] of the clause or question text related to this action in the
 * referenced form or QuestionnaireResponse.
 */
  linkId?: Array<string> | undefined;
  _linkId?: Element[] | undefined;

        
      
        
          
  /**
 * Comments made about the term action made by the requester, performer, subject or
 * other participants.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * When action happens.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * When action happens.
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * When action happens.
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates who or what is being asked to perform (or not perform) the ction.
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * Id [identifier??] of the clause or question text related to the reason type or
 * reference of this  action in the referenced form or QuestionnaireResponse.
 */
  performerLinkId?: Array<string> | undefined;
  _performerLinkId?: Element[] | undefined;

        
      
        
          
  /**
 * The type of role or competency of an individual desired or required to perform
 * or not perform the action.
 */
  performerRole?: CodeableConcept | undefined;
  _performerRole?: Element | undefined;

        
      
        
          
  /**
 * The type of individual that is desired or required to perform or not perform the
 * action.
 */
  performerType?: Array<CodeableConcept> | undefined;
  _performerType?: Element[] | undefined;

        
      
        
          
  /**
 * Describes why the action is to be performed or not performed in textual form.
 */
  reason?: Array<string> | undefined;
  _reason?: Element[] | undefined;

        
      
        
          
  /**
 * Rationale for the action to be performed or not performed. Describes why the
 * action is permitted or prohibited.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Id [identifier??] of the clause or question text related to the reason type or
 * reference of this  action in the referenced form or QuestionnaireResponse.
 */
  reasonLinkId?: Array<string> | undefined;
  _reasonLinkId?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies permitting or not
 * permitting this action.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * Who or what initiated the action and has responsibility for its activation.
 */
  requester?: Array<Reference> | undefined;
  _requester?: Element[] | undefined;

        
      
        
          
  /**
 * Id [identifier??] of the clause or question text related to the requester of
 * this action in the referenced form or QuestionnaireResponse.
 */
  requesterLinkId?: Array<string> | undefined;
  _requesterLinkId?: Element[] | undefined;

        
      
        
          
  /**
 * Security labels that protects the action.
 */
  securityLabelNumber?: Array<unsignedInt> | undefined;
  _securityLabelNumber?: Element[] | undefined;

        
      
        
          
  /**
 * Current state of the term action.
 */
  status: CodeableConcept;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Entity of the action.
 */
  subject?: Array<BackboneElement> | undefined;
  _subject?: Element[] | undefined;

        
      
        
          
  /**
 * The entity the action is performed or not performed on or for.
 */
  reference: Array<Reference>;
  _reference?: Element[] | undefined;

        
      
        
          
  /**
 * Role type of agent assigned roles in this Contract.
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Activity or service obligation to be done or not done, performed or not
 * performed, effectuated or not by this Contract term.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Relevant time or time-period when this Contract Provision is applicable.
 */
  applies?: Period | undefined;
  _applies?: Element | undefined;

        
      
        
          
  /**
 * Contract Term Asset List.
 */
  asset?: Array<BackboneElement> | undefined;
  _asset?: Element[] | undefined;

        
      
        
          
  /**
 * Response to assets.
 */
  answer?: Array<undefined> | undefined;
  _answer?: Element[] | undefined;

        
      
        
          
  /**
 * Description of the quality and completeness of the asset that imay be a factor
 * in its valuation.
 */
  condition?: string | undefined;
  _condition?: Element | undefined;

        
      
        
          
  /**
 * Circumstance of the asset.
 */
  context?: Array<BackboneElement> | undefined;
  _context?: Element[] | undefined;

        
      
        
          
  /**
 * Coded representation of the context generally or of the Referenced entity, such
 * as the asset holder type or location.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * Asset context reference may include the creator, custodian, or owning Person or
 * Organization (e.g., bank, repository),  location held, e.g., building,
 * jurisdiction.
 */
  reference?: Reference | undefined;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * Context description.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Id [identifier??] of the clause or question text about the asset in the
 * referenced form or QuestionnaireResponse.
 */
  linkId?: Array<string> | undefined;
  _linkId?: Element[] | undefined;

        
      
        
          
  /**
 * Asset relevant contractual time period.
 */
  period?: Array<Period> | undefined;
  _period?: Element[] | undefined;

        
      
        
          
  /**
 * Type of Asset availability for use or ownership.
 */
  periodType?: Array<CodeableConcept> | undefined;
  _periodType?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies the applicability of the term to an asset resource instance, and
 * instances it refers to orinstances that refer to it, and/or are owned by the
 * offeree.
 */
  relationship?: Coding | undefined;
  _relationship?: Element | undefined;

        
      
        
          
  /**
 * Differentiates the kind of the asset .
 */
  scope?: CodeableConcept | undefined;
  _scope?: Element | undefined;

        
      
        
          
  /**
 * Security labels that protects the asset.
 */
  securityLabelNumber?: Array<unsignedInt> | undefined;
  _securityLabelNumber?: Element[] | undefined;

        
      
        
          
  /**
 * May be a subtype or part of an offered asset.
 */
  subtype?: Array<CodeableConcept> | undefined;
  _subtype?: Element[] | undefined;

        
      
        
          
  /**
 * Clause or question text (Prose Object) concerning the asset in a linked form,
 * such as a QuestionnaireResponse used in the formation of the contract.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Target entity type about which the term may be concerned.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * Associated entities.
 */
  typeReference?: Array<Reference> | undefined;
  _typeReference?: Element[] | undefined;

        
      
        
          
  /**
 * Time period of asset use.
 */
  usePeriod?: Array<Period> | undefined;
  _usePeriod?: Element[] | undefined;

        
      
        
          
  /**
 * Contract Valued Item List.
 */
  valuedItem?: Array<BackboneElement> | undefined;
  _valuedItem?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the time during which this Contract ValuedItem information is
 * effective.
 */
  effectiveTime?: string | undefined;
  _effectiveTime?: Element | undefined;

        
      
        
          
            
  /**
 * Specific type of Contract Valued Item that may be priced.
 */
  entityCodeableConcept?: CodeableConcept | undefined;
  _entityCodeableConcept?: Element | undefined;

          
            
  /**
 * Specific type of Contract Valued Item that may be priced.
 */
  entityReference?: Reference | undefined;
  _entityReference?: Element | undefined;

          
        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of the Contract Valued Item delivered. The concept of a Factor allows for a
 * discount or surcharge multiplier to be applied to a monetary amount.
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Identifies a Contract Valued Item instance.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * Id  of the clause or question text related to the context of this valuedItem in
 * the referenced form or QuestionnaireResponse.
 */
  linkId?: Array<string> | undefined;
  _linkId?: Element[] | undefined;

        
      
        
          
  /**
 * Expresses the product of the Contract Valued Item unitQuantity and the
 * unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per
 * Point) * factor Number  * points = net Amount. Quantity, factor and points are
 * assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * Terms of valuation.
 */
  payment?: string | undefined;
  _payment?: Element | undefined;

        
      
        
          
  /**
 * When payment is due.
 */
  paymentDate?: string | undefined;
  _paymentDate?: Element | undefined;

        
      
        
          
  /**
 * An amount that expresses the weighting (based on difficulty, cost and/or
 * resource intensiveness) associated with the Contract Valued Item delivered. The
 * concept of Points allows for assignment of point values for a Contract Valued
 * Item, such that a monetary amount can be assigned to each point.
 */
  points?: number | undefined;
  _points?: Element | undefined;

        
      
        
          
  /**
 * Specifies the units by which the Contract Valued Item is measured or counted,
 * and quantifies the countable or measurable Contract Valued Item instances.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Who will receive payment.
 */
  recipient?: Reference | undefined;
  _recipient?: Element | undefined;

        
      
        
          
  /**
 * Who will make payment.
 */
  responsible?: Reference | undefined;
  _responsible?: Element | undefined;

        
      
        
          
  /**
 * A set of security labels that define which terms are controlled by this
 * condition.
 */
  securityLabelNumber?: Array<unsignedInt> | undefined;
  _securityLabelNumber?: Element[] | undefined;

        
      
        
          
  /**
 * A Contract Valued Item unit valuation measure.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * Nested group of Contract Provisions.
 */
  group?: Array<undefined> | undefined;
  _group?: Element[] | undefined;

        
      
        
          
  /**
 * Unique identifier for this particular Contract Provision.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * When this Contract Provision was issued.
 */
  issued?: string | undefined;
  _issued?: Element | undefined;

        
      
        
          
  /**
 * The matter of concern in the context of this provision of the agrement.
 */
  offer: BackboneElement;
  _offer?: Element | undefined;

        
      
        
          
  /**
 * Response to offer text.
 */
  answer?: Array<BackboneElement> | undefined;
  _answer?: Element[] | undefined;

        
      
        
          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Response to an offer clause or question text,  which enables selection of values
 * to be agreed to, e.g., the period of participation, the date of occupancy of a
 * rental, warrently duration, or whether biospecimen may be used for further
 * research.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
        
          
  /**
 * Type of choice made by accepting party with respect to an offer made by an
 * offeror/ grantee.
 */
  decision?: CodeableConcept | undefined;
  _decision?: Element | undefined;

        
      
        
          
  /**
 * How the decision about a Contract was conveyed.
 */
  decisionMode?: Array<CodeableConcept> | undefined;
  _decisionMode?: Element[] | undefined;

        
      
        
          
  /**
 * Unique identifier for this particular Contract Provision.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The id of the clause or question text of the offer in the referenced
 * questionnaire/response.
 */
  linkId?: Array<string> | undefined;
  _linkId?: Element[] | undefined;

        
      
        
          
  /**
 * Offer Recipient.
 */
  party?: Array<BackboneElement> | undefined;
  _party?: Element[] | undefined;

        
      
        
          
  /**
 * Participant in the offer.
 */
  reference: Array<Reference>;
  _reference?: Element[] | undefined;

        
      
        
          
  /**
 * How the party participates in the offer.
 */
  role: CodeableConcept;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Security labels that protects the offer.
 */
  securityLabelNumber?: Array<unsignedInt> | undefined;
  _securityLabelNumber?: Element[] | undefined;

        
      
        
          
  /**
 * Human readable form of this Contract Offer.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * The owner of an asset has the residual control rights over the asset: the right
 * to decide all usages of the asset in any way not inconsistent with a prior
 * contract, custom, or law (Hart, 1995, p. 30).
 * The Contract.topic may be an application for or offer of a policy or service
 * (e.g., uri to a consent directive form or a health insurance policy), which
 * becomes the Contract once accepted by both the grantor and grantee. The
 * Contract Resource may function simply as the computable representation of the
 * executed contract, which may be the attached to the Contract Resource as the
 * “binding” or as the “friendly” electronic form.  For example, a Contract
 * Resource may be automatically populated with the values expressed in a related
 * QuestionnaireResponse. However, the Contract Resource may be considered the
 * legally binding contract if it is the only “executed” form of this contract, and
 * includes the signatures as *The Contract Resource may function as the computable
 * representation of an application or offer in a pre-executed Contract if the
 * grantor has not entered any values.  In this case, it is populated with values
 * in a “legal” form of the application or offer or by the values in an associated
 * Questionnaire.  If the grantor has filled in the legal form or the associated
 * Questionnaire Response, then these values are used to populate a pre-executed
 * Contract Resource.If the Contract.topic is considered an application or offer,
 * then the policy is often required to be attached as the “legal” basis for the
 * application to ensure “informed consent” to the contract, and that any
 * discrepancy between the application and the policy are interpreted against the
 * policy.  Implementers should check organizational and jurisdictional policies to
 * determine the relationship among multiple representations of a contract pre- and
 * post-execution.
 */
  topic?: Reference | undefined;
  _topic?: Element | undefined;

        
      
        
          
  /**
 * Type of Contract Provision such as specific requirements, purposes for actions,
 * obligations, prohibitions, e.g. life time maximum benefit.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Security labels that protect the handling of information about the term and its
 * elements, which may be specifically identified..
 */
  securityLabel?: Array<BackboneElement> | undefined;
  _securityLabel?: Element[] | undefined;

        
      
        
          
  /**
 * Security label privacy tag that species the applicable privacy and security
 * policies governing this term and/or term elements.
 */
  category?: Array<Coding> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Security label privacy tag that species the level of confidentiality protection
 * required for this term and/or term elements.
 */
  classification: Coding;
  _classification?: Element | undefined;

        
      
        
          
  /**
 * Security label privacy tag that species the manner in which term and/or term
 * elements are to be protected.
 */
  control?: Array<Coding> | undefined;
  _control?: Element[] | undefined;

        
      
        
          
  /**
 * Number used to link this term or term element to the applicable Security Label.
 */
  number?: Array<unsignedInt> | undefined;
  _number?: Element[] | undefined;

        
      
        
          
  /**
 * A specialized legal clause or condition based on overarching contract type.
 */
  subType?: CodeableConcept | undefined;
  _subType?: Element | undefined;

        
      
        
          
  /**
 * Statement of a provision in a policy or a contract.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
            
  /**
 * The entity that the term applies to.
 */
  topicCodeableConcept?: CodeableConcept | undefined;
  _topicCodeableConcept?: Element | undefined;

          
            
  /**
 * The entity that the term applies to.
 */
  topicReference?: Reference | undefined;
  _topicReference?: Element | undefined;

          
        
      
        
          
  /**
 * A legal clause or condition contained within a contract that requires one or
 * both parties to perform a particular requirement by some specified time or
 * prevents one or both parties from performing a particular requirement by some
 * specified time.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for this Contract definition,
 * derivative, or instance in any legal state.t giving additional information about
 * its content.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
            
  /**
 * Narrows the range of legal concerns to focus on the achievement of specific
 * contractual objectives.
 */
  topicCodeableConcept?: CodeableConcept | undefined;
  _topicCodeableConcept?: Element | undefined;

          
            
  /**
 * Narrows the range of legal concerns to focus on the achievement of specific
 * contractual objectives.
 */
  topicReference?: Reference | undefined;
  _topicReference?: Element | undefined;

          
        
      
        
          
  /**
 * A high-level category for the legal instrument, whether constructed as a
 * Contract definition, derivative, or instance in any legal state.  Provides
 * additional information about its content within the context of the Contract's
 * scope to distinguish the kinds of systems that would be interested in the
 * contract.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Canonical identifier for this contract, represented as a URI (globally unique).
 * Used in a domain that uses a supplied contract repository.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * An edition identifier used for business purposes to label business significant
 * variants.
 * Note -  This is a business versionId, not a resource version id (see discussion
 * http://build.fhir.org/resource.html#versions) Comments - There may be different
 * contract instances that have the same identifier but different versions. The
 * version can be appended to the url in a reference to allow a reference to a
 * particular business version of the plan definition with the format
 * [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Contributor
 * 
 * Base StructureDefinition for Contributor Type: A contributor to the content of a
 * knowledge asset, including authors, editors, reviewers, and endorsers.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Contributor.html}
 */
    export interface Contributor extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * contributor.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the individual or organization responsible for the contribution.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The type of contributor.
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Count
 * 
 * Base StructureDefinition for Count Type: A measured amount (or an amount that
 * can potentially be measured). Note that measured amounts include amounts that
 * are not precisely quantified, including amounts involving arbitrary units and
 * floating currencies.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Count.html}
 */
    export interface Count extends Quantity {
      
      readonly resourceType: string;
      

      
    }

  


  


  
    /**
 * Coverage
 * 
 * Financial instrument which may be used to reimburse or pay for health care
 * products and services. Includes both insurance and self-payment.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Coverage.html}
 */
    export interface Coverage extends DomainResource {
      
      readonly resourceType: "Coverage";
      

      
        
          
  /**
 * The party who benefits from the insurance coverage; the patient when products
 * and/or services are provided.
 */
  beneficiary: Reference;
  _beneficiary?: Element | undefined;

        
      
        
          
  /**
 * A suite of underwriter specific classifiers.
 * For example may be used to identify a class of coverage or employer group,
 * Policy, Plan.
 */
  class?: Array<BackboneElement> | undefined;
  _class?: Element[] | undefined;

        
      
        
          
  /**
 * A short description for the class.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The type of classification for which an insurer-specific class label or number
 * and optional name is provided, for example may be used to identify a class of
 * coverage or employer group, Policy, Plan.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The alphanumeric string value associated with the insurer issued label.
 * For example, the Group or Plan number.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The policy(s) which constitute this insurance coverage.
 */
  contract?: Array<Reference> | undefined;
  _contract?: Element[] | undefined;

        
      
        
          
  /**
 * A suite of codes indicating the cost category and associated amount which have
 * been detailed in the policy and may have been  included on the health card.
 * For example by knowing the patient visit co-pay, the provider can collect the
 * amount prior to undertaking treatment.
 */
  costToBeneficiary?: Array<BackboneElement> | undefined;
  _costToBeneficiary?: Element[] | undefined;

        
      
        
          
  /**
 * A suite of codes indicating exceptions or reductions to patient costs and their
 * effective periods.
 */
  exception?: Array<BackboneElement> | undefined;
  _exception?: Element[] | undefined;

        
      
        
          
  /**
 * The timeframe during when the exception is in force.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The code for the specific exception.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The category of patient centric costs associated with treatment.
 * For example visit, specialist visits, emergency, inpatient care, etc.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * The amount due from the patient for the cost category.
 * Amount may be expressed as a percentage of the service/product cost or a fixed
 * amount of currency.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The amount due from the patient for the cost category.
 * Amount may be expressed as a percentage of the service/product cost or a fixed
 * amount of currency.
 */
  valueMoney?: Money | undefined;
  _valueMoney?: Element | undefined;

          
        
      
        
          
  /**
 * A unique identifier for a dependent under the coverage.
 * Periodically the member number is constructed from the subscriberId and the
 * dependant number.
 */
  dependent?: string | undefined;
  _dependent?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this coverage.
 * The main (and possibly only) identifier for the coverage - often referred to as
 * a Member Id, Certificate number, Personal Health Number or Case ID. May be
 * constructed as the concatenation of the Coverage.SubscriberID and the
 * Coverage.dependant.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The insurer-specific identifier for the insurer-defined network of providers to
 * which the beneficiary may seek treatment which will be covered at the
 * 'in-network' rate, otherwise 'out of network' terms and conditions apply.
 */
  network?: string | undefined;
  _network?: Element | undefined;

        
      
        
          
  /**
 * The order of applicability of this coverage relative to other coverages which
 * are currently in force. Note, there may be gaps in the numbering and this does
 * not imply primary, secondary etc. as the specific positioning of coverages
 * depends upon the episode of care.
 */
  order?: number | undefined;
  _order?: Element | undefined;

        
      
        
          
  /**
 * The program or plan underwriter or payor including both insurance and
 * non-insurance agreements, such as patient-pay agreements.
 * May provide multiple identifiers such as insurance company identifier or
 * business identifier (BIN number).
For selfpay it may provide multiple paying
 * persons and/or organizations.
 */
  payor: Array<Reference>;
  _payor?: Element[] | undefined;

        
      
        
          
  /**
 * Time period during which the coverage is in force. A missing start date
 * indicates the start date isn't known, a missing end date means the coverage is
 * continuing to be in force.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The party who 'owns' the insurance policy.
 * For example: may be an individual, corporation or the subscriber's employer.
 */
  policyHolder?: Reference | undefined;
  _policyHolder?: Element | undefined;

        
      
        
          
  /**
 * The relationship of beneficiary (patient) to the subscriber.
 * Typically, an individual uses policies which are theirs (relationship='self')
 * before policies owned by others.
 */
  relationship?: CodeableConcept | undefined;
  _relationship?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains the code
 * entered-in-error that marks the coverage as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * When 'subrogation=true' this insurance instance has been included not for
 * adjudication but to provide insurers with the details to recover costs.
 * Typically, automotive and worker's compensation policies would be flagged with
 * 'subrogation=true' to enable healthcare payors to collect against accident
 * claims.
 */
  subrogation?: boolean | undefined;
  _subrogation?: Element | undefined;

        
      
        
          
  /**
 * The party who has signed-up for or 'owns' the contractual relationship to the
 * policy or to whom the benefit of the policy for services rendered to them or
 * their family is due.
 * May be self or a parent in the case of dependants.
 */
  subscriber?: Reference | undefined;
  _subscriber?: Element | undefined;

        
      
        
          
  /**
 * The insurer assigned ID for the Subscriber.
 */
  subscriberId?: string | undefined;
  _subscriberId?: Element | undefined;

        
      
        
          
  /**
 * The type of coverage: social program, medical plan, accident coverage (workers
 * compensation, auto), group health or payment by an individual or organization.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * CoverageEligibilityRequest
 * 
 * The CoverageEligibilityRequest provides patient and insurance coverage
 * information to an insurer for them to respond, in the form of an
 * CoverageEligibilityResponse, with information regarding whether the stated
 * coverage is valid and in-force and optionally to provide the insurance details
 * of the policy.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CoverageEligibilityRequest.html}
 */
    export interface CoverageEligibilityRequest extends DomainResource {
      
      readonly resourceType: "CoverageEligibilityRequest";
      

      
        
          
  /**
 * The date when this resource was created.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * Person who created the request.
 */
  enterer?: Reference | undefined;
  _enterer?: Element | undefined;

        
      
        
          
  /**
 * Facility where the services are intended to be provided.
 */
  facility?: Reference | undefined;
  _facility?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this coverage eligiblity request.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Financial instruments for reimbursement for the health care products and
 * services.
 * All insurance coverages for the patient which may be applicable for
 * reimbursement, of the products and services listed in the claim, are typically
 * provided in the claim to allow insurers to confirm the ordering of the insurance
 * coverages relative to local 'coordination of benefit' rules. One coverage (and
 * only one) with 'focal=true' is to be used in the adjudication of this claim.
 * Coverages appearing before the focal Coverage in the list, and where
 * 'subrogation=false', should provide a reference to the ClaimResponse containing
 * the adjudication results of the prior claim.
 */
  insurance?: Array<BackboneElement> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * A business agreement number established between the provider and the insurer for
 * special business processing purposes.
 */
  businessArrangement?: string | undefined;
  _businessArrangement?: Element | undefined;

        
      
        
          
  /**
 * Reference to the insurance card level information contained in the Coverage
 * resource. The coverage issuing insurer will use these details to locate the
 * patient's actual coverage within the insurer's information system.
 */
  coverage: Reference;
  _coverage?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that this Coverage is to be used for evaluation of this
 * request when set to true.
 * A patient may (will) have multiple insurance policies which provide reimburement
 * for healthcare services and products. For example a person may also be covered
 * by their spouse's policy and both appear in the list (and may be from the same
 * insurer). This flag will be set to true for only one of the listed policies and
 * that policy will be used for evaluating this request. Other requests would be
 * created to request evaluation against the other listed policies.
 */
  focal?: boolean | undefined;
  _focal?: Element | undefined;

        
      
        
          
  /**
 * The Insurer who issued the coverage in question and is the recipient of the
 * request.
 */
  insurer: Reference;
  _insurer?: Element | undefined;

        
      
        
          
  /**
 * Service categories or billable services for which benefit details and/or an
 * authorization prior to service delivery may be required by the payor.
 */
  item?: Array<BackboneElement> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * The plan/proposal/order describing the proposed service in detail.
 */
  detail?: Array<Reference> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * Patient diagnosis for which care is sought.
 */
  diagnosis?: Array<BackboneElement> | undefined;
  _diagnosis?: Element[] | undefined;

        
      
        
          
            
  /**
 * The nature of illness or problem in a coded form or as a reference to an
 * external defined Condition.
 */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  _diagnosisCodeableConcept?: Element | undefined;

          
            
  /**
 * The nature of illness or problem in a coded form or as a reference to an
 * external defined Condition.
 */
  diagnosisReference?: Reference | undefined;
  _diagnosisReference?: Element | undefined;

          
        
      
        
          
  /**
 * Facility where the services will be provided.
 */
  facility?: Reference | undefined;
  _facility?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or out of office hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * This contains the product, service, drug or other billing code for the item.
 * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS,
 * USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
 */
  productOrService?: CodeableConcept | undefined;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * The practitioner who is responsible for the product or service to be rendered to
 * the patient.
 */
  provider?: Reference | undefined;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Exceptions, special conditions and supporting information applicable for this
 * service or product line.
 */
  supportingInfoSequence?: Array<number> | undefined;
  _supportingInfoSequence?: Element[] | undefined;

        
      
        
          
  /**
 * The amount charged to the patient by the provider for a single unit.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * The party who is the beneficiary of the supplied coverage and for whom
 * eligibility is sought.
 * 1..1.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * When the requestor expects the processor to complete processing.
 */
  priority?: CodeableConcept | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * The provider which is responsible for the request.
 * Typically this field would be 1..1 where this party is responsible for the
 * eligibility request but not necessarily professionally responsible for the
 * provision of the individual products and services listed below.
 */
  provider?: Reference | undefined;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * Code to specify whether requesting: prior authorization requirements for some
 * service categories or billing codes; benefits for coverages specified or
 * discovered; discovery and return of coverages for the patient; and/or validation
 * that the specified coverage is in-force at the date/period specified or 'now' if
 * not specified.
 */
  purpose: Array<string>;
  _purpose?: Element[] | undefined;

        
      
        
          
            
  /**
 * The date or dates when the enclosed suite of services were performed or
 * completed.
 */
  servicedDate?: string | undefined;
  _servicedDate?: Element | undefined;

          
            
  /**
 * The date or dates when the enclosed suite of services were performed or
 * completed.
 */
  servicedPeriod?: Period | undefined;
  _servicedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Additional information codes regarding exceptions, special considerations, the
 * condition, situation, prior or concurrent issues.
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
  supportingInfo?: Array<BackboneElement> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
        
          
  /**
 * The supporting materials are applicable for all detail items, product/servce
 * categories and specific billing codes.
 */
  appliesToAll?: boolean | undefined;
  _appliesToAll?: Element | undefined;

        
      
        
          
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  information: Reference;
  _information?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify supporting information entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
    }

  


  
    /**
 * CoverageEligibilityResponse
 * 
 * This resource provides eligibility and plan details from the processing of an
 * CoverageEligibilityRequest resource.
 * 
 * @see {@link http://hl7.org/fhir/R4B/CoverageEligibilityResponse.html}
 */
    export interface CoverageEligibilityResponse extends DomainResource {
      
      readonly resourceType: "CoverageEligibilityResponse";
      

      
        
          
  /**
 * The date this resource was created.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * A human readable description of the status of the adjudication.
 */
  disposition?: string | undefined;
  _disposition?: Element | undefined;

        
      
        
          
  /**
 * Errors encountered during the processing of the request.
 */
  error?: Array<BackboneElement> | undefined;
  _error?: Element[] | undefined;

        
      
        
          
  /**
 * An error code,from a specified code system, which details why the eligibility
 * check could not be performed.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A code for the form to be used for printing the content.
 * May be needed to identify specific jurisdictional forms.
 */
  form?: CodeableConcept | undefined;
  _form?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this coverage eligiblity request.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Financial instruments for reimbursement for the health care products and
 * services.
 * All insurance coverages for the patient which may be applicable for
 * reimbursement, of the products and services listed in the claim, are typically
 * provided in the claim to allow insurers to confirm the ordering of the insurance
 * coverages relative to local 'coordination of benefit' rules. One coverage (and
 * only one) with 'focal=true' is to be used in the adjudication of this claim.
 * Coverages appearing before the focal Coverage in the list, and where
 * 'subrogation=false', should provide a reference to the ClaimResponse containing
 * the adjudication results of the prior claim.
 */
  insurance?: Array<BackboneElement> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * The term of the benefits documented in this response.
 */
  benefitPeriod?: Period | undefined;
  _benefitPeriod?: Element | undefined;

        
      
        
          
  /**
 * Reference to the insurance card level information contained in the Coverage
 * resource. The coverage issuing insurer will use these details to locate the
 * patient's actual coverage within the insurer's information system.
 */
  coverage: Reference;
  _coverage?: Element | undefined;

        
      
        
          
  /**
 * Flag indicating if the coverage provided is inforce currently if no service
 * date(s) specified or for the whole duration of the service dates.
 */
  inforce?: boolean | undefined;
  _inforce?: Element | undefined;

        
      
        
          
  /**
 * Benefits and optionally current balances, and authorization details by category
 * or service.
 */
  item?: Array<BackboneElement> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * A boolean flag indicating whether a preauthorization is required prior to actual
 * service delivery.
 */
  authorizationRequired?: boolean | undefined;
  _authorizationRequired?: Element | undefined;

        
      
        
          
  /**
 * Codes or comments regarding information or actions associated with the
 * preauthorization.
 */
  authorizationSupporting?: Array<CodeableConcept> | undefined;
  _authorizationSupporting?: Element[] | undefined;

        
      
        
          
  /**
 * A web location for obtaining requirements or descriptive information regarding
 * the preauthorization.
 */
  authorizationUrl?: string | undefined;
  _authorizationUrl?: Element | undefined;

        
      
        
          
  /**
 * Benefits used to date.
 */
  benefit?: Array<BackboneElement> | undefined;
  _benefit?: Element[] | undefined;

        
      
        
          
            
  /**
 * The quantity of the benefit which is permitted under the coverage.
 */
  allowedUnsignedInt?: unsignedInt | undefined;
  _allowedUnsignedInt?: Element | undefined;

          
            
  /**
 * The quantity of the benefit which is permitted under the coverage.
 */
  allowedString?: string | undefined;
  _allowedString?: Element | undefined;

          
            
  /**
 * The quantity of the benefit which is permitted under the coverage.
 */
  allowedMoney?: Money | undefined;
  _allowedMoney?: Element | undefined;

          
        
      
        
          
  /**
 * Classification of benefit being provided.
 * For example: deductible, visits, benefit amount.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * The quantity of the benefit which have been consumed to date.
 */
  usedUnsignedInt?: unsignedInt | undefined;
  _usedUnsignedInt?: Element | undefined;

          
            
  /**
 * The quantity of the benefit which have been consumed to date.
 */
  usedString?: string | undefined;
  _usedString?: Element | undefined;

          
            
  /**
 * The quantity of the benefit which have been consumed to date.
 */
  usedMoney?: Money | undefined;
  _usedMoney?: Element | undefined;

          
        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A richer description of the benefit or services covered.
 * For example 'DENT2 covers 100% of basic, 50% of major but excludes Ortho,
 * Implants and Cosmetic services'.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * True if the indicated class of service is excluded from the plan, missing or
 * False indicates the product or service is included in the coverage.
 */
  excluded?: boolean | undefined;
  _excluded?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example in Oral whether the treatment is cosmetic or associated with TMJ, or
 * for Medical whether the treatment was outside the clinic or out of office hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * A short name or tag for the benefit.
 * For example: MED01, or DENT2.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Is a flag to indicate whether the benefits refer to in-network providers or
 * out-of-network providers.
 */
  network?: CodeableConcept | undefined;
  _network?: Element | undefined;

        
      
        
          
  /**
 * This contains the product, service, drug or other billing code for the item.
 * Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS,
 * USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
 */
  productOrService?: CodeableConcept | undefined;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * The practitioner who is eligible for the provision of the product or service.
 */
  provider?: Reference | undefined;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * The term or period of the values such as 'maximum lifetime benefit' or 'maximum
 * annual visits'.
 */
  term?: CodeableConcept | undefined;
  _term?: Element | undefined;

        
      
        
          
  /**
 * Indicates if the benefits apply to an individual or to the family.
 */
  unit?: CodeableConcept | undefined;
  _unit?: Element | undefined;

        
      
        
          
  /**
 * The Insurer who issued the coverage in question and is the author of the
 * response.
 */
  insurer: Reference;
  _insurer?: Element | undefined;

        
      
        
          
  /**
 * The outcome of the request processing.
 * The resource may be used to indicate that: the request has been held (queued)
 * for processing; that it has been processed and errors found (error); that no
 * errors were found and that some of the adjudication has been undertaken
 * (partial) or that all of the adjudication has been undertaken (complete).
 */
  outcome: string;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * The party who is the beneficiary of the supplied coverage and for whom
 * eligibility is sought.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * A reference from the Insurer to which these services pertain to be used on
 * further communication and as proof that the request occurred.
 */
  preAuthRef?: string | undefined;
  _preAuthRef?: Element | undefined;

        
      
        
          
  /**
 * Code to specify whether requesting: prior authorization requirements for some
 * service categories or billing codes; benefits for coverages specified or
 * discovered; discovery and return of coverages for the patient; and/or validation
 * that the specified coverage is in-force at the date/period specified or 'now' if
 * not specified.
 */
  purpose: Array<string>;
  _purpose?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to the original request resource.
 */
  request: Reference;
  _request?: Element | undefined;

        
      
        
          
  /**
 * The provider which is responsible for the request.
 * Typically this field would be 1..1 where this party is responsible for the claim
 * but not necessarily professionally responsible for the provision of the
 * individual products and services listed below.
 */
  requestor?: Reference | undefined;
  _requestor?: Element | undefined;

        
      
        
          
            
  /**
 * The date or dates when the enclosed suite of services were performed or
 * completed.
 */
  servicedDate?: string | undefined;
  _servicedDate?: Element | undefined;

          
            
  /**
 * The date or dates when the enclosed suite of services were performed or
 * completed.
 */
  servicedPeriod?: Period | undefined;
  _servicedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * DataRequirement
 * 
 * Base StructureDefinition for DataRequirement Type: Describes a required data
 * item for evaluation in terms of the type of data, and optional code or
 * date-based filters of the data.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DataRequirement.html}
 */
    export interface DataRequirement extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Code filters specify additional constraints on the data, specifying the value
 * set of interest for a particular element of the data. Each code filter defines
 * an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
 */
  codeFilter?: Array<Element> | undefined;
  _codeFilter?: Element[] | undefined;

        
      
        
          
  /**
 * The codes for the code filter. If values are given, the filter will return only
 * those data items for which the code-valued attribute specified by the path has a
 * value that is one of the specified codes. If codes are specified in addition to
 * a value set, the filter returns items matching a code in the value set or one of
 * the specified codes.
 */
  code?: Array<Coding> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * The code-valued attribute of the filter. The specified path SHALL be a FHIRPath
 * resolveable on the specified type of the DataRequirement, and SHALL consist only
 * of identifiers, constant indexers, and .resolve(). The path is allowed to
 * contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to
 * traverse multiple-cardinality sub-elements (see the [Simple FHIRPath
 * Profile](fhirpath.html#simple) for full details). Note that the index must be an
 * integer constant. The path must resolve to an element of type code, Coding, or
 * CodeableConcept.
 * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple)
 * that allows path traversal, but not calculation.
 */
  path?: string | undefined;
  _path?: Element | undefined;

        
      
        
          
  /**
 * A token parameter that refers to a search parameter defined on the specified
 * type of the DataRequirement, and which searches on elements of type code,
 * Coding, or CodeableConcept.
 */
  searchParam?: string | undefined;
  _searchParam?: Element | undefined;

        
      
        
          
  /**
 * The valueset for the code filter. The valueSet and code elements are additive.
 * If valueSet is specified, the filter will return only those data items for which
 * the value of the code-valued element specified in the path is a member of the
 * specified valueset.
 */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;

        
      
        
          
  /**
 * Date filters specify additional constraints on the data in terms of the
 * applicable date range for specific elements. Each date filter specifies an
 * additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
 */
  dateFilter?: Array<Element> | undefined;
  _dateFilter?: Element[] | undefined;

        
      
        
          
  /**
 * The date-valued attribute of the filter. The specified path SHALL be a FHIRPath
 * resolveable on the specified type of the DataRequirement, and SHALL consist only
 * of identifiers, constant indexers, and .resolve(). The path is allowed to
 * contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to
 * traverse multiple-cardinality sub-elements (see the [Simple FHIRPath
 * Profile](fhirpath.html#simple) for full details). Note that the index must be an
 * integer constant. The path must resolve to an element of type date, dateTime,
 * Period, Schedule, or Timing.
 * The path attribute contains a [Simple FHIR Subset](fhirpath.html#simple) that
 * allows path traversal, but not calculation.
 */
  path?: string | undefined;
  _path?: Element | undefined;

        
      
        
          
  /**
 * A date parameter that refers to a search parameter defined on the specified type
 * of the DataRequirement, and which searches on elements of type date, dateTime,
 * Period, Schedule, or Timing.
 */
  searchParam?: string | undefined;
  _searchParam?: Element | undefined;

        
      
        
          
            
  /**
 * The value of the filter. If period is specified, the filter will return only
 * those data items that fall within the bounds determined by the Period, inclusive
 * of the period boundaries. If dateTime is specified, the filter will return only
 * those data items that are equal to the specified dateTime. If a Duration is
 * specified, the filter will return only those data items that fall within
 * Duration before now.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The value of the filter. If period is specified, the filter will return only
 * those data items that fall within the bounds determined by the Period, inclusive
 * of the period boundaries. If dateTime is specified, the filter will return only
 * those data items that are equal to the specified dateTime. If a Duration is
 * specified, the filter will return only those data items that fall within
 * Duration before now.
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
            
  /**
 * The value of the filter. If period is specified, the filter will return only
 * those data items that fall within the bounds determined by the Period, inclusive
 * of the period boundaries. If dateTime is specified, the filter will return only
 * those data items that are equal to the specified dateTime. If a Duration is
 * specified, the filter will return only those data items that fall within
 * Duration before now.
 */
  valueDuration?: Duration | undefined;
  _valueDuration?: Element | undefined;

          
        
      
        
          
  /**
 * Specifies a maximum number of results that are required (uses the _count search
 * parameter).
 * This element can be used in combination with the sort element to specify quota
 * requirements such as "the most recent 5" or "the highest 5".
 */
  limit?: number | undefined;
  _limit?: Element | undefined;

        
      
        
          
  /**
 * Indicates that specific elements of the type are referenced by the knowledge
 * module and must be supported by the consumer in order to obtain an effective
 * evaluation. This does not mean that a value is required for this element, only
 * that the consuming system must understand the element and be able to provide
 * values for it if they are available. 

The value of mustSupport SHALL be a
 * FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist
 * only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath
 * Profile](fhirpath.html#simple) for full details).
 */
  mustSupport?: Array<string> | undefined;
  _mustSupport?: Element[] | undefined;

        
      
        
          
  /**
 * The profile of the required data, specified as the uri of the profile
 * definition.
 */
  profile?: Array<string> | undefined;
  _profile?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies the order of the results to be returned.
 * This element can be used in combination with the sort element to specify quota
 * requirements such as "the most recent 5" or "the highest 5". When multiple sorts
 * are specified, they are applied in the order they appear in the resource.
 */
  sort?: Array<Element> | undefined;
  _sort?: Element[] | undefined;

        
      
        
          
  /**
 * The direction of the sort, ascending or descending.
 */
  direction: string;
  _direction?: Element | undefined;

        
      
        
          
  /**
 * The attribute of the sort. The specified path must be resolvable from the type
 * of the required data. The path is allowed to contain qualifiers (.) to traverse
 * sub-elements, as well as indexers ([x]) to traverse multiple-cardinality
 * sub-elements. Note that the index must be an integer constant.
 */
  path: string;
  _path?: Element | undefined;

        
      
        
          
            
  /**
 * The intended subjects of the data requirement. If this element is not provided,
 * a Patient subject is assumed.
 * The subject of a data requirement is critical, as the data being specified is
 * determined with respect to a particular subject. This corresponds roughly to the
 * notion of a Compartment in that it limits what data is available based on its
 * relationship to the subject. In CQL, this corresponds to the context
 * declaration.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * The intended subjects of the data requirement. If this element is not provided,
 * a Patient subject is assumed.
 * The subject of a data requirement is critical, as the data being specified is
 * determined with respect to a particular subject. This corresponds roughly to the
 * notion of a Compartment in that it limits what data is available based on its
 * relationship to the subject. In CQL, this corresponds to the context
 * declaration.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
        
      
        
          
  /**
 * The type of the required data, specified as the type name of a resource. For
 * profiles, this value is set to the type of the base resource of the profile.
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * DataType
 * 
 * Base StructureDefinition for DataType Type: The base class for all re-useable
 * types defined as part of the FHIR Specification.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DataType.html}
 */
    export interface DataType extends Element {
      
      readonly resourceType: string;
      

      
    }

  


  


  


  


  


  


  
    /**
 * Definition
 * 
 * Logical Model: A pattern to be followed by resources that represent a specific
 * proposal, plan and/or order for some sort of action or service.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Definition.html}
 */
    export interface Definition {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The date on which the asset content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The date may be more recent than the approval date because of minor changes /
 * editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the {{title}} and/or its contents. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * {{title}}.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * For draft definitions, indicates the date of initial creation.  For active
 * definitions, represents the date of activation.  For withdrawn definitions,
 * indicates the date of withdrawal.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * The canonical URL pointing to another FHIR-defined protocol, guideline, orderset
 * or other definition that is adhered to in whole or in part by this definition.
 */
  derivedFromCanonical?: Array<string> | undefined;
  _derivedFromCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this definition.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  derivedFromUri?: Array<string> | undefined;
  _derivedFromUri?: Element[] | undefined;

        
      
        
          
  /**
 * A free text natural language description of the {{title}} from the consumer's
 * perspective.
 * This description can be used to capture details such as why the {{title}} was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the module as conveyed in the text field of the resource itself. This item
 * SHOULD be populated unless the information is available from context.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The period during which the {{title}} content was or is planned to be effective.
 * The effective period for a {{title}}  determines when the content is applicable
 * for usage and is independent of publication and review dates. For example, a
 * measure intended to be used for the year 2016 would be published in 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that this {{title}} is authored for testing purposes (or
 * education/evaluation/marketing), and is not intended to be used for genuine
 * usage.
 * Allows filtering of {{title}} that are appropriate for use vs. not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this {{title}} by the performer and/or other
 * systems.  These identifiers remain constant as the resource is updated and
 * propagates from server to server.
 * Note: This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * A jurisdiction in which the {{title}} is intended to be used.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the asset content was last reviewed. Review happens
 * periodically after that, but doesn't change the original approval date.
 * If specified, this is usually after the approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A larger definition of which this particular definition is a component or step.
 * [The allowed reference resources may be adjusted as appropriate for the event
 * resource].
 */
  partOf?: Array<string> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * The type of individual that is expected to act upon instances of this
 * definition.
 */
  performerType?: CodeableConcept | undefined;
  _performerType?: Element | undefined;

        
      
        
          
  /**
 * Helps establish the "authority/credibility" of the {{title}}.  May also allow
 * for contact.
 */
  publisher?: Reference | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explains why this {{title}} is needed and why it has been designed as it has.
 * This element does not describe the usage of the {{title}}.  Rather it is for
 * traceability of ''why'' the resource is either needed or ''why'' it is defined
 * as it is.  This may be used to point to source materials or specifications that
 * drove the structure of this {{title}}.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Completed or terminated request(s) whose function is taken by this new request.
 */
  replaces?: Array<string> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
  /**
 * The current state of the {{title}}.
 * A nominal state-transition diagram can be found in the
 * [[definition.html#statemachine | Definition pattern]] documentation

Unknown
 * does not represent "other" - one of the defined statuses must apply.  Unknown is
 * used when the authoring system is not sure what the current status is.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * A code or group definition that describes the intended subject of instantiations
 * of this definition.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * A code or group definition that describes the intended subject of instantiations
 * of this definition.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the {{title}}.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URL that is used to identify this {{title}} when it is referenced in
 * a specification, model, design or an instance. This SHALL be a URL, SHOULD be
 * globally unique, and SHOULD be an address at which this {{title}} is (or will
 * be) published. The URL SHOULD include the major version of the {{title}}. For
 * more information see [Technical and Business Versions](resource.html#versions).
 * Can be a urn:uuid: or a urn:oid:, but real http: addresses are preferred.  This
 * is the URI that will be used when making canonical references to this resource.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These terms may be used to assist with indexing and searching
 * of code system definitions.
 * When multiple usageContexts are specified, there is no expectation for whether
 * all or any of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the {{title}} when it is
 * referenced in a specification, model, design or instance. This is an arbitrary
 * value managed by the {{title}} author and is not expected to be globally unique.
 * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
 * available. There is also no expectation that versions are orderable.
 * There may be multiple different instances of a {{title}} that have the same
 * identifier but different versions.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * DetectedIssue
 * 
 * Indicates an actual or potential clinical issue with or between one or more
 * active or proposed clinical actions for a patient; e.g. Drug-drug interaction,
 * Ineffective treatment frequency, Procedure-condition conflict, etc.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DetectedIssue.html}
 */
    export interface DetectedIssue extends DomainResource {
      
      readonly resourceType: "DetectedIssue";
      

      
        
          
  /**
 * Individual or device responsible for the issue being raised.  For example, a
 * decision support application or a pharmacist conducting a medication review.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * Identifies the general type of issue identified.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A textual explanation of the detected issue.
 * Should focus on information not covered elsewhere as discrete data - no need to
 * duplicate the narrative.
 */
  detail?: string | undefined;
  _detail?: Element | undefined;

        
      
        
          
  /**
 * Supporting evidence or manifestations that provide the basis for identifying the
 * detected issue such as a GuidanceResponse or MeasureReport.
 */
  evidence?: Array<BackboneElement> | undefined;
  _evidence?: Element[] | undefined;

        
      
        
          
  /**
 * A manifestation that led to the recording of this detected issue.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * Links to resources that constitute evidence for the detected issue such as a
 * GuidanceResponse or MeasureReport.
 */
  detail?: Array<Reference> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
            
  /**
 * The date or period when the detected issue was initially identified.
 */
  identifiedDateTime?: string | undefined;
  _identifiedDateTime?: Element | undefined;

          
            
  /**
 * The date or period when the detected issue was initially identified.
 */
  identifiedPeriod?: Period | undefined;
  _identifiedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Business identifier associated with the detected issue record.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the resource representing the current activity or proposed activity
 * that is potentially problematic.
 * There's an implicit constraint on the number of implicated resources based on
 * DetectedIssue.type; e.g. For drug-drug, there would be more than one.  For
 * timing, there would typically only be one.
 */
  implicated?: Array<Reference> | undefined;
  _implicated?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates an action that has been taken or is committed to reduce or eliminate
 * the likelihood of the risk identified by the detected issue from manifesting.
 * Can also reflect an observation of known mitigating factors that may
 * reduce/eliminate the need for any action.
 */
  mitigation?: Array<BackboneElement> | undefined;
  _mitigation?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the action that was taken or the observation that was made that
 * reduces/eliminates the risk associated with the identified issue.
 * The "text" component can be used for detail or when no appropriate code exists.
 */
  action: CodeableConcept;
  _action?: Element | undefined;

        
      
        
          
  /**
 * Identifies the practitioner who determined the mitigation and takes
 * responsibility for the mitigation step occurring.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * Indicates when the mitigating action was documented.
 * This might not be the same as when the mitigating step was actually taken.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Indicates the patient whose record the detected issue is associated with.
 */
  patient?: Reference | undefined;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The literature, knowledge-base or similar reference that describes the
 * propensity for the detected issue identified.
 */
  reference?: string | undefined;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * Indicates the degree of importance associated with the identified issue based on
 * the potential impact on the patient.
 */
  severity?: string | undefined;
  _severity?: Element | undefined;

        
      
        
          
  /**
 * Indicates the status of the detected issue.
 * This element is labeled as a modifier because the status contains the codes
 * cancelled and entered-in-error that mark the issue as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  
    /**
 * Device
 * 
 * A type of a manufactured item that is used in the provision of healthcare
 * without being substantially changed through that activity. The device may be a
 * medical or non-medical device.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Device.html}
 */
    export interface Device extends DomainResource {
      
      readonly resourceType: "Device";
      

      
        
          
  /**
 * Contact details for an organization or a particular human that is responsible
 * for the device.
 * used for troubleshooting etc.
 */
  contact?: Array<ContactPoint> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The reference to the definition for the device.
 */
  definition?: Reference | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * This represents the manufacturer's name of the device as provided by the device,
 * from a UDI label, or by a person describing the Device.  This typically would be
 * used when a person provides the name(s) or when the device represents one of the
 * names available from DeviceDefinition.
 */
  deviceName?: Array<BackboneElement> | undefined;
  _deviceName?: Element[] | undefined;

        
      
        
          
  /**
 * The name that identifies the device.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The type of deviceName.
UDILabelName | UserFriendlyName | PatientReportedName |
 * ManufactureDeviceName | ModelName.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The distinct identification string as required by regulation for a human cell,
 * tissue, or cellular and tissue-based product.
 * For example, this applies to devices in the United States regulated under *Code
 * of Federal Regulation 21CFR§1271.290(c)*.
 */
  distinctIdentifier?: string | undefined;
  _distinctIdentifier?: Element | undefined;

        
      
        
          
  /**
 * The date and time beyond which this device is no longer valid or should not be
 * used (if applicable).
 */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;

        
      
        
          
  /**
 * Unique instance identifiers assigned to a device by manufacturers other
 * organizations or owners.
 * The barcode string from a barcode present on a device label or package may
 * identify the instance, include names given to the device in local usage, or may
 * identify the type of device. If the identifier identifies the type of device,
 * Device.type element should be used.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The place where the device can be found.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Lot number assigned by the manufacturer.
 */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;

        
      
        
          
  /**
 * The date and time when the device was manufactured.
 */
  manufactureDate?: string | undefined;
  _manufactureDate?: Element | undefined;

        
      
        
          
  /**
 * A name of the manufacturer.
 */
  manufacturer?: string | undefined;
  _manufacturer?: Element | undefined;

        
      
        
          
  /**
 * The manufacturer's model number for the device.
 */
  modelNumber?: string | undefined;
  _modelNumber?: Element | undefined;

        
      
        
          
  /**
 * Descriptive information, usage information or implantation information that is
 * not captured in an existing element.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * An organization that is responsible for the provision and ongoing maintenance of
 * the device.
 */
  owner?: Reference | undefined;
  _owner?: Element | undefined;

        
      
        
          
  /**
 * The device that this device is attached to or is part of.
 */
  parent?: Reference | undefined;
  _parent?: Element | undefined;

        
      
        
          
  /**
 * The part number or catalog number of the device.
 * Alphanumeric Maximum 20.
 */
  partNumber?: string | undefined;
  _partNumber?: Element | undefined;

        
      
        
          
  /**
 * Patient information, If the device is affixed to a person.
 */
  patient?: Reference | undefined;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The actual configuration settings of a device as it actually operates, e.g.,
 * regulation status, time properties.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Property value as a code, e.g., NTP4 (synced to NTP).
 */
  valueCode?: Array<CodeableConcept> | undefined;
  _valueCode?: Element[] | undefined;

        
      
        
          
  /**
 * Property value as a quantity.
 */
  valueQuantity?: Array<Quantity> | undefined;
  _valueQuantity?: Element[] | undefined;

        
      
        
          
  /**
 * Provides additional safety characteristics about a medical device.  For example
 * devices containing latex.
 */
  safety?: Array<CodeableConcept> | undefined;
  _safety?: Element[] | undefined;

        
      
        
          
  /**
 * The serial number assigned by the organization when the device was manufactured.
 * Alphanumeric Maximum 20.
 */
  serialNumber?: string | undefined;
  _serialNumber?: Element | undefined;

        
      
        
          
  /**
 * The capabilities supported on a  device, the standards to which the device
 * conforms for a particular purpose, and used for the communication.
 */
  specialization?: Array<BackboneElement> | undefined;
  _specialization?: Element[] | undefined;

        
      
        
          
  /**
 * The standard that is used to operate and communicate.
 */
  systemType: CodeableConcept;
  _systemType?: Element | undefined;

        
      
        
          
  /**
 * The version of the standard that is used to operate and communicate.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * Status of the Device availability.
 * This element is labeled as a modifier because the status contains the codes
 * inactive and entered-in-error that mark the device (record)as not currently
 * valid.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Reason for the dtatus of the Device availability.
 */
  statusReason?: Array<CodeableConcept> | undefined;
  _statusReason?: Element[] | undefined;

        
      
        
          
  /**
 * The kind or type of device.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Unique device identifier (UDI) assigned to device label or package.  Note that
 * the Device may include multiple udiCarriers as it either may include just the
 * udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it
 * could have been sold.
 * UDI may identify an unique instance of a device, or it may only identify the
 * type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete
 * mapping of UDI parts to Device.
 */
  udiCarrier?: Array<BackboneElement> | undefined;
  _udiCarrier?: Element[] | undefined;

        
      
        
          
  /**
 * The full UDI carrier of the Automatic Identification and Data Capture (AIDC)
 * technology representation of the barcode string as printed on the packaging of
 * the device - e.g., a barcode or RFID.   Because of limitations on character sets
 * in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be
 * base64 encoded.
 * The AIDC form of UDIs should be scanned or otherwise used for the identification
 * of the device whenever possible to minimize errors in records resulting from
 * manual transcriptions. If separate barcodes for DI and PI are present,
 * concatenate the string with DI first and in order of human readable expression
 * on label.
 */
  carrierAIDC?: string | undefined;
  _carrierAIDC?: Element | undefined;

        
      
        
          
  /**
 * The full UDI carrier as the human readable form (HRF) representation of the
 * barcode string as printed on the packaging of the device.
 * If separate barcodes for DI and PI are present, concatenate the string with DI
 * first and in order of human readable expression on label.
 */
  carrierHRF?: string | undefined;
  _carrierHRF?: Element | undefined;

        
      
        
          
  /**
 * The device identifier (DI) is a mandatory, fixed portion of a UDI that
 * identifies the labeler and the specific version or model of a device.
 */
  deviceIdentifier?: string | undefined;
  _deviceIdentifier?: Element | undefined;

        
      
        
          
  /**
 * A coded entry to indicate how the data was entered.
 */
  entryType?: string | undefined;
  _entryType?: Element | undefined;

        
      
        
          
  /**
 * Organization that is charged with issuing UDIs for devices.  For example, the US
 * FDA issuers include :
1) GS1: 
http://hl7.org/fhir/NamingSystem/gs1-di, 
2)
 * HIBCC:
http://hl7.org/fhir/NamingSystem/hibcc-dI, 
3) ICCBBA for blood
 * containers:
http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
4) ICCBA for
 * other devices:
http://hl7.org/fhir/NamingSystem/iccbba-other-di.
 */
  issuer?: string | undefined;
  _issuer?: Element | undefined;

        
      
        
          
  /**
 * The identity of the authoritative source for UDI generation within a
 * jurisdiction.  All UDIs are globally unique within a single namespace with the
 * appropriate repository uri as the system.  For example,  UDIs of devices managed
 * in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
 */
  jurisdiction?: string | undefined;
  _jurisdiction?: Element | undefined;

        
      
        
          
  /**
 * A network address on which the device may be contacted directly.
 * If the device is running a FHIR server, the network address should  be the Base
 * URL from which a conformance statement may be retrieved.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The actual design of the device or software version running on the device.
 */
  version?: Array<BackboneElement> | undefined;
  _version?: Element[] | undefined;

        
      
        
          
  /**
 * A single component of the device version.
 */
  component?: Identifier | undefined;
  _component?: Element | undefined;

        
      
        
          
  /**
 * The type of the device version, e.g. manufacturer, approved, internal.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The version text.
 */
  value: string;
  _value?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * DeviceDefinition
 * 
 * The characteristics, operational status and capabilities of a medical-related
 * component of a medical device.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DeviceDefinition.html}
 */
    export interface DeviceDefinition extends DomainResource {
      
      readonly resourceType: "DeviceDefinition";
      

      
        
          
  /**
 * Device capabilities.
 */
  capability?: Array<BackboneElement> | undefined;
  _capability?: Element[] | undefined;

        
      
        
          
  /**
 * Description of capability.
 */
  description?: Array<CodeableConcept> | undefined;
  _description?: Element[] | undefined;

        
      
        
          
  /**
 * Type of capability.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Contact details for an organization or a particular human that is responsible
 * for the device.
 * used for troubleshooting etc.
 */
  contact?: Array<ContactPoint> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A name given to the device to identify it.
 */
  deviceName?: Array<BackboneElement> | undefined;
  _deviceName?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the device.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The type of deviceName.
UDILabelName | UserFriendlyName | PatientReportedName |
 * ManufactureDeviceName | ModelName.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Unique instance identifiers assigned to a device by the software, manufacturers,
 * other organizations or owners. For example: handle ID.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Language code for the human-readable text strings produced by the device (all
 * supported).
 */
  languageCode?: Array<CodeableConcept> | undefined;
  _languageCode?: Element[] | undefined;

        
      
        
          
            
  /**
 * A name of the manufacturer.
 */
  manufacturerString?: string | undefined;
  _manufacturerString?: Element | undefined;

          
            
  /**
 * A name of the manufacturer.
 */
  manufacturerReference?: Reference | undefined;
  _manufacturerReference?: Element | undefined;

          
        
      
        
          
  /**
 * A substance used to create the material(s) of which the device is made.
 */
  material?: Array<BackboneElement> | undefined;
  _material?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the substance is a known or suspected allergen.
 */
  allergenicIndicator?: boolean | undefined;
  _allergenicIndicator?: Element | undefined;

        
      
        
          
  /**
 * Indicates an alternative material of the device.
 */
  alternate?: boolean | undefined;
  _alternate?: Element | undefined;

        
      
        
          
  /**
 * The substance.
 */
  substance: CodeableConcept;
  _substance?: Element | undefined;

        
      
        
          
  /**
 * The model number for the device.
 */
  modelNumber?: string | undefined;
  _modelNumber?: Element | undefined;

        
      
        
          
  /**
 * Descriptive information, usage information or implantation information that is
 * not captured in an existing element.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Access to on-line information about the device.
 */
  onlineInformation?: string | undefined;
  _onlineInformation?: Element | undefined;

        
      
        
          
  /**
 * An organization that is responsible for the provision and ongoing maintenance of
 * the device.
 */
  owner?: Reference | undefined;
  _owner?: Element | undefined;

        
      
        
          
  /**
 * The parent device it can be part of.
 */
  parentDevice?: Reference | undefined;
  _parentDevice?: Element | undefined;

        
      
        
          
  /**
 * Dimensions, color etc.
 */
  physicalCharacteristics?: ProdCharacteristic | undefined;
  _physicalCharacteristics?: Element | undefined;

        
      
        
          
  /**
 * The actual configuration settings of a device as it actually operates, e.g.,
 * regulation status, time properties.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Property value as a code, e.g., NTP4 (synced to NTP).
 */
  valueCode?: Array<CodeableConcept> | undefined;
  _valueCode?: Element[] | undefined;

        
      
        
          
  /**
 * Property value as a quantity.
 */
  valueQuantity?: Array<Quantity> | undefined;
  _valueQuantity?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity of the device present in the packaging (e.g. the number of devices
 * present in a pack, or the number of devices in the same package of the medicinal
 * product).
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Safety characteristics of the device.
 */
  safety?: Array<CodeableConcept> | undefined;
  _safety?: Element[] | undefined;

        
      
        
          
  /**
 * Shelf Life and storage information.
 */
  shelfLifeStorage?: Array<ProductShelfLife> | undefined;
  _shelfLifeStorage?: Element[] | undefined;

        
      
        
          
  /**
 * The capabilities supported on a  device, the standards to which the device
 * conforms for a particular purpose, and used for the communication.
 */
  specialization?: Array<BackboneElement> | undefined;
  _specialization?: Element[] | undefined;

        
      
        
          
  /**
 * The standard that is used to operate and communicate.
 */
  systemType: string;
  _systemType?: Element | undefined;

        
      
        
          
  /**
 * The version of the standard that is used to operate and communicate.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * What kind of device or device system this is.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Unique device identifier (UDI) assigned to device label or package.  Note that
 * the Device may include multiple udiCarriers as it either may include just the
 * udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it
 * could have been sold.
 */
  udiDeviceIdentifier?: Array<BackboneElement> | undefined;
  _udiDeviceIdentifier?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is to be associated with every Device that references this
 * DeviceDefintiion for the issuer and jurisdication porvided in the
 * DeviceDefinition.udiDeviceIdentifier.
 */
  deviceIdentifier: string;
  _deviceIdentifier?: Element | undefined;

        
      
        
          
  /**
 * The organization that assigns the identifier algorithm.
 */
  issuer: string;
  _issuer?: Element | undefined;

        
      
        
          
  /**
 * The jurisdiction to which the deviceIdentifier applies.
 */
  jurisdiction: string;
  _jurisdiction?: Element | undefined;

        
      
        
          
  /**
 * A network address on which the device may be contacted directly.
 * If the device is running a FHIR server, the network address should  be the Base
 * URL from which a conformance statement may be retrieved.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The available versions of the device, e.g., software versions.
 */
  version?: Array<string> | undefined;
  _version?: Element[] | undefined;

        
      
    }

  


  
    /**
 * DeviceMetric
 * 
 * Describes a measurement, calculation or setting capability of a medical device.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DeviceMetric.html}
 */
    export interface DeviceMetric extends DomainResource {
      
      readonly resourceType: "DeviceMetric";
      

      
        
          
  /**
 * Describes the calibrations that have been performed or that are required to be
 * performed.
 */
  calibration?: Array<BackboneElement> | undefined;
  _calibration?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the state of the calibration.
 */
  state?: string | undefined;
  _state?: Element | undefined;

        
      
        
          
  /**
 * Describes the time last calibration has been performed.
 */
  time?: string | undefined;
  _time?: Element | undefined;

        
      
        
          
  /**
 * Describes the type of the calibration method.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Indicates the category of the observation generation process. A DeviceMetric can
 * be for example a setting, measurement, or calculation.
 */
  category: string;
  _category?: Element | undefined;

        
      
        
          
  /**
 * Describes the color representation for the metric. This is often used to aid
 * clinicians to track and identify parameter types by color. In practice, consider
 * a Patient Monitor that has ECG/HR and Pleth for example; the parameters are
 * displayed in different characteristic colors, such as HR-blue, BP-green, and PR
 * and SpO2- magenta.
 */
  color?: string | undefined;
  _color?: Element | undefined;

        
      
        
          
  /**
 * Unique instance identifiers assigned to a device by the device or gateway
 * software, manufacturers, other organizations or owners. For example: handle ID.
 * For identifiers assigned to a device by the device or gateway software, the
 * `system` element of the identifier should be set to the unique identifier of the
 * device.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the measurement repetition time. This is not necessarily the same as
 * the update period. The measurement repetition time can range from milliseconds
 * up to hours. An example for a measurement repetition time in the range of
 * milliseconds is the sampling rate of an ECG. An example for a measurement
 * repetition time in the range of hours is a NIBP that is triggered automatically
 * every hour. The update period may be different than the measurement repetition
 * time, if the device does not update the published observed value with the same
 * frequency as it was measured.
 */
  measurementPeriod?: Timing | undefined;
  _measurementPeriod?: Element | undefined;

        
      
        
          
  /**
 * Indicates current operational state of the device. For example: On, Off,
 * Standby, etc.
 */
  operationalStatus?: string | undefined;
  _operationalStatus?: Element | undefined;

        
      
        
          
  /**
 * Describes the link to the  Device that this DeviceMetric belongs to and that
 * provide information about the location of this DeviceMetric in the containment
 * structure of the parent Device. An example would be a Device that represents a
 * Channel. This reference can be used by a client application to distinguish
 * DeviceMetrics that have the same type, but should be interpreted based on their
 * containment location.
 */
  parent?: Reference | undefined;
  _parent?: Element | undefined;

        
      
        
          
  /**
 * Describes the link to the  Device that this DeviceMetric belongs to and that
 * contains administrative device information such as manufacturer, serial number,
 * etc.
 */
  source?: Reference | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
 * DeviceMetric.type can be referred to either IEEE 11073-10101 or LOINC.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Describes the unit that an observed value determined for this metric will have.
 * For example: Percent, Seconds, etc.
 * DeviceMetric.unit can refer to either UCUM or preferable a RTMMS coding system.
 */
  unit?: CodeableConcept | undefined;
  _unit?: Element | undefined;

        
      
    }

  


  
    /**
 * DeviceRequest
 * 
 * Represents a request for a patient to employ a medical device. The device may be
 * an implantable device, or an external assistive device, such as a walker.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DeviceRequest.html}
 */
    export interface DeviceRequest extends DomainResource {
      
      readonly resourceType: "DeviceRequest";
      

      
        
          
  /**
 * When the request transitioned to being actionable.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * Plan/proposal/order fulfilled by this request.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
            
  /**
 * The details of the device to be used.
 */
  codeReference?: Reference | undefined;
  _codeReference?: Element | undefined;

          
            
  /**
 * The details of the device to be used.
 */
  codeCodeableConcept?: CodeableConcept | undefined;
  _codeCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * An encounter that provides additional context in which this request is made.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Composite request this is part of.
 */
  groupIdentifier?: Identifier | undefined;
  _groupIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Identifiers assigned to this order by the orderer or by the receiver.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this DeviceRequest.
 * Note: This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this DeviceRequest.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * Insurance plans, coverage extensions, pre-authorizations and/or
 * pre-determinations that may be required for delivering the requested service.
 */
  insurance?: Array<Reference> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the request is a proposal, plan, an original order or a reflex order.
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * Details about this request that were not represented at all or sufficiently in
 * one of the attributes provided in a class. These may include for example a
 * comment, an instruction, or a note associated with the statement.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * The timing schedule for the use of the device. The Schedule data type allows
 * many different expressions, for example. "Every 8 hours"; "Three times a day";
 * "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17
 * Oct 2013 and 1 Nov 2013".
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * The timing schedule for the use of the device. The Schedule data type allows
 * many different expressions, for example. "Every 8 hours"; "Three times a day";
 * "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17
 * Oct 2013 and 1 Nov 2013".
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * The timing schedule for the use of the device. The Schedule data type allows
 * many different expressions, for example. "Every 8 hours"; "Three times a day";
 * "1/2 an hour before breakfast for 10 days from 23-Dec 2011:"; "15 Oct 2013, 17
 * Oct 2013 and 1 Nov 2013".
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * Specific parameters for the ordered item.  For example, the prism value for
 * lenses.
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * A code or string that identifies the device detail being asserted.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
        
      
        
          
  /**
 * The desired performer for doing the diagnostic testing.
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * Desired type of performer for doing the diagnostic testing.
 */
  performerType?: CodeableConcept | undefined;
  _performerType?: Element | undefined;

        
      
        
          
  /**
 * Indicates how quickly the {{title}} should be addressed with respect to other
 * requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * The request takes the place of the referenced completed or terminated
 * request(s).
 */
  priorRequest?: Array<Reference> | undefined;
  _priorRequest?: Element[] | undefined;

        
      
        
          
  /**
 * Reason or justification for the use of this device.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Reason or justification for the use of this device.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * Key events in the history of the request.
 * This might not include provenances for all versions of the request - only those
 * deemed "relevant" or important.This SHALL NOT include the Provenance associated
 * with this current version of the resource.  (If that provenance is deemed to be
 * a "relevant" change, it will need to be added as part of a later update.  Until
 * then, it can be queried directly as the Provenance that points to this version
 * using _revincludeAll Provenances should have some historical version of this
 * Request as their subject.
 */
  relevantHistory?: Array<Reference> | undefined;
  _relevantHistory?: Element[] | undefined;

        
      
        
          
  /**
 * The individual who initiated the request and has responsibility for its
 * activation.
 */
  requester?: Reference | undefined;
  _requester?: Element | undefined;

        
      
        
          
  /**
 * The status of the request.
 * This element is labeled as a modifier because the status contains the codes
 * cancelled and entered-in-error that mark the request as not currently valid.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The patient who will use the device.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Additional clinical information about the patient that may influence the request
 * fulfilment.  For example, this may include where on the subject's body the
 * device will be used (i.e. the target site).
 */
  supportingInfo?: Array<Reference> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
    }

  


  
    /**
 * DeviceUseStatement
 * 
 * A record of a device being used by a patient where the record is the result of a
 * report from the patient or another clinician.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DeviceUseStatement.html}
 */
    export interface DeviceUseStatement extends DomainResource {
      
      readonly resourceType: "DeviceUseStatement";
      

      
        
          
  /**
 * A plan, proposal or order that is fulfilled in whole or in part by this
 * DeviceUseStatement.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the anotomic location on the subject's body where the device was used
 * ( i.e. the target).
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * Allows linking the DeviceUseStatement to the underlying Request, or to other
 * information that supports or is used to derive the DeviceUseStatement.
 * The most common use cases for deriving a DeviceUseStatement comes from creating
 * it from a request or from an observation or a claim. it should be noted that the
 * amount of information that is available varies from the type resource that you
 * derive the DeviceUseStatement from.
 */
  derivedFrom?: Array<Reference> | undefined;
  _derivedFrom?: Element[] | undefined;

        
      
        
          
  /**
 * The details of the device used.
 */
  device: Reference;
  _device?: Element | undefined;

        
      
        
          
  /**
 * An external identifier for this statement such as an IRI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Details about the device statement that were not represented at all or
 * sufficiently in one of the attributes provided in a class. These may include for
 * example a comment, an instruction, or a note associated with the statement.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Reason or justification for the use of the device.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies this DeviceUseStatement.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The time at which the statement was made/recorded.
 */
  recordedOn?: string | undefined;
  _recordedOn?: Element | undefined;

        
      
        
          
  /**
 * Who reported the device was being used by the patient.
 */
  source?: Reference | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * A code representing the patient or other source's judgment about the state of
 * the device used that this statement is about.  Generally this will be active or
 * completed.
 * DeviceUseStatment is a statement at a point in time.  The status is only
 * representative at the point when it was asserted.  The value set for contains
 * codes that assert the status of the use  by the patient (for example, stopped or
 * on hold) as well as codes that assert the status of the resource itself (for
 * example, entered in error).This element is labeled as a modifier because the
 * status contains the codes that mark the statement as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The patient who used the device.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
            
  /**
 * How often the device was used.
 */
  timingTiming?: Timing | undefined;
  _timingTiming?: Element | undefined;

          
            
  /**
 * How often the device was used.
 */
  timingPeriod?: Period | undefined;
  _timingPeriod?: Element | undefined;

          
            
  /**
 * How often the device was used.
 */
  timingDateTime?: string | undefined;
  _timingDateTime?: Element | undefined;

          
        
      
    }

  


  
    /**
 * DiagnosticReport
 * 
 * The findings and interpretation of diagnostic  tests performed on patients,
 * groups of patients, devices, and locations, and/or specimens derived from these.
 * The report includes clinical context such as requesting and provider
 * information, and some mix of atomic results, images, textual and coded
 * interpretations, and formatted representation of diagnostic reports.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DiagnosticReport.html}
 */
    export interface DiagnosticReport extends DomainResource {
      
      readonly resourceType: "DiagnosticReport";
      

      
        
          
  /**
 * Details concerning a service requested.
 * Note: Usually there is one test request for each result, however in some
 * circumstances multiple test requests may be represented using a single test
 * result resource. Note that there are also cases where one request leads to
 * multiple reports.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * A code that classifies the clinical discipline, department or diagnostic service
 * that created the report (e.g. cardiology, biochemistry, hematology, MRI). This
 * is used for searching, sorting and display purposes.
 * Multiple categories are allowed using various categorization schemes.   The
 * level of granularity is defined by the category concepts in the value set. More
 * fine-grained filtering can be performed using the metadata and/or terminology
 * hierarchy in DiagnosticReport.code.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * A code or name that describes this diagnostic report.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Concise and clinically contextualized summary conclusion
 * (interpretation/impression) of the diagnostic report.
 */
  conclusion?: string | undefined;
  _conclusion?: Element | undefined;

        
      
        
          
  /**
 * One or more codes that represent the summary conclusion
 * (interpretation/impression) of the diagnostic report.
 */
  conclusionCode?: Array<CodeableConcept> | undefined;
  _conclusionCode?: Element[] | undefined;

        
      
        
          
            
  /**
 * The time or time-period the observed values are related to. When the subject of
 * the report is a patient, this is usually either the time of the procedure or of
 * specimen collection(s), but very often the source of the date/time is not known,
 * only the date/time itself.
 * If the diagnostic procedure was performed on the patient, this is the time it
 * was performed. If there are specimens, the diagnostically relevant time can be
 * derived from the specimen collection times, but the specimen information is not
 * always available, and the exact relationship between the specimens and the
 * diagnostically relevant time is not always automatic.
 */
  effectiveDateTime?: string | undefined;
  _effectiveDateTime?: Element | undefined;

          
            
  /**
 * The time or time-period the observed values are related to. When the subject of
 * the report is a patient, this is usually either the time of the procedure or of
 * specimen collection(s), but very often the source of the date/time is not known,
 * only the date/time itself.
 * If the diagnostic procedure was performed on the patient, this is the time it
 * was performed. If there are specimens, the diagnostically relevant time can be
 * derived from the specimen collection times, but the specimen information is not
 * always available, and the exact relationship between the specimens and the
 * diagnostically relevant time is not always automatic.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * The healthcare event  (e.g. a patient and healthcare provider interaction) which
 * this DiagnosticReport is about.
 * This will typically be the encounter the event occurred within, but some events
 * may be initiated prior to or after the official completion of an encounter  but
 * still be tied to the context of the encounter  (e.g. pre-admission laboratory
 * tests).
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Identifiers assigned to this report by the performer or other systems.
 * Usually assigned by the Information System of the diagnostic service provider
 * (filler id).
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * One or more links to full details of any imaging performed during the diagnostic
 * investigation. Typically, this is imaging performed by DICOM enabled modalities,
 * but this is not required. A fully enabled PACS viewer can use this information
 * to provide views of the source images.
 * ImagingStudy and the image element are somewhat overlapping - typically, the
 * list of image references in the image element will also be found in one of the
 * imaging study resources. However, each caters to different types of displays for
 * different types of purposes. Neither, either, or both may be provided.
 */
  imagingStudy?: Array<Reference> | undefined;
  _imagingStudy?: Element[] | undefined;

        
      
        
          
  /**
 * The date and time that this version of the report was made available to
 * providers, typically after the report was reviewed and verified.
 * May be different from the update time of the resource itself, because that is
 * the status of the record (potentially a secondary copy), not the actual release
 * time of the report.
 */
  issued?: string | undefined;
  _issued?: Element | undefined;

        
      
        
          
  /**
 * A list of key images associated with this report. The images are generally
 * created during the diagnostic process, and may be directly of the patient, or of
 * treated specimens (i.e. slides of interest).
 */
  media?: Array<BackboneElement> | undefined;
  _media?: Element[] | undefined;

        
      
        
          
  /**
 * A comment about the image. Typically, this is used to provide an explanation for
 * why the image is included, or to draw the viewer's attention to important
 * features.
 * The comment should be displayed with the image. It would be common for the
 * report to include additional discussion of the image contents in other sections
 * such as the conclusion.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Reference to the image source.
 */
  link: Reference;
  _link?: Element | undefined;

        
      
        
          
  /**
 * The diagnostic service that is responsible for issuing the report.
 * This is not necessarily the source of the atomic data items or the entity that
 * interpreted the results. It is the entity that takes responsibility for the
 * clinical report.
 */
  performer?: Array<Reference> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * Rich text representation of the entire result as issued by the diagnostic
 * service. Multiple formats are allowed but they SHALL be semantically equivalent.
 * "application/pdf" is recommended as the most reliable and interoperable in this
 * context.
 */
  presentedForm?: Array<Attachment> | undefined;
  _presentedForm?: Element[] | undefined;

        
      
        
          
  /**
 * [Observations](observation.html)  that are part of this diagnostic report.
 * Observations can contain observations.
 */
  result?: Array<Reference> | undefined;
  _result?: Element[] | undefined;

        
      
        
          
  /**
 * The practitioner or organization that is responsible for the report's
 * conclusions and interpretations.
 * Might not be the same entity that takes responsibility for the clinical report.
 */
  resultsInterpreter?: Array<Reference> | undefined;
  _resultsInterpreter?: Element[] | undefined;

        
      
        
          
  /**
 * Details about the specimens on which this diagnostic report is based.
 * If the specimen is sufficiently specified with a code in the test result name,
 * then this additional data may be redundant. If there are multiple specimens,
 * these may be represented per observation or group.
 */
  specimen?: Array<Reference> | undefined;
  _specimen?: Element[] | undefined;

        
      
        
          
  /**
 * The status of the diagnostic report.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The subject of the report. Usually, but not always, this is a patient. However,
 * diagnostic services also perform analyses on specimens collected from a variety
 * of other sources.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * Distance
 * 
 * Base StructureDefinition for Distance Type: A length - a value with a unit that
 * is a physical distance.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Distance.html}
 */
    export interface Distance extends Quantity {
      
      readonly resourceType: string;
      

      
    }

  


  


  
    /**
 * DocumentManifest
 * 
 * A collection of documents compiled for a purpose together with metadata that
 * applies to the collection.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DocumentManifest.html}
 */
    export interface DocumentManifest extends DomainResource {
      
      readonly resourceType: "DocumentManifest";
      

      
        
          
  /**
 * Identifies who is the author of the manifest. Manifest author is not necessarly
 * the author of the references included.
 * Not necessarily who did the actual data entry (i.e. typist) or who was the
 * source (informant).
 */
  author?: Array<Reference> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * The list of Resources that consist of the parts of this manifest.
 * When used for XDS the intended focus of the DocumentManifest is for the
 * reference to target to be a set of DocumentReference Resources. The reference is
 * to "Any" to support EN 13606 usage, where an extract is DocumentManifest that
 * references  List and Composition resources.
 */
  content: Array<Reference>;
  _content?: Element[] | undefined;

        
      
        
          
  /**
 * When the document manifest was created for submission to the server (not
 * necessarily the same thing as the actual resource last modified time, since it
 * may be modified, replicated, etc.).
 * Creation time is used for tracking, organizing versions and searching. This is
 * the creation time of the document set, not the documents on which it is based.
 */
  created?: string | undefined;
  _created?: Element | undefined;

        
      
        
          
  /**
 * Human-readable description of the source document. This is sometimes known as
 * the "title".
 * What the document is about, rather than a terse summary of the document. It is
 * commonly the case that records do not have a title and are collectively referred
 * to by the display name of Record code (e.g. a "consultation" or "progress
 * note").
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Other identifiers associated with the document manifest, including version
 * independent  identifiers.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A single identifier that uniquely identifies this manifest. Principally used to
 * refer to the manifest in non-FHIR contexts.
 */
  masterIdentifier?: Identifier | undefined;
  _masterIdentifier?: Element | undefined;

        
      
        
          
  /**
 * A patient, practitioner, or organization for which this set of documents is
 * intended.
 * How the recipient receives the document set or is notified of it is up to the
 * implementation. This element is just a statement of intent. If the recipient is
 * a person, and it is not known whether the person is a patient or a practitioner,
 * RelatedPerson would be the default choice.
 */
  recipient?: Array<Reference> | undefined;
  _recipient?: Element[] | undefined;

        
      
        
          
  /**
 * Related identifiers or resources associated with the DocumentManifest.
 * May be identifiers or resources that caused the DocumentManifest to be created.
 */
  related?: Array<BackboneElement> | undefined;
  _related?: Element[] | undefined;

        
      
        
          
  /**
 * Related identifier to this DocumentManifest.  For example, Order numbers,
 * accession numbers, XDW workflow numbers.
 * If both identifier and ref elements are present they shall refer to the same
 * thing.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * Related Resource to this DocumentManifest. For example, Order, ServiceRequest,
 * Procedure, EligibilityRequest, etc.
 * If both identifier and ref elements are present they shall refer to the same
 * thing.
 */
  ref?: Reference | undefined;
  _ref?: Element | undefined;

        
      
        
          
  /**
 * Identifies the source system, application, or software that produced the
 * document manifest.
 */
  source?: string | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * The status of this document manifest.
 * This element is labeled as a modifier because the status contains the codes that
 * mark the manifest as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Who or what the set of documents is about. The documents can be about a person,
 * (patient or healthcare practitioner), a device (i.e. machine) or even a group of
 * subjects (such as a document about a herd of farm animals, or a set of patients
 * that share a common exposure). If the documents cross more than one subject,
 * then more than one subject is allowed here (unusual use case).
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * The code specifying the type of clinical activity that resulted in placing the
 * associated content into the DocumentManifest.
 * Specifies the kind of this set of documents (e.g. Patient Summary, Discharge
 * Summary, Prescription, etc.). The type of a set of documents may be the same as
 * one of the documents in it - especially if there is only one - but it may be
 * wider.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * DocumentReference
 * 
 * A reference to a document of any kind for any purpose. Provides metadata about
 * the document so that the document can be discovered and managed. The scope of a
 * document is any seralized object with a mime-type, so includes formal patient
 * centric documents (CDA), cliical notes, scanned paper, and non-patient specific
 * documents like policy text.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DocumentReference.html}
 */
    export interface DocumentReference extends DomainResource {
      
      readonly resourceType: "DocumentReference";
      

      
        
          
  /**
 * Which person or organization authenticates that this document is valid.
 * Represents a participant within the author institution who has legally
 * authenticated or attested the document. Legal authentication implies that a
 * document has been signed manually or electronically by the legal Authenticator.
 */
  authenticator?: Reference | undefined;
  _authenticator?: Element | undefined;

        
      
        
          
  /**
 * Identifies who is responsible for adding the information to the document.
 * Not necessarily who did the actual data entry (i.e. typist) or who was the
 * source (informant).
 */
  author?: Array<Reference> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * A categorization for the type of document referenced - helps for indexing and
 * searching. This may be implied by or derived from the code specified in the
 * DocumentReference.type.
 * Key metadata element describing the the category or classification of the
 * document. This is a broader perspective that groups similar documents based on
 * how they would be used. This is a primary key used in searching.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The document and format referenced. There may be multiple content element
 * repetitions, each with a different format.
 */
  content: Array<BackboneElement>;
  _content?: Element[] | undefined;

        
      
        
          
  /**
 * The document or URL of the document along with critical metadata to prove
 * content has integrity.
 */
  attachment: Attachment;
  _attachment?: Element | undefined;

        
      
        
          
  /**
 * An identifier of the document encoding, structure, and template that the
 * document conforms to beyond the base format indicated in the mimeType.
 * Note that while IHE mostly issues URNs for format types, not all documents can
 * be identified by a URI.
 */
  format?: Coding | undefined;
  _format?: Element | undefined;

        
      
        
          
  /**
 * The clinical context in which the document was prepared.
 * These values are primarily added to help with searching for interesting/relevant
 * documents.
 */
  context?: BackboneElement | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * Describes the clinical encounter or type of care that the document content is
 * associated with.
 */
  encounter?: Array<Reference> | undefined;
  _encounter?: Element[] | undefined;

        
      
        
          
  /**
 * This list of codes represents the main clinical acts, such as a colonoscopy or
 * an appendectomy, being documented. In some cases, the event is inherent in the
 * type Code, such as a "History and Physical Report" in which the procedure being
 * documented is necessarily a "History and Physical" act.
 * An event can further specialize the act inherent in the type, such as  where it
 * is simply "Procedure Report" and the procedure was a "colonoscopy". If one or
 * more event codes are included, they shall not conflict with the values inherent
 * in the class or type elements as such a conflict would create an ambiguous
 * situation.
 */
  event?: Array<CodeableConcept> | undefined;
  _event?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of facility where the patient was seen.
 */
  facilityType?: CodeableConcept | undefined;
  _facilityType?: Element | undefined;

        
      
        
          
  /**
 * The time period over which the service that is described by the document was
 * provided.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * This property may convey specifics about the practice setting where the content
 * was created, often reflecting the clinical specialty.
 * This element should be based on a coarse classification system for the class of
 * specialty practice. Recommend the use of the classification system for Practice
 * Setting, such as that described by the Subject Matter Domain in LOINC.
 */
  practiceSetting?: CodeableConcept | undefined;
  _practiceSetting?: Element | undefined;

        
      
        
          
  /**
 * Related identifiers or resources associated with the DocumentReference.
 * May be identifiers or resources that caused the DocumentReference or referenced
 * Document to be created.
 */
  related?: Array<Reference> | undefined;
  _related?: Element[] | undefined;

        
      
        
          
  /**
 * The Patient Information as known when the document was published. May be a
 * reference to a version specific, or contained.
 */
  sourcePatientInfo?: Reference | undefined;
  _sourcePatientInfo?: Element | undefined;

        
      
        
          
  /**
 * Identifies the organization or group who is responsible for ongoing maintenance
 * of and access to the document.
 * Identifies the logical organization (software system, vendor, or department) to
 * go to find the current version, where to report issues, etc. This is different
 * from the physical location (URL, disk drive, or server) of the document, which
 * is the technical location of the document, which host may be delegated to the
 * management of some other organization.
 */
  custodian?: Reference | undefined;
  _custodian?: Element | undefined;

        
      
        
          
  /**
 * When the document reference was created.
 * Referencing/indexing time is used for tracking, organizing versions and
 * searching.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Human-readable description of the source document.
 * What the document is about,  a terse summary of the document.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The status of the underlying document.
 * The document that is pointed to might be in various lifecycle states.
 */
  docStatus?: string | undefined;
  _docStatus?: Element | undefined;

        
      
        
          
  /**
 * Other identifiers associated with the document, including version independent
 * identifiers.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Document identifier as assigned by the source of the document. This identifier
 * is specific to this version of the document. This unique identifier may be used
 * elsewhere to identify this version of the document.
 * CDA Document Id extension and root.
 */
  masterIdentifier?: Identifier | undefined;
  _masterIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Relationships that this document has with other document references that already
 * exist.
 * This element is labeled as a modifier because documents that append to other
 * documents are incomplete on their own.
 */
  relatesTo?: Array<BackboneElement> | undefined;
  _relatesTo?: Element[] | undefined;

        
      
        
          
  /**
 * The type of relationship that this document has with anther document.
 * If this document appends another document, then the document cannot be fully
 * understood without also accessing the referenced document.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The target document of this relationship.
 */
  target: Reference;
  _target?: Element | undefined;

        
      
        
          
  /**
 * A set of Security-Tag codes specifying the level of privacy/security of the
 * Document. Note that DocumentReference.meta.security contains the security labels
 * of the "reference" to the document, while DocumentReference.securityLabel
 * contains a snapshot of the security labels on the document the reference refers
 * to.
 * The confidentiality codes can carry multiple vocabulary items. HL7 has developed
 * an understanding of security and privacy tags that might be desirable in a
 * Document Sharing environment, called HL7 Healthcare Privacy and Security
 * Classification System (HCS). The following specification is recommended but not
 * mandated, as the vocabulary bindings are an administrative domain
 * responsibility. The use of this method is up to the policy domain such as the
 * XDS Affinity Domain or other Trust Domain where all parties including sender and
 * recipients are trusted to appropriately tag and enforce.   

In the HL7
 * Healthcare Privacy and Security Classification (HCS) there are code systems
 * specific to Confidentiality, Sensitivity, Integrity, and Handling Caveats. Some
 * values would come from a local vocabulary as they are related to workflow roles
 * and special projects.
 */
  securityLabel?: Array<CodeableConcept> | undefined;
  _securityLabel?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this document reference.
 * This is the status of the DocumentReference object, which might be independent
 * from the docStatus element.

This element is labeled as a modifier because the
 * status contains the codes that mark the document or reference as not currently
 * valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Who or what the document is about. The document can be about a person, (patient
 * or healthcare practitioner), a device (e.g. a machine) or even a group of
 * subjects (such as a document about a herd of farm animals, or a set of patients
 * that share a common exposure).
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Specifies the particular kind of document referenced  (e.g. History and
 * Physical, Discharge Summary, Progress Note). This usually equates to the purpose
 * of making the document referenced.
 * Key metadata element describing the document that describes he exact type of
 * document. Helps humans to assess whether the document is of interest when
 * viewing a list of documents.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * DomainResource
 * 
 * A resource that includes narrative, extensions, and contained resources.
 * 
 * @see {@link http://hl7.org/fhir/R4B/DomainResource.html}
 */
    export interface DomainResource extends Resource {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * These resources do not have an independent existence apart from the resource
 * that contains them - they cannot be identified independently, and nor can they
 * have their own independent transaction scope.
 * This should never be done when the content can be identified properly, as once
 * identification is lost, it is extremely difficult (and context dependent) to
 * restore it again. Contained resources may have profiles and tags In their meta
 * elements, but SHALL NOT have security labels.
 */
  contained?: Array<Resource> | undefined;
  _contained?: Element[] | undefined;

        
      
        
          
  /**
 * May be used to represent additional information that is not part of the basic
 * definition of the resource. To make the use of extensions safe and manageable,
 * there is a strict set of governance  applied to the definition and use of
 * extensions. Though any implementer can define an extension, there is a set of
 * requirements that SHALL be met as part of the definition of the extension.
 * There can be no stigma associated with the use of extensions by any application,
 * project, or standard - regardless of the institution or jurisdiction that uses
 * or defines the extensions.  The use of extensions is what allows the FHIR
 * specification to retain a core level of simplicity for everyone.
 */
  extension?: Array<Extension> | undefined;
  _extension?: Element[] | undefined;

        
      
        
          
  /**
 * May be used to represent additional information that is not part of the basic
 * definition of the resource and that modifies the understanding of the element
 * that contains it and/or the understanding of the containing element's
 * descendants. Usually modifier elements provide negation or qualification. To
 * make the use of extensions safe and manageable, there is a strict set of
 * governance applied to the definition and use of extensions. Though any
 * implementer is allowed to define an extension, there is a set of requirements
 * that SHALL be met as part of the definition of the extension. Applications
 * processing a resource are required to check for modifier extensions.

Modifier
 * extensions SHALL NOT change the meaning of any elements on Resource or
 * DomainResource (including cannot change the meaning of modifierExtension
 * itself).
 * There can be no stigma associated with the use of extensions by any application,
 * project, or standard - regardless of the institution or jurisdiction that uses
 * or defines the extensions.  The use of extensions is what allows the FHIR
 * specification to retain a core level of simplicity for everyone.
 */
  modifierExtension?: Array<Extension> | undefined;
  _modifierExtension?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable narrative that contains a summary of the resource and can be
 * used to represent the content of the resource to a human. The narrative need not
 * encode all the structured data, but is required to contain sufficient detail to
 * make it "clinically safe" for a human to just read the narrative. Resource
 * definitions may define what content should be represented in the narrative to
 * ensure clinical safety.
 * Contained resources do not have narrative. Resources that are not contained
 * SHOULD have a narrative. In some cases, a resource may only have text with
 * little or no additional discrete data (as long as all minOccurs=1 elements are
 * satisfied).  This may be necessary for data from legacy systems where
 * information is captured as a "text blob" or where text is additionally entered
 * raw or narrated and encoded information is added later.
 */
  text?: Narrative | undefined;
  _text?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Dosage
 * 
 * Base StructureDefinition for Dosage Type: Indicates how the medication is/was
 * taken or should be taken by the patient.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Dosage.html}
 */
    export interface Dosage extends BackboneElement {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Supplemental instructions to the patient on how to take the medication  (e.g.
 * "with meals" or"take half to one hour before food") or warnings for the patient
 * about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to
 * direct sunlight or sunlamps").
 * Information about administration or preparation of the medication (e.g. "infuse
 * as rapidly as possibly via intraperitoneal port" or "immediately following drug
 * x") should be populated in dosage.text.
 */
  additionalInstruction?: Array<CodeableConcept> | undefined;
  _additionalInstruction?: Element[] | undefined;

        
      
        
          
            
  /**
 * Indicates whether the Medication is only taken when needed within a specific
 * dosing schedule (Boolean option), or it indicates the precondition for taking
 * the Medication (CodeableConcept).
 * Can express "as needed" without a reason by setting the Boolean = True.  In this
 * case the CodeableConcept is not populated.  Or you can express "as needed" with
 * a reason by including the CodeableConcept.  In this case the Boolean is assumed
 * to be True.  If you set the Boolean to False, then the dose is given according
 * to the schedule and is not "prn" or "as needed".
 */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;

          
            
  /**
 * Indicates whether the Medication is only taken when needed within a specific
 * dosing schedule (Boolean option), or it indicates the precondition for taking
 * the Medication (CodeableConcept).
 * Can express "as needed" without a reason by setting the Boolean = True.  In this
 * case the CodeableConcept is not populated.  Or you can express "as needed" with
 * a reason by including the CodeableConcept.  In this case the Boolean is assumed
 * to be True.  If you set the Boolean to False, then the dose is given according
 * to the schedule and is not "prn" or "as needed".
 */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  _asNeededCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * The amount of medication administered.
 */
  doseAndRate?: Array<Element> | undefined;
  _doseAndRate?: Element[] | undefined;

        
      
        
          
            
  /**
 * Amount of medication per dose.
 * Note that this specifies the quantity of the specified medication, not the
 * quantity for each active ingredient(s). Each ingredient amount can be
 * communicated in the Medication resource. For example, if one wants to
 * communicate that a tablet was 375 mg, where the dose was one tablet, you can use
 * the Medication resource to document that the tablet was comprised of 375 mg of
 * drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use
 * the Medication resource to indicate this was a tablet. If the example were an IV
 * such as dopamine and you wanted to communicate that 400mg of dopamine was mixed
 * in 500 ml of some IV solution, then this would all be communicated in the
 * Medication resource. If the administration is not intended to be instantaneous
 * (rate is present or timing has a duration), this can be specified to convey the
 * total amount to be administered over the period of time as indicated by the
 * schedule e.g. 500 ml in dose, with timing used to convey that this should be
 * done over 4 hours.
 */
  doseRange?: Range | undefined;
  _doseRange?: Element | undefined;

          
            
  /**
 * Amount of medication per dose.
 * Note that this specifies the quantity of the specified medication, not the
 * quantity for each active ingredient(s). Each ingredient amount can be
 * communicated in the Medication resource. For example, if one wants to
 * communicate that a tablet was 375 mg, where the dose was one tablet, you can use
 * the Medication resource to document that the tablet was comprised of 375 mg of
 * drug XYZ. Alternatively if the dose was 375 mg, then you may only need to use
 * the Medication resource to indicate this was a tablet. If the example were an IV
 * such as dopamine and you wanted to communicate that 400mg of dopamine was mixed
 * in 500 ml of some IV solution, then this would all be communicated in the
 * Medication resource. If the administration is not intended to be instantaneous
 * (rate is present or timing has a duration), this can be specified to convey the
 * total amount to be administered over the period of time as indicated by the
 * schedule e.g. 500 ml in dose, with timing used to convey that this should be
 * done over 4 hours.
 */
  doseQuantity?: Quantity | undefined;
  _doseQuantity?: Element | undefined;

          
        
      
        
          
            
  /**
 * Amount of medication per unit of time.
 * It is possible to supply both a rate and a doseQuantity to provide full details
 * about how the medication is to be administered and supplied. If the rate is
 * intended to change over time, depending on local rules/regulations, each change
 * should be captured as a new version of the MedicationRequest with an updated
 * rate, or captured with a new MedicationRequest with the new rate.It is
 * possible to specify a rate over time (for example, 100 ml/hour) using either the
 * rateRatio and rateQuantity.  The rateQuantity approach requires systems to have
 * the capability to parse UCUM grammer where ml/hour is included rather than a
 * specific ratio where the time is specified as the denominator.  Where a rate
 * such as 500ml over 2 hours is specified, the use of rateRatio may be more
 * semantically correct than specifying using a rateQuantity of 250 mg/hour.
 */
  rateRatio?: Ratio | undefined;
  _rateRatio?: Element | undefined;

          
            
  /**
 * Amount of medication per unit of time.
 * It is possible to supply both a rate and a doseQuantity to provide full details
 * about how the medication is to be administered and supplied. If the rate is
 * intended to change over time, depending on local rules/regulations, each change
 * should be captured as a new version of the MedicationRequest with an updated
 * rate, or captured with a new MedicationRequest with the new rate.It is
 * possible to specify a rate over time (for example, 100 ml/hour) using either the
 * rateRatio and rateQuantity.  The rateQuantity approach requires systems to have
 * the capability to parse UCUM grammer where ml/hour is included rather than a
 * specific ratio where the time is specified as the denominator.  Where a rate
 * such as 500ml over 2 hours is specified, the use of rateRatio may be more
 * semantically correct than specifying using a rateQuantity of 250 mg/hour.
 */
  rateRange?: Range | undefined;
  _rateRange?: Element | undefined;

          
            
  /**
 * Amount of medication per unit of time.
 * It is possible to supply both a rate and a doseQuantity to provide full details
 * about how the medication is to be administered and supplied. If the rate is
 * intended to change over time, depending on local rules/regulations, each change
 * should be captured as a new version of the MedicationRequest with an updated
 * rate, or captured with a new MedicationRequest with the new rate.It is
 * possible to specify a rate over time (for example, 100 ml/hour) using either the
 * rateRatio and rateQuantity.  The rateQuantity approach requires systems to have
 * the capability to parse UCUM grammer where ml/hour is included rather than a
 * specific ratio where the time is specified as the denominator.  Where a rate
 * such as 500ml over 2 hours is specified, the use of rateRatio may be more
 * semantically correct than specifying using a rateQuantity of 250 mg/hour.
 */
  rateQuantity?: Quantity | undefined;
  _rateQuantity?: Element | undefined;

          
        
      
        
          
  /**
 * The kind of dose or rate specified, for example, ordered or calculated.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Upper limit on medication per administration.
 * This is intended for use as an adjunct to the dosage when there is an upper cap.
 * For example, a body surface area related dose with a maximum amount, such as
 * 1.5 mg/m2 (maximum 2 mg) IV over 5 – 10 minutes would have doseQuantity of 1.5
 * mg/m2 and maxDosePerAdministration of 2 mg.
 */
  maxDosePerAdministration?: Quantity | undefined;
  _maxDosePerAdministration?: Element | undefined;

        
      
        
          
  /**
 * Upper limit on medication per lifetime of the patient.
 */
  maxDosePerLifetime?: Quantity | undefined;
  _maxDosePerLifetime?: Element | undefined;

        
      
        
          
  /**
 * Upper limit on medication per unit of time.
 * This is intended for use as an adjunct to the dosage when there is an upper cap.
 * For example "2 tablets every 4 hours to a maximum of 8/day".
 */
  maxDosePerPeriod?: Ratio | undefined;
  _maxDosePerPeriod?: Element | undefined;

        
      
        
          
  /**
 * Technique for administering medication.
 * Terminologies used often pre-coordinate this term with the route and or form of
 * administration.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * Instructions in terms that are understood by the patient or consumer.
 */
  patientInstruction?: string | undefined;
  _patientInstruction?: Element | undefined;

        
      
        
          
  /**
 * How drug should enter body.
 */
  route?: CodeableConcept | undefined;
  _route?: Element | undefined;

        
      
        
          
  /**
 * Indicates the order in which the dosage instructions should be applied or
 * interpreted.
 */
  sequence?: number | undefined;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * Body site to administer to.
 * If the use case requires attributes from the BodySite resource (e.g. to identify
 * and track separately) then use the standard extension
 * [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a
 * very precise definition of the location, or both.
 */
  site?: CodeableConcept | undefined;
  _site?: Element | undefined;

        
      
        
          
  /**
 * Free text dosage instructions e.g. SIG.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * When medication should be administered.
 * This attribute might not always be populated while the Dosage.text is expected
 * to be populated.  If both are populated, then the Dosage.text should reflect the
 * content of the Dosage.timing.
 */
  timing?: Timing | undefined;
  _timing?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Duration
 * 
 * Base StructureDefinition for Duration Type: A length of time.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Duration.html}
 */
    export interface Duration extends Quantity {
      
      readonly resourceType: string;
      

      
    }

  


  


  


  


  
    /**
 * Element
 * 
 * Base StructureDefinition for Element Type: Base definition for all elements in a
 * resource.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Element.html}
 */
    export interface Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * May be used to represent additional information that is not part of the basic
 * definition of the element. To make the use of extensions safe and manageable,
 * there is a strict set of governance  applied to the definition and use of
 * extensions. Though any implementer can define an extension, there is a set of
 * requirements that SHALL be met as part of the definition of the extension.
 * There can be no stigma associated with the use of extensions by any application,
 * project, or standard - regardless of the institution or jurisdiction that uses
 * or defines the extensions.  The use of extensions is what allows the FHIR
 * specification to retain a core level of simplicity for everyone.
 */
  extension?: Array<Extension> | undefined;
  _extension?: Element[] | undefined;

        
      
        
          
  /**
 * Unique id for the element within a resource (for internal references). This may
 * be any string value that does not contain spaces.
 */
  id?: string | undefined;
  _id?: Element | undefined;

        
      
    }

  


  
    /**
 * ElementDefinition
 * 
 * Base StructureDefinition for ElementDefinition Type: Captures constraints on
 * each element within the resource, profile, or extension.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ElementDefinition.html}
 */
    export interface ElementDefinition extends BackboneElement {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Identifies additional names by which this element might also be known.
 */
  alias?: Array<string> | undefined;
  _alias?: Element[] | undefined;

        
      
        
          
  /**
 * Information about the base definition of the element, provided to make it
 * unnecessary for tools to trace the deviation of the element through the derived
 * and related profiles. When the element definition is not the original definition
 * of an element - i.g. either in a constraint on another type, or for elements
 * from a super type in a snap shot - then the information in provided in the
 * element definition may be different to the base definition. On the original
 * definition of the element, it will be same.
 * The base information does not carry any information that could not be determined
 * from the path and related profiles, but making this determination requires both
 * that the related profiles are available, and that the algorithm to determine
 * them be available. For tooling simplicity, the base information must always be
 * populated in element definitions in snap shots, even if it is the same.
 */
  base?: Element | undefined;
  _base?: Element | undefined;

        
      
        
          
  /**
 * Maximum cardinality of the base element identified by the path.
 * This is provided to code generation, since the serialization representation in
 * JSON differs depending on whether the base element has max > 1. Also, some forms
 * of code generation may differ.
 */
  max: string;
  _max?: Element | undefined;

        
      
        
          
  /**
 * Minimum cardinality of the base element identified by the path.
 * This is provided for consistency with max, and may affect code generation of
 * mandatory elements of the base resource are generated differently (some
 * reference implementations have done this).
 */
  min: unsignedInt;
  _min?: Element | undefined;

        
      
        
          
  /**
 * The Path that identifies the base element - this matches the
 * ElementDefinition.path for that element. Across FHIR, there is only one base
 * definition of any element - that is, an element definition on a
 * [StructureDefinition](structuredefinition.html#) without a
 * StructureDefinition.base.
 */
  path: string;
  _path?: Element | undefined;

        
      
        
          
  /**
 * Binds to a value set if this element is coded (code, Coding, CodeableConcept,
 * Quantity), or the data types (string, uri).
 * For a CodeableConcept, when no codes are allowed - only text, use a binding of
 * strength "required" with a description explaining that no coded values are
 * allowed and what sort of information to put in the "text" element.
 */
  binding?: Element | undefined;
  _binding?: Element | undefined;

        
      
        
          
  /**
 * Describes the intended use of this particular set of codes.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Indicates the degree of conformance expectations associated with this binding -
 * that is, the degree to which the provided value set must be adhered to in the
 * instances.
 * For further discussion, see [Using Terminologies](terminologies.html).
 */
  strength: string;
  _strength?: Element | undefined;

        
      
        
          
  /**
 * Refers to the value set that identifies the set of codes the binding refers to.
 * The reference may be version-specific or not (e.g. have a |[version] at the end
 * of the canonical URL).
 */
  valueSet?: string | undefined;
  _valueSet?: Element | undefined;

        
      
        
          
  /**
 * A code that has the same meaning as the element in a particular terminology.
 * The concept SHALL be properly aligned with the data element definition and other
 * constraints, as defined in the code system, including relationships, of any code
 * listed here.  Where multiple codes exist in a terminology that could correspond
 * to the data element, the most granular code(s) should be selected, so long as
 * they are not more restrictive than the data element itself. The mappings may be
 * used to provide more or less granular or structured equivalences in the code
 * system.
 */
  code?: Array<Coding> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * Explanatory notes and implementation guidance about the data element, including
 * notes about how to use the data properly, exceptions to proper use, etc. (Note:
 * The text you are reading is specified in ElementDefinition.comment).
 * If it is possible to capture usage rules using constraints, that mechanism
 * should be used in preference to this element.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * A reference to an invariant that may make additional statements about the
 * cardinality or value in the instance.
 */
  condition?: Array<id> | undefined;
  _condition?: Element[] | undefined;

        
      
        
          
  /**
 * Formal constraints such as co-occurrence and other constraints that can be
 * computationally evaluated within the context of the instance.
 * Constraints should be declared on the "context" element - the lowest element in
 * the hierarchy that is common to all nodes referenced by the constraint.
 */
  constraint?: Array<Element> | undefined;
  _constraint?: Element[] | undefined;

        
      
        
          
  /**
 * A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see
 * if this constraint is met.
 * In the absense of an expression, the expression is likely not enforceable by
 * validators, and might be missed by many systems.
 */
  expression?: string | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * Text that can be used to describe the constraint in messages identifying that
 * the constraint has been violated.
 * Should be expressed in business terms as much as possible.
 */
  human: string;
  _human?: Element | undefined;

        
      
        
          
  /**
 * Allows identification of which elements have their cardinalities impacted by the
 * constraint.  Will not be referenced for constraints that do not affect
 * cardinality.
 */
  key: id;
  _key?: Element | undefined;

        
      
        
          
  /**
 * Description of why this constraint is necessary or appropriate.
 * To be used if the reason for the constraint might not be intuitive to all
 * implementers.
 */
  requirements?: string | undefined;
  _requirements?: Element | undefined;

        
      
        
          
  /**
 * Identifies the impact constraint violation has on the conformance of the
 * instance.
 * This allows constraints to be asserted as "shall" (error) and "should"
 * (warning).
 */
  severity: string;
  _severity?: Element | undefined;

        
      
        
          
  /**
 * A reference to the original source of the constraint, for traceability purposes.
 * This is used when, e.g. rendering, where it is not useful to present inherited
 * constraints when rendering the snapshot.
 */
  source?: string | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * An XPath expression of constraint that can be executed to see if this constraint
 * is met.
 * Elements SHALL use "f" as the namespace prefix for the FHIR namespace, and "x"
 * for the xhtml namespace, and SHALL NOT use any other prefixes.     Note: XPath
 * is generally considered not useful because it does not apply to JSON and other
 * formats and because of XSLT implementation issues, and may be removed in the
 * future.
 */
  xpath?: string | undefined;
  _xpath?: Element | undefined;

        
      
        
          
  /**
 * Identifies an element defined elsewhere in the definition whose content rules
 * should be applied to the current element. ContentReferences bring across all the
 * rules that are in the ElementDefinition for the element, including definitions,
 * cardinality constraints, bindings, invariants etc.
 * ContentReferences can only be defined in specializations, not constrained types,
 * and they cannot be changed and always reference the non-constrained definition.
 */
  contentReference?: string | undefined;
  _contentReference?: Element | undefined;

        
      
        
          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueBase64Binary?: string | undefined;
  _defaultValueBase64Binary?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueBoolean?: boolean | undefined;
  _defaultValueBoolean?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueCanonical?: string | undefined;
  _defaultValueCanonical?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueCode?: string | undefined;
  _defaultValueCode?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueDate?: string | undefined;
  _defaultValueDate?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueDateTime?: string | undefined;
  _defaultValueDateTime?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueDecimal?: number | undefined;
  _defaultValueDecimal?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueId?: id | undefined;
  _defaultValueId?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueInstant?: string | undefined;
  _defaultValueInstant?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueInteger?: number | undefined;
  _defaultValueInteger?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueMarkdown?: string | undefined;
  _defaultValueMarkdown?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueOid?: oid | undefined;
  _defaultValueOid?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValuePositiveInt?: number | undefined;
  _defaultValuePositiveInt?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueString?: string | undefined;
  _defaultValueString?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueTime?: time | undefined;
  _defaultValueTime?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueUnsignedInt?: unsignedInt | undefined;
  _defaultValueUnsignedInt?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueUri?: string | undefined;
  _defaultValueUri?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueUrl?: string | undefined;
  _defaultValueUrl?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueUuid?: uuid | undefined;
  _defaultValueUuid?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueAddress?: Address | undefined;
  _defaultValueAddress?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueAge?: Age | undefined;
  _defaultValueAge?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueAnnotation?: Annotation | undefined;
  _defaultValueAnnotation?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueAttachment?: Attachment | undefined;
  _defaultValueAttachment?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueCodeableConcept?: CodeableConcept | undefined;
  _defaultValueCodeableConcept?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueCodeableReference?: CodeableReference | undefined;
  _defaultValueCodeableReference?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueCoding?: Coding | undefined;
  _defaultValueCoding?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueContactPoint?: ContactPoint | undefined;
  _defaultValueContactPoint?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueCount?: Count | undefined;
  _defaultValueCount?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueDistance?: Distance | undefined;
  _defaultValueDistance?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueDuration?: Duration | undefined;
  _defaultValueDuration?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueHumanName?: HumanName | undefined;
  _defaultValueHumanName?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueIdentifier?: Identifier | undefined;
  _defaultValueIdentifier?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueMoney?: Money | undefined;
  _defaultValueMoney?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValuePeriod?: Period | undefined;
  _defaultValuePeriod?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueQuantity?: Quantity | undefined;
  _defaultValueQuantity?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueRange?: Range | undefined;
  _defaultValueRange?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueRatio?: Ratio | undefined;
  _defaultValueRatio?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueRatioRange?: RatioRange | undefined;
  _defaultValueRatioRange?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueReference?: Reference | undefined;
  _defaultValueReference?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueSampledData?: SampledData | undefined;
  _defaultValueSampledData?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueSignature?: Signature | undefined;
  _defaultValueSignature?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueTiming?: Timing | undefined;
  _defaultValueTiming?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueContactDetail?: ContactDetail | undefined;
  _defaultValueContactDetail?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueContributor?: Contributor | undefined;
  _defaultValueContributor?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueDataRequirement?: DataRequirement | undefined;
  _defaultValueDataRequirement?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueExpression?: Expression | undefined;
  _defaultValueExpression?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueParameterDefinition?: ParameterDefinition | undefined;
  _defaultValueParameterDefinition?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueRelatedArtifact?: RelatedArtifact | undefined;
  _defaultValueRelatedArtifact?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueTriggerDefinition?: TriggerDefinition | undefined;
  _defaultValueTriggerDefinition?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueUsageContext?: UsageContext | undefined;
  _defaultValueUsageContext?: Element | undefined;

          
            
  /**
 * The value that should be used if there is no value stated in the instance (e.g.
 * 'if not otherwise specified, the abstract is false').
 * Specifying a default value means that the property can never been unknown - it
 * must always have a value. Further, the default value can never be changed, or
 * changed in constraints on content models. Defining default values creates many
 * difficulties in implementation (e.g. when is a value missing?). For these
 * reasons, default values are (and should be) used extremely sparingly. 

No
 * default values are ever defined in the FHIR specification, nor can they be
 * defined in constraints ("profiles") on data types or resources. This element
 * only exists so that default values may be defined in logical models.
 */
  defaultValueDosage?: Dosage | undefined;
  _defaultValueDosage?: Element | undefined;

          
        
      
        
          
  /**
 * Provides a complete explanation of the meaning of the data element for human
 * readability.  For the case of elements derived from existing elements (e.g.
 * constraints), the definition SHALL be consistent with the base definition, but
 * convey the meaning of the element in the particular context of use of the
 * resource. (Note: The text you are reading is specified in
 * ElementDefinition.definition).
 * It is easy for a different definition to change the meaning of an element and
 * this can have nasty downstream consequences. Please be careful when providing
 * definitions in a profile.
 */
  definition?: string | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * A sample value for this element demonstrating the type of information that would
 * typically be found in the element.
 * Examples will most commonly be present for data where it's not implicitly
 * obvious from either the data type or value set what the values might be.  (I.e.
 * Example values for dates or quantities would generally be unnecessary.)  If the
 * example value is fully populated, the publication tool can generate an instance
 * automatically.
 */
  example?: Array<Element> | undefined;
  _example?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the purpose of this example amoung the set of examples.
 */
  label: string;
  _label?: Element | undefined;

        
      
        
          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueCanonical?: string | undefined;
  _valueCanonical?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueCode?: string | undefined;
  _valueCode?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueId?: id | undefined;
  _valueId?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueInstant?: string | undefined;
  _valueInstant?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueMarkdown?: string | undefined;
  _valueMarkdown?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueOid?: oid | undefined;
  _valueOid?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valuePositiveInt?: number | undefined;
  _valuePositiveInt?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueUnsignedInt?: unsignedInt | undefined;
  _valueUnsignedInt?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueUrl?: string | undefined;
  _valueUrl?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueUuid?: uuid | undefined;
  _valueUuid?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueAddress?: Address | undefined;
  _valueAddress?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueAge?: Age | undefined;
  _valueAge?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueAnnotation?: Annotation | undefined;
  _valueAnnotation?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueCodeableReference?: CodeableReference | undefined;
  _valueCodeableReference?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueContactPoint?: ContactPoint | undefined;
  _valueContactPoint?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueCount?: Count | undefined;
  _valueCount?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueDistance?: Distance | undefined;
  _valueDistance?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueDuration?: Duration | undefined;
  _valueDuration?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueHumanName?: HumanName | undefined;
  _valueHumanName?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueIdentifier?: Identifier | undefined;
  _valueIdentifier?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueMoney?: Money | undefined;
  _valueMoney?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueRatio?: Ratio | undefined;
  _valueRatio?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueRatioRange?: RatioRange | undefined;
  _valueRatioRange?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueSampledData?: SampledData | undefined;
  _valueSampledData?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueSignature?: Signature | undefined;
  _valueSignature?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueTiming?: Timing | undefined;
  _valueTiming?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueContactDetail?: ContactDetail | undefined;
  _valueContactDetail?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueContributor?: Contributor | undefined;
  _valueContributor?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueDataRequirement?: DataRequirement | undefined;
  _valueDataRequirement?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueExpression?: Expression | undefined;
  _valueExpression?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueParameterDefinition?: ParameterDefinition | undefined;
  _valueParameterDefinition?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  _valueRelatedArtifact?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  _valueTriggerDefinition?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueUsageContext?: UsageContext | undefined;
  _valueUsageContext?: Element | undefined;

          
            
  /**
 * The actual value for the element, which must be one of the types allowed for
 * this element.
 */
  valueDosage?: Dosage | undefined;
  _valueDosage?: Element | undefined;

          
        
      
        
          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedBase64Binary?: string | undefined;
  _fixedBase64Binary?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedBoolean?: boolean | undefined;
  _fixedBoolean?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedCanonical?: string | undefined;
  _fixedCanonical?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedCode?: string | undefined;
  _fixedCode?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedDate?: string | undefined;
  _fixedDate?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedDateTime?: string | undefined;
  _fixedDateTime?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedDecimal?: number | undefined;
  _fixedDecimal?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedId?: id | undefined;
  _fixedId?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedInstant?: string | undefined;
  _fixedInstant?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedInteger?: number | undefined;
  _fixedInteger?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedMarkdown?: string | undefined;
  _fixedMarkdown?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedOid?: oid | undefined;
  _fixedOid?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedPositiveInt?: number | undefined;
  _fixedPositiveInt?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedString?: string | undefined;
  _fixedString?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedTime?: time | undefined;
  _fixedTime?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedUnsignedInt?: unsignedInt | undefined;
  _fixedUnsignedInt?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedUri?: string | undefined;
  _fixedUri?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedUrl?: string | undefined;
  _fixedUrl?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedUuid?: uuid | undefined;
  _fixedUuid?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedAddress?: Address | undefined;
  _fixedAddress?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedAge?: Age | undefined;
  _fixedAge?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedAnnotation?: Annotation | undefined;
  _fixedAnnotation?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedAttachment?: Attachment | undefined;
  _fixedAttachment?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedCodeableConcept?: CodeableConcept | undefined;
  _fixedCodeableConcept?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedCodeableReference?: CodeableReference | undefined;
  _fixedCodeableReference?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedCoding?: Coding | undefined;
  _fixedCoding?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedContactPoint?: ContactPoint | undefined;
  _fixedContactPoint?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedCount?: Count | undefined;
  _fixedCount?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedDistance?: Distance | undefined;
  _fixedDistance?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedDuration?: Duration | undefined;
  _fixedDuration?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedHumanName?: HumanName | undefined;
  _fixedHumanName?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedIdentifier?: Identifier | undefined;
  _fixedIdentifier?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedMoney?: Money | undefined;
  _fixedMoney?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedPeriod?: Period | undefined;
  _fixedPeriod?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedQuantity?: Quantity | undefined;
  _fixedQuantity?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedRange?: Range | undefined;
  _fixedRange?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedRatio?: Ratio | undefined;
  _fixedRatio?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedRatioRange?: RatioRange | undefined;
  _fixedRatioRange?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedReference?: Reference | undefined;
  _fixedReference?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedSampledData?: SampledData | undefined;
  _fixedSampledData?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedSignature?: Signature | undefined;
  _fixedSignature?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedTiming?: Timing | undefined;
  _fixedTiming?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedContactDetail?: ContactDetail | undefined;
  _fixedContactDetail?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedContributor?: Contributor | undefined;
  _fixedContributor?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedDataRequirement?: DataRequirement | undefined;
  _fixedDataRequirement?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedExpression?: Expression | undefined;
  _fixedExpression?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedParameterDefinition?: ParameterDefinition | undefined;
  _fixedParameterDefinition?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedRelatedArtifact?: RelatedArtifact | undefined;
  _fixedRelatedArtifact?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedTriggerDefinition?: TriggerDefinition | undefined;
  _fixedTriggerDefinition?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedUsageContext?: UsageContext | undefined;
  _fixedUsageContext?: Element | undefined;

          
            
  /**
 * Specifies a value that SHALL be exactly the value  for this element in the
 * instance. For purposes of comparison, non-significant whitespace is ignored, and
 * all values must be an exact match (case and accent sensitive). Missing
 * elements/attributes must also be missing.
 * This is not recommended for Coding and CodeableConcept since these often have
 * highly contextual properties such as version or display.
 */
  fixedDosage?: Dosage | undefined;
  _fixedDosage?: Element | undefined;

          
        
      
        
          
  /**
 * If true, the value of this element affects the interpretation of the element or
 * resource that contains it, and the value of the element cannot be ignored.
 * Typically, this is used for status, negation and qualification codes. The effect
 * of this is that the element cannot be ignored by systems: they SHALL either
 * recognize the element and process it, and/or a pre-determination has been made
 * that it is not relevant to their particular system.
 * Only the definition of an element can set IsModifier true - either the
 * specification itself or where an extension is originally defined. Once set, it
 * cannot be changed in derived profiles. An element/extension that has
 * isModifier=true SHOULD also have a minimum cardinality of 1, so that there is no
 * lack of clarity about what to do if it is missing. If it can be missing, the
 * definition SHALL make the meaning of a missing element clear.
 */
  isModifier?: boolean | undefined;
  _isModifier?: Element | undefined;

        
      
        
          
  /**
 * Explains how that element affects the interpretation of the resource or element
 * that contains it.
 */
  isModifierReason?: string | undefined;
  _isModifierReason?: Element | undefined;

        
      
        
          
  /**
 * Whether the element should be included if a client requests a search with the
 * parameter _summary=true.
 * Some resources include a set of simple metadata, and some very large data. This
 * element is used to reduce the quantity of data returned in searches. Note that
 * servers may pre-cache summarized resources for optimal performance, so servers
 * might not support per-profile use of the isSummary flag. When a request is made
 * with _summary=true, serailisers only include elements marked as 'isSummary =
 * true'. Other than Attachment.data, all data type properties are included in the
 * summary form. In resource and data type definitions, if an element is at the
 * root or has a parent that is 'mustSupport' and the minimum cardinality is 1 or
 * the element is a modifier, it must be marked as isSummary=true.
 */
  isSummary?: boolean | undefined;
  _isSummary?: Element | undefined;

        
      
        
          
  /**
 * A single preferred label which is the text to display beside the element
 * indicating its meaning or to use to prompt for the element in a user display or
 * form.
 * See also the extension
 * (http://hl7.org/fhir/StructureDefinition/elementdefinition-question)[extension-e
 * lementdefinition-question.html].
 */
  label?: string | undefined;
  _label?: Element | undefined;

        
      
        
          
  /**
 * Identifies a concept from an external specification that roughly corresponds to
 * this element.
 * Mappings are not necessarily specific enough for safe translation.
 */
  mapping?: Array<Element> | undefined;
  _mapping?: Element[] | undefined;

        
      
        
          
  /**
 * Comments that provide information about the mapping or its use.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * An internal reference to the definition of a mapping.
 */
  identity: id;
  _identity?: Element | undefined;

        
      
        
          
  /**
 * Identifies the computable language in which mapping.map is expressed.
 * If omitted, then there can be no expectation of computational interpretation of
 * the mapping.
 */
  language?: string | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * Expresses what part of the target specification corresponds to this element.
 * For most mappings, the syntax is undefined.  Syntax will be provided for
 * mappings to the RIM.  Multiple mappings may be possible and may include
 * constraints on other resource elements that identify when a particular mapping
 * applies.
 */
  map: string;
  _map?: Element | undefined;

        
      
        
          
  /**
 * The maximum number of times this element is permitted to appear in the instance.
 */
  max?: string | undefined;
  _max?: Element | undefined;

        
      
        
          
  /**
 * Indicates the maximum length in characters that is permitted to be present in
 * conformant instances and which is expected to be supported by conformant
 * consumers that support the element.
 * Receivers are not required to reject instances that exceed the maximum length.
 * The full length could be stored.  In some cases, data might be truncated, though
 * truncation should be undertaken with care and an understanding of the
 * consequences of doing so. If not specified, there is no conformance expectation
 * for length support.
 */
  maxLength?: number | undefined;
  _maxLength?: Element | undefined;

        
      
        
          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueDate?: string | undefined;
  _maxValueDate?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueDateTime?: string | undefined;
  _maxValueDateTime?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueInstant?: string | undefined;
  _maxValueInstant?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueTime?: time | undefined;
  _maxValueTime?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueDecimal?: number | undefined;
  _maxValueDecimal?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueInteger?: number | undefined;
  _maxValueInteger?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValuePositiveInt?: number | undefined;
  _maxValuePositiveInt?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueUnsignedInt?: unsignedInt | undefined;
  _maxValueUnsignedInt?: Element | undefined;

          
            
  /**
 * The maximum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the maxValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of maxValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is added to the current clock
 * to determine the maximum allowable value.   A maximum value for a Quantity is
 * interpreted as an canonical maximum - e.g. you cannot provide 10g if the maximum
 * value is 50mg.
 */
  maxValueQuantity?: Quantity | undefined;
  _maxValueQuantity?: Element | undefined;

          
        
      
        
          
  /**
 * The Implicit meaning that is to be understood when this element is missing (e.g.
 * 'when this element is missing, the period is ongoing').
 * Implicit meanings for missing values can only be specified on a resource, data
 * type, or extension definition, and never in a profile that applies to one of
 * these. An implicit meaning for a missing value can never be changed, and
 * specifying one has the consequence that constraining its use in profiles
 * eliminates use cases as possibilities, not merely moving them out of scope.
 */
  meaningWhenMissing?: string | undefined;
  _meaningWhenMissing?: Element | undefined;

        
      
        
          
  /**
 * The minimum number of times this element SHALL appear in the instance.
 */
  min?: unsignedInt | undefined;
  _min?: Element | undefined;

        
      
        
          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueDate?: string | undefined;
  _minValueDate?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueDateTime?: string | undefined;
  _minValueDateTime?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueInstant?: string | undefined;
  _minValueInstant?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueTime?: time | undefined;
  _minValueTime?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueDecimal?: number | undefined;
  _minValueDecimal?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueInteger?: number | undefined;
  _minValueInteger?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValuePositiveInt?: number | undefined;
  _minValuePositiveInt?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueUnsignedInt?: unsignedInt | undefined;
  _minValueUnsignedInt?: Element | undefined;

          
            
  /**
 * The minimum allowed value for the element. The value is inclusive. This is
 * allowed for the types date, dateTime, instant, time, decimal, integer, and
 * Quantity.
 * Except for date/date/instant, the type of the minValue[x] SHALL be the same as
 * the specified type of the element. For the date/dateTime/instant values, the
 * type of minValue[x] SHALL be either the same, or a
 * [Duration](datatypes.html#Duration) which specifies a relative time limit to the
 * current time. The duration value is positive, and is subtracted from the current
 * clock to determine the minimum allowable value.   A minimum value for a Quantity
 * is interpreted as an canonical minimum - e.g. you cannot provide 100mg if the
 * minimum value is 10g.
 */
  minValueQuantity?: Quantity | undefined;
  _minValueQuantity?: Element | undefined;

          
        
      
        
          
  /**
 * If true, implementations that produce or consume resources SHALL provide
 * "support" for the element in some meaningful way.  If false, the element may be
 * ignored and not supported. If false, whether to populate or use the data element
 * in any way is at the discretion of the implementation.
 * "Something useful" is context dependent and impossible to describe in the base
 * FHIR specification. For this reason, tue mustSupport flag is never set to true
 * by the FHIR specification itself - it is only set to true in profiles.  A
 * profile on a type can always make musSupport = true if it is false in the base
 * type but cannot make mustSupport = false if it is true in the base type.   This
 * is done in [Resource Profiles](profiling.html#mustsupport), where the profile
 * labels an element as mustSupport=true. When a profile does this, it SHALL also
 * make clear exactly what kind of "support" is required, as this can mean many
 * things.    Note that an element that has the property IsModifier is not
 * necessarily a "key" element (e.g. one of the important elements to make use of
 * the resource), nor is it automatically mustSupport - however both of these
 * things are more likely to be true for IsModifier elements than for other
 * elements.
 */
  mustSupport?: boolean | undefined;
  _mustSupport?: Element | undefined;

        
      
        
          
  /**
 * If present, indicates that the order of the repeating element has meaning and
 * describes what that meaning is.  If absent, it means that the order of the
 * element has no meaning.
 * This element can only be asserted on repeating elements and can only be
 * introduced when defining resources or data types.  It can be further refined
 * profiled elements but if absent in the base type, a profile cannot assert
 * meaning.
 */
  orderMeaning?: string | undefined;
  _orderMeaning?: Element | undefined;

        
      
        
          
  /**
 * The path identifies the element and is expressed as a "."-separated list of
 * ancestor elements, beginning with the name of the resource or extension.
 */
  path: string;
  _path?: Element | undefined;

        
      
        
          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternBase64Binary?: string | undefined;
  _patternBase64Binary?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternBoolean?: boolean | undefined;
  _patternBoolean?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternCanonical?: string | undefined;
  _patternCanonical?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternCode?: string | undefined;
  _patternCode?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternDate?: string | undefined;
  _patternDate?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternDateTime?: string | undefined;
  _patternDateTime?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternDecimal?: number | undefined;
  _patternDecimal?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternId?: id | undefined;
  _patternId?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternInstant?: string | undefined;
  _patternInstant?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternInteger?: number | undefined;
  _patternInteger?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternMarkdown?: string | undefined;
  _patternMarkdown?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternOid?: oid | undefined;
  _patternOid?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternPositiveInt?: number | undefined;
  _patternPositiveInt?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternString?: string | undefined;
  _patternString?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternTime?: time | undefined;
  _patternTime?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternUnsignedInt?: unsignedInt | undefined;
  _patternUnsignedInt?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternUri?: string | undefined;
  _patternUri?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternUrl?: string | undefined;
  _patternUrl?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternUuid?: uuid | undefined;
  _patternUuid?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternAddress?: Address | undefined;
  _patternAddress?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternAge?: Age | undefined;
  _patternAge?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternAnnotation?: Annotation | undefined;
  _patternAnnotation?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternAttachment?: Attachment | undefined;
  _patternAttachment?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternCodeableConcept?: CodeableConcept | undefined;
  _patternCodeableConcept?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternCodeableReference?: CodeableReference | undefined;
  _patternCodeableReference?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternCoding?: Coding | undefined;
  _patternCoding?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternContactPoint?: ContactPoint | undefined;
  _patternContactPoint?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternCount?: Count | undefined;
  _patternCount?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternDistance?: Distance | undefined;
  _patternDistance?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternDuration?: Duration | undefined;
  _patternDuration?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternHumanName?: HumanName | undefined;
  _patternHumanName?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternIdentifier?: Identifier | undefined;
  _patternIdentifier?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternMoney?: Money | undefined;
  _patternMoney?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternPeriod?: Period | undefined;
  _patternPeriod?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternQuantity?: Quantity | undefined;
  _patternQuantity?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternRange?: Range | undefined;
  _patternRange?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternRatio?: Ratio | undefined;
  _patternRatio?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternRatioRange?: RatioRange | undefined;
  _patternRatioRange?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternReference?: Reference | undefined;
  _patternReference?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternSampledData?: SampledData | undefined;
  _patternSampledData?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternSignature?: Signature | undefined;
  _patternSignature?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternTiming?: Timing | undefined;
  _patternTiming?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternContactDetail?: ContactDetail | undefined;
  _patternContactDetail?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternContributor?: Contributor | undefined;
  _patternContributor?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternDataRequirement?: DataRequirement | undefined;
  _patternDataRequirement?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternExpression?: Expression | undefined;
  _patternExpression?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternParameterDefinition?: ParameterDefinition | undefined;
  _patternParameterDefinition?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternRelatedArtifact?: RelatedArtifact | undefined;
  _patternRelatedArtifact?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternTriggerDefinition?: TriggerDefinition | undefined;
  _patternTriggerDefinition?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternUsageContext?: UsageContext | undefined;
  _patternUsageContext?: Element | undefined;

          
            
  /**
 * Specifies a value that the value in the instance SHALL follow - that is, any
 * value in the pattern must be found in the instance. Other additional values may
 * be found too. This is effectively constraint by example.  

When pattern[x] is
 * used to constrain a primitive, it means that the value provided in the
 * pattern[x] must match the instance value exactly.

When pattern[x] is used to
 * constrain an array, it means that each element provided in the pattern[x] array
 * must (recursively) match at least one element from the instance array.

When
 * pattern[x] is used to constrain a complex object, it means that each property in
 * the pattern must be present in the complex object, and its value must
 * recursively match -- i.e.,

1. If primitive: it must match exactly the pattern
 * value
2. If a complex object: it must match (recursively) the pattern value
3.
 * If an array: it must match (recursively) the pattern value.
 * Mostly used for fixing values of CodeableConcept. In general, pattern[x] is not
 * intended for use with primitive types, where is has the same meaning as
 * fixed[x].
 */
  patternDosage?: Dosage | undefined;
  _patternDosage?: Element | undefined;

          
        
      
        
          
  /**
 * Codes that define how this element is represented in instances, when the
 * deviation varies from the normal case.
 * In resources, this is rarely used except for special cases where the
 * representation deviates from the normal, and can only be done in the base
 * standard (and profiles must reproduce what the base standard does). This element
 * is used quite commonly in Logical models when the logical models represent a
 * specific serialization format (e.g. CDA, v2 etc.).
 */
  representation?: Array<string> | undefined;
  _representation?: Element[] | undefined;

        
      
        
          
  /**
 * This element is for traceability of why the element was created and why the
 * constraints exist as they do. This may be used to point to source materials or
 * specifications that drove the structure of this element.
 * This element does not describe the usage of the element (that's done in
 * comments), rather it's for traceability of *why* the element is either needed or
 * why the constraints exist as they do.  This may be used to point to source
 * materials or specifications that drove the structure of this data element.
 */
  requirements?: string | undefined;
  _requirements?: Element | undefined;

        
      
        
          
  /**
 * A concise description of what this element means (e.g. for use in autogenerated
 * summaries).
 * It is easy for a different short definition to change the meaning of an element
 * and this can have nasty downstream consequences. Please be careful when
 * providing short definitions in a profile.
 */
  short?: string | undefined;
  _short?: Element | undefined;

        
      
        
          
  /**
 * If true, indicates that this slice definition is constraining a slice definition
 * with the same name in an inherited profile. If false, the slice is not
 * overriding any slice in an inherited profile. If missing, the slice might or
 * might not be overriding a slice in an inherited profile, depending on the
 * sliceName.
 * If set to true, an ancestor profile SHALL have a slicing definition with this
 * name.  If set to false, no ancestor profile is permitted to have a slicing
 * definition with this name.
 */
  sliceIsConstraining?: boolean | undefined;
  _sliceIsConstraining?: Element | undefined;

        
      
        
          
  /**
 * The name of this element definition slice, when slicing is working. The name
 * must be a token with no dots or spaces. This is a unique name referring to a
 * specific set of constraints applied to this element, used to provide a name to
 * different slices of the same element.
 * The name SHALL be unique within the structure within the context of the
 * constrained resource element.  (Though to avoid confusion, uniqueness across all
 * elements is recommended.).
 */
  sliceName?: string | undefined;
  _sliceName?: Element | undefined;

        
      
        
          
  /**
 * Indicates that the element is sliced into a set of alternative definitions (i.e.
 * in a structure definition, there are multiple different constraints on a single
 * element in the base resource). Slicing can be used in any resource that has
 * cardinality ..* on the base resource, or any resource with a choice of types.
 * The set of slices is any elements that come after this in the element sequence
 * that have the same path, until a shorter path occurs (the shorter path
 * terminates the set).
 * The first element in the sequence, the one that carries the slicing, is the
 * definition that applies to all the slices. This is based on the unconstrained
 * element, but can apply any constraints as appropriate. This may include the
 * common constraints on the children of the element.
 */
  slicing?: Element | undefined;
  _slicing?: Element | undefined;

        
      
        
          
  /**
 * A human-readable text description of how the slicing works. If there is no
 * discriminator, this is required to be present to provide whatever information is
 * possible about how the slices can be differentiated.
 * If it's really not possible to differentiate them, the design should be
 * re-evaluated to make the content usable.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Designates which child elements are used to discriminate between the slices when
 * processing an instance. If one or more discriminators are provided, the value of
 * the child elements in the instance data SHALL completely distinguish which slice
 * the element in the resource matches based on the allowed values for those
 * elements in each of the slices.
 * If there is no discriminator, the content is hard to process, so this should be
 * avoided.
 */
  discriminator?: Array<Element> | undefined;
  _discriminator?: Element[] | undefined;

        
      
        
          
  /**
 * A FHIRPath expression, using [the simple subset of
 * FHIRPath](fhirpath.html#simple), that is used to identify the element on which
 * discrimination is based.
 * The only FHIRPath functions that are allowed are as(type), resolve(), and
 * extension(url).
 */
  path: string;
  _path?: Element | undefined;

        
      
        
          
  /**
 * How the element value is interpreted when discrimination is evaluated.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * If the matching elements have to occur in the same order as defined in the
 * profile.
 * Order should only be required when it is a pressing concern for presentation.
 * Profile authors should consider making the order a feature of the rules about
 * the narrative, not the rules about the data - requiring ordered data makes the
 * profile much less re-usable.
 */
  ordered?: boolean | undefined;
  _ordered?: Element | undefined;

        
      
        
          
  /**
 * Whether additional slices are allowed or not. When the slices are ordered,
 * profile authors can also say that additional slices are only allowed at the end.
 * Allowing additional elements makes for a much for flexible template - it's open
 * for use in wider contexts, but also means that the content of the resource is
 * not closed, and applications have to decide how to handle content not described
 * by the profile.
 */
  rules: string;
  _rules?: Element | undefined;

        
      
        
          
  /**
 * The data type or resource that the value of this element is permitted to be.
 * The Type of the element can be left blank in a differential constraint, in which
 * case the type is inherited from the resource. Abstract types are not permitted
 * to appear as a type when multiple types are listed.  (I.e. Abstract types cannot
 * be part of a choice).
 */
  type?: Array<Element> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * If the type is a reference to another resource, how the resource is or can be
 * aggregated - is it a contained resource, or a reference, and if the context is a
 * bundle, is it included in the bundle.
 * See [Aggregation Rules](elementdefinition.html#aggregation) for further
 * clarification.
 */
  aggregation?: Array<string> | undefined;
  _aggregation?: Element[] | undefined;

        
      
        
          
  /**
 * URL of Data type or Resource that is a(or the) type used for this element.
 * References are URLs that are relative to http://hl7.org/fhir/StructureDefinition
 * e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string.
 * Absolute URLs are only allowed in logical models.
 * If the element is a reference to another resource, this element contains
 * "Reference", and the targetProfile element defines what resources can be
 * referenced. The targetProfile may be a reference to the general definition of a
 * resource (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Identifies a profile structure or implementation Guide that applies to the
 * datatype this element refers to. If any profiles are specified, then the content
 * must conform to at least one of them. The URL can be a local reference - to a
 * contained StructureDefinition, or a reference to another StructureDefinition or
 * Implementation Guide by a canonical URL. When an implementation guide is
 * specified, the type SHALL conform to at least one profile defined in the
 * implementation guide.
 * It is possible to profile  backbone element (e.g. part of a resource), using the
 * [profile-element](extension-elementdefinition-profile-element.html) extension.
 */
  profile?: Array<string> | undefined;
  _profile?: Element[] | undefined;

        
      
        
          
  /**
 * Used when the type is "Reference" or "canonical", and identifies a profile
 * structure or implementation Guide that applies to the target of the reference
 * this element refers to. If any profiles are specified, then the content must
 * conform to at least one of them. The URL can be a local reference - to a
 * contained StructureDefinition, or a reference to another StructureDefinition or
 * Implementation Guide by a canonical URL. When an implementation guide is
 * specified, the target resource SHALL conform to at least one profile defined in
 * the implementation guide.
 */
  targetProfile?: Array<string> | undefined;
  _targetProfile?: Element[] | undefined;

        
      
        
          
  /**
 * Whether this reference needs to be version specific or version independent, or
 * whether either can be used.
 * The base specification never makes a rule as to which form is allowed, but
 * implementation guides may do this. See [Aggregation
 * Rules](elementdefinition.html#aggregation) for further clarification.
 */
  versioning?: string | undefined;
  _versioning?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Encounter
 * 
 * An interaction between a patient and healthcare provider(s) for the purpose of
 * providing healthcare service(s) or assessing the health status of a patient.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Encounter.html}
 */
    export interface Encounter extends DomainResource {
      
      readonly resourceType: "Encounter";
      

      
        
          
  /**
 * The set of accounts that may be used for billing for this Encounter.
 * The billing system may choose to allocate billable items associated with the
 * Encounter to different referenced Accounts based on internal business rules.
 */
  account?: Array<Reference> | undefined;
  _account?: Element[] | undefined;

        
      
        
          
  /**
 * The appointment that scheduled this encounter.
 */
  appointment?: Array<Reference> | undefined;
  _appointment?: Element[] | undefined;

        
      
        
          
  /**
 * The request this encounter satisfies (e.g. incoming referral or procedure
 * request).
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Concepts representing classification of patient encounter such as ambulatory
 * (outpatient), inpatient, emergency, home health or others due to local
 * variations.
 */
  class: Coding;
  _class?: Element | undefined;

        
      
        
          
  /**
 * The class history permits the tracking of the encounters transitions without
 * needing to go  through the resource history.  This would be used for a case
 * where an admission starts of as an emergency encounter, then transitions into an
 * inpatient scenario. Doing this and not restarting a new encounter ensures that
 * any lab/diagnostic results can more easily follow the patient and not require
 * re-processing and not get lost or cancelled during a kind of discharge from
 * emergency to inpatient.
 */
  classHistory?: Array<BackboneElement> | undefined;
  _classHistory?: Element[] | undefined;

        
      
        
          
  /**
 * inpatient | outpatient | ambulatory | emergency +.
 */
  class: Coding;
  _class?: Element | undefined;

        
      
        
          
  /**
 * The time that the episode was in the specified class.
 */
  period: Period;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The list of diagnosis relevant to this encounter.
 */
  diagnosis?: Array<BackboneElement> | undefined;
  _diagnosis?: Element[] | undefined;

        
      
        
          
  /**
 * Reason the encounter takes place, as specified using information from another
 * resource. For admissions, this is the admission diagnosis. The indication will
 * typically be a Condition (with other resources referenced in the
 * evidence.detail), or a Procedure.
 * For systems that need to know which was the primary diagnosis, these will be
 * marked with the standard extension primaryDiagnosis (which is a sequence value
 * rather than a flag, 1 = primary diagnosis).
 */
  condition: Reference;
  _condition?: Element | undefined;

        
      
        
          
  /**
 * Ranking of the diagnosis (for each role type).
 */
  rank?: number | undefined;
  _rank?: Element | undefined;

        
      
        
          
  /**
 * Role that this diagnosis has within the encounter (e.g. admission, billing,
 * discharge …).
 */
  use?: CodeableConcept | undefined;
  _use?: Element | undefined;

        
      
        
          
  /**
 * Where a specific encounter should be classified as a part of a specific
 * episode(s) of care this field should be used. This association can facilitate
 * grouping of related encounters together for a specific purpose, such as
 * government reporting, issue tracking, association via a common problem.  The
 * association is recorded on the encounter as these are typically created after
 * the episode of care and grouped on entry rather than editing the episode of care
 * to append another encounter to it (the episode of care could span years).
 */
  episodeOfCare?: Array<Reference> | undefined;
  _episodeOfCare?: Element[] | undefined;

        
      
        
          
  /**
 * Details about the admission to a healthcare service.
 * An Encounter may cover more than just the inpatient stay. Contexts such as
 * outpatients, community clinics, and aged care facilities are also included.The
 * duration recorded in the period of this encounter covers the entire scope of
 * this hospitalization record.
 */
  hospitalization?: BackboneElement | undefined;
  _hospitalization?: Element | undefined;

        
      
        
          
  /**
 * From where patient was admitted (physician referral, transfer).
 */
  admitSource?: CodeableConcept | undefined;
  _admitSource?: Element | undefined;

        
      
        
          
  /**
 * Location/organization to which the patient is discharged.
 */
  destination?: Reference | undefined;
  _destination?: Element | undefined;

        
      
        
          
  /**
 * Diet preferences reported by the patient.
 * For example, a patient may request both a dairy-free and nut-free diet
 * preference (not mutually exclusive).
 */
  dietPreference?: Array<CodeableConcept> | undefined;
  _dietPreference?: Element[] | undefined;

        
      
        
          
  /**
 * Category or kind of location after discharge.
 */
  dischargeDisposition?: CodeableConcept | undefined;
  _dischargeDisposition?: Element | undefined;

        
      
        
          
  /**
 * The location/organization from which the patient came before admission.
 */
  origin?: Reference | undefined;
  _origin?: Element | undefined;

        
      
        
          
  /**
 * Pre-admission identifier.
 */
  preAdmissionIdentifier?: Identifier | undefined;
  _preAdmissionIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Whether this hospitalization is a readmission and why if known.
 */
  reAdmission?: CodeableConcept | undefined;
  _reAdmission?: Element | undefined;

        
      
        
          
  /**
 * Any special requests that have been made for this hospitalization encounter,
 * such as the provision of specific equipment or other things.
 */
  specialArrangement?: Array<CodeableConcept> | undefined;
  _specialArrangement?: Element[] | undefined;

        
      
        
          
  /**
 * Special courtesies (VIP, board member).
 */
  specialCourtesy?: Array<CodeableConcept> | undefined;
  _specialCourtesy?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier(s) by which this encounter is known.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Quantity of time the encounter lasted. This excludes the time during leaves of
 * absence.
 * May differ from the time the Encounter.period lasted because of leave of
 * absence.
 */
  length?: Duration | undefined;
  _length?: Element | undefined;

        
      
        
          
  /**
 * List of locations where  the patient has been during this encounter.
 * Virtual encounters can be recorded in the Encounter by specifying a location
 * reference to a location of type "kind" such as "client's home" and an
 * encounter.class = "virtual".
 */
  location?: Array<BackboneElement> | undefined;
  _location?: Element[] | undefined;

        
      
        
          
  /**
 * The location where the encounter takes place.
 */
  location: Reference;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Time period during which the patient was present at the location.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * This will be used to specify the required levels (bed/ward/room/etc.) desired to
 * be recorded to simplify either messaging or query.
 * This information is de-normalized from the Location resource to support the
 * easier understanding of the encounter resource and processing in messaging or
 * query.

There may be many levels in the hierachy, and this may only pic specific
 * levels that are required for a specific usage scenario.
 */
  physicalType?: CodeableConcept | undefined;
  _physicalType?: Element | undefined;

        
      
        
          
  /**
 * The status of the participants' presence at the specified location during the
 * period specified. If the participant is no longer at the location, then the
 * period will have an end date/time.
 * When the patient is no longer active at a location, then the period end date is
 * entered, and the status may be changed to completed.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The list of people responsible for providing the service.
 */
  participant?: Array<BackboneElement> | undefined;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * Persons involved in the encounter other than the patient.
 */
  individual?: Reference | undefined;
  _individual?: Element | undefined;

        
      
        
          
  /**
 * The period of time that the specified participant participated in the encounter.
 * These can overlap or be sub-sets of the overall encounter's period.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Role of participant in encounter.
 * The participant type indicates how an individual participates in an encounter.
 * It includes non-practitioner participants, and for practitioners this is to
 * describe the action type in the context of this encounter (e.g. Admitting Dr,
 * Attending Dr, Translator, Consulting Dr). This is different to the practitioner
 * roles which are functional roles, derived from terms of employment, education,
 * licensing, etc.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * Another Encounter of which this encounter is a part of (administratively or in
 * time).
 * This is also used for associating a child's encounter back to the mother's
 * encounter.Refer to the Notes section in the Patient resource for further
 * details.
 */
  partOf?: Reference | undefined;
  _partOf?: Element | undefined;

        
      
        
          
  /**
 * The start and end time of the encounter.
 * If not (yet) known, the end of the Period may be omitted.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Indicates the urgency of the encounter.
 */
  priority?: CodeableConcept | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * Reason the encounter takes place, expressed as a code. For admissions, this can
 * be used for a coded admission diagnosis.
 * For systems that need to know which was the primary diagnosis, these will be
 * marked with the standard extension primaryDiagnosis (which is a sequence value
 * rather than a flag, 1 = primary diagnosis).
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Reason the encounter takes place, expressed as a code. For admissions, this can
 * be used for a coded admission diagnosis.
 * For systems that need to know which was the primary diagnosis, these will be
 * marked with the standard extension primaryDiagnosis (which is a sequence value
 * rather than a flag, 1 = primary diagnosis).
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The organization that is primarily responsible for this Encounter's services.
 * This MAY be the same as the organization on the Patient record, however it could
 * be different, such as if the actor performing the services was from an external
 * organization (which may be billed seperately) for an external consultation.
 * Refer to the example bundle showing an abbreviated set of Encounters for a
 * colonoscopy.
 */
  serviceProvider?: Reference | undefined;
  _serviceProvider?: Element | undefined;

        
      
        
          
  /**
 * Broad categorization of the service that is to be provided (e.g. cardiology).
 */
  serviceType?: CodeableConcept | undefined;
  _serviceType?: Element | undefined;

        
      
        
          
  /**
 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
 * Note that internal business rules will determine the appropriate transitions
 * that may occur between statuses (and also classes).
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The status history permits the encounter resource to contain the status history
 * without needing to read through the historical versions of the resource, or even
 * have the server store them.
 * The current status is always found in the current version of the resource, not
 * the status history.
 */
  statusHistory?: Array<BackboneElement> | undefined;
  _statusHistory?: Element[] | undefined;

        
      
        
          
  /**
 * The time that the episode was in the specified status.
 */
  period: Period;
  _period?: Element | undefined;

        
      
        
          
  /**
 * planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The patient or group present at the encounter.
 * While the encounter is always about the patient, the patient might not actually
 * be known in all contexts of use, and there may be a group of patients that could
 * be anonymous (such as in a group therapy for Alcoholics Anonymous - where the
 * recording of the encounter could be used for billing on the number of
 * people/staff and not important to the context of the specific patients) or
 * alternately in veterinary care a herd of sheep receiving treatment (where the
 * animals are not individually tracked).
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled
 * nursing, rehabilitation).
 * Since there are many ways to further classify encounters, this element is 0..*.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Endpoint
 * 
 * The technical details of an endpoint that can be used for electronic services,
 * such as for web services providing XDS.b or a REST endpoint for another FHIR
 * server. This may include any security context information.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Endpoint.html}
 */
    export interface Endpoint extends DomainResource {
      
      readonly resourceType: "Endpoint";
      

      
        
          
  /**
 * The uri that describes the actual end-point to connect to.
 * For rest-hook, and websocket, the end-point must be an http: or https: URL; for
 * email, a mailto: url, for sms, a tel: url, and for message the endpoint can be
 * in any form of url the server understands (usually, http: or mllp:). The URI is
 * allowed to be relative; in which case, it is relative to the server end-point
 * (since there may be more than one, clients should avoid using relative
 * URIs)

This address will be to the service base, without any parameters, or
 * sub-services or resources tacked on.

E.g. for a WADO-RS endpoint, the url
 * should be "https://pacs.hospital.org/wado-rs"

and not
 * "https://pacs.hospital.org/wado-rs/studies/1.2.250.1.59.40211.12345678.678910/se
 * ries/1.2.250.1.59.40211.789001276.14556172.67789/instances/...".
 */
  address: string;
  _address?: Element | undefined;

        
      
        
          
  /**
 * A coded value that represents the technical details of the usage of this
 * endpoint, such as what WSDLs should be used in what way. (e.g.
 * XDS.b/DICOM/cds-hook).
 * For additional connectivity details for the protocol, extensions will be used at
 * this point, as in the XDS example.
 */
  connectionType: Coding;
  _connectionType?: Element | undefined;

        
      
        
          
  /**
 * Contact details for a human to contact about the subscription. The primary use
 * of this for system administrator troubleshooting.
 */
  contact?: Array<ContactPoint> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * Additional headers / information to send as part of the notification.
 * Exactly what these mean depends on the channel type. The can convey additional
 * information to the recipient and/or meet security requirements.
 */
  header?: Array<string> | undefined;
  _header?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier for the organization that is used to identify the endpoint across
 * multiple disparate systems.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The organization that manages this endpoint (even if technically another
 * organization is hosting this in the cloud, it is the organization associated
 * with the data).
 * This property is not typically used when searching for Endpoint resources for
 * usage. The typical usage is via the reference from an applicable
 * Organization/Location/Practitioner resource, which is where the context is
 * provided. Multiple Locations may reference a single endpoint, and don't have to
 * be within the same organization resource, but most likely within the same
 * organizational hierarchy.
 */
  managingOrganization?: Reference | undefined;
  _managingOrganization?: Element | undefined;

        
      
        
          
  /**
 * A friendly name that this endpoint can be referred to with.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The mime type to send the payload in - e.g. application/fhir+xml,
 * application/fhir+json. If the mime type is not specified, then the sender could
 * send any content (including no content depending on the connectionType).
 * Sending the payload has obvious security consequences. The server is responsible
 * for ensuring that the content is appropriately secured.
 */
  payloadMimeType?: Array<string> | undefined;
  _payloadMimeType?: Element[] | undefined;

        
      
        
          
  /**
 * The payload type describes the acceptable content that can be communicated on
 * the endpoint.
 * The payloadFormat describes the serialization format of the data, where the
 * payloadType indicates the specific document/schema that is being transferred;
 * e.g. DischargeSummary or CarePlan.
 */
  payloadType: Array<CodeableConcept>;
  _payloadType?: Element[] | undefined;

        
      
        
          
  /**
 * The interval during which the endpoint is expected to be operational.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * active | suspended | error | off | test.
 * This element is labeled as a modifier because the status contains codes that
 * mark the endpoint as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  
    /**
 * EnrollmentRequest
 * 
 * This resource provides the insurance enrollment details to the insurer regarding
 * a specified coverage.
 * 
 * @see {@link http://hl7.org/fhir/R4B/EnrollmentRequest.html}
 */
    export interface EnrollmentRequest extends DomainResource {
      
      readonly resourceType: "EnrollmentRequest";
      

      
        
          
  /**
 * Patient Resource.
 */
  candidate?: Reference | undefined;
  _candidate?: Element | undefined;

        
      
        
          
  /**
 * Reference to the program or plan identification, underwriter or payor.
 */
  coverage?: Reference | undefined;
  _coverage?: Element | undefined;

        
      
        
          
  /**
 * The date when this resource was created.
 */
  created?: string | undefined;
  _created?: Element | undefined;

        
      
        
          
  /**
 * The Response business identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The Insurer who is target  of the request.
 */
  insurer?: Reference | undefined;
  _insurer?: Element | undefined;

        
      
        
          
  /**
 * The practitioner who is responsible for the services rendered to the patient.
 */
  provider?: Reference | undefined;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the request as not currently valid.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
    }

  


  
    /**
 * EnrollmentResponse
 * 
 * This resource provides enrollment and plan details from the processing of an
 * EnrollmentRequest resource.
 * 
 * @see {@link http://hl7.org/fhir/R4B/EnrollmentResponse.html}
 */
    export interface EnrollmentResponse extends DomainResource {
      
      readonly resourceType: "EnrollmentResponse";
      

      
        
          
  /**
 * The date when the enclosed suite of services were performed or completed.
 */
  created?: string | undefined;
  _created?: Element | undefined;

        
      
        
          
  /**
 * A description of the status of the adjudication.
 */
  disposition?: string | undefined;
  _disposition?: Element | undefined;

        
      
        
          
  /**
 * The Response business identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The Insurer who produced this adjudicated response.
 */
  organization?: Reference | undefined;
  _organization?: Element | undefined;

        
      
        
          
  /**
 * Processing status: error, complete.
 */
  outcome?: string | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * Original request resource reference.
 */
  request?: Reference | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * The practitioner who is responsible for the services rendered to the patient.
 */
  requestProvider?: Reference | undefined;
  _requestProvider?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the response as not currently valid.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * EpisodeOfCare
 * 
 * An association between a patient and an organization / healthcare provider(s)
 * during which time encounters may occur. The managing organization assumes a
 * level of responsibility for the patient during this time.
 * 
 * @see {@link http://hl7.org/fhir/R4B/EpisodeOfCare.html}
 */
    export interface EpisodeOfCare extends DomainResource {
      
      readonly resourceType: "EpisodeOfCare";
      

      
        
          
  /**
 * The set of accounts that may be used for billing for this EpisodeOfCare.
 * The billing system may choose to allocate billable items associated with the
 * EpisodeOfCare to different referenced Accounts based on internal business rules.
 */
  account?: Array<Reference> | undefined;
  _account?: Element[] | undefined;

        
      
        
          
  /**
 * The practitioner that is the care manager/care coordinator for this patient.
 */
  careManager?: Reference | undefined;
  _careManager?: Element | undefined;

        
      
        
          
  /**
 * The list of diagnosis relevant to this episode of care.
 */
  diagnosis?: Array<BackboneElement> | undefined;
  _diagnosis?: Element[] | undefined;

        
      
        
          
  /**
 * A list of conditions/problems/diagnoses that this episode of care is intended to
 * be providing care for.
 */
  condition: Reference;
  _condition?: Element | undefined;

        
      
        
          
  /**
 * Ranking of the diagnosis (for each role type).
 */
  rank?: number | undefined;
  _rank?: Element | undefined;

        
      
        
          
  /**
 * Role that this diagnosis has within the episode of care (e.g. admission,
 * billing, discharge …).
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * The EpisodeOfCare may be known by different identifiers for different contexts
 * of use, such as when an external agency is tracking the Episode for funding
 * purposes.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The organization that has assumed the specific responsibilities for the
 * specified duration.
 */
  managingOrganization?: Reference | undefined;
  _managingOrganization?: Element | undefined;

        
      
        
          
  /**
 * The patient who is the focus of this episode of care.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The interval during which the managing organization assumes the defined
 * responsibility.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming
 * referrals.
 */
  referralRequest?: Array<Reference> | undefined;
  _referralRequest?: Element[] | undefined;

        
      
        
          
  /**
 * planned | waitlist | active | onhold | finished | cancelled.
 * This element is labeled as a modifier because the status contains codes that
 * mark the episode as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The history of statuses that the EpisodeOfCare has been through (without
 * requiring processing the history of the resource).
 */
  statusHistory?: Array<BackboneElement> | undefined;
  _statusHistory?: Element[] | undefined;

        
      
        
          
  /**
 * The period during this EpisodeOfCare that the specific status applied.
 */
  period: Period;
  _period?: Element | undefined;

        
      
        
          
  /**
 * planned | waitlist | active | onhold | finished | cancelled.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The list of practitioners that may be facilitating this episode of care for
 * specific purposes.
 */
  team?: Array<Reference> | undefined;
  _team?: Element[] | undefined;

        
      
        
          
  /**
 * A classification of the type of episode of care; e.g. specialist referral,
 * disease management, type of funded care.
 * The type can be very important in processing as this could be used in
 * determining if the EpisodeOfCare is relevant to specific government reporting,
 * or other types of classifications.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
    }

  


  


  
    /**
 * Event
 * 
 * Logical Model: A pattern to be followed by resources that represent the
 * performance of some activity, possibly in accordance with a request or service
 * definition.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Event.html}
 */
    export interface Event {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A plan, proposal or order that is fulfilled in whole or in part by this
 * {{title}}.
 * [The allowed reference resources may be adjusted as appropriate for the event
 * resource].
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * A code that identifies the specific service or action that was or is being
 * performed.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The Encounter during which this {{title}} was created or to which the creation
 * of this record is tightly associated.
 * This will typically be the encounter the {{title}} was created during, but some
 * {{title}}s may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter (e.g. pre-admission
 * lab tests).
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this {{title}} by the performer and/or other
 * systems.  These identifiers remain constant as the resource is updated and
 * propagates from server to server.
 * Note: This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this {{title}}.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this {{title}}.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * The principal physical location where the {{title}} was performed.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Comments made about the {{title}} by the performer, subject or other
 * participants.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * The date, period or timing when the {{title}} did occur or is occurring.
 * This indicates when the activity actually occurred or is occurring, not when it
 * was asked/requested/ordered to occur.  For the latter, look at the occurence
 * element of the  Request this {{event}} is "basedOn".  The status code allows
 * differentiation of whether the timing reflects a historic event or an ongoing
 * event.  Ongoing events should not include an upper bound in the Period or
 * Timing.bounds.

[The list of types may be constrained as appropriate for the
 * type of event.  The use of 'Timing' in type is generally only appropriate for
 * Events that are typically used to represent summary information.].
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * The date, period or timing when the {{title}} did occur or is occurring.
 * This indicates when the activity actually occurred or is occurring, not when it
 * was asked/requested/ordered to occur.  For the latter, look at the occurence
 * element of the  Request this {{event}} is "basedOn".  The status code allows
 * differentiation of whether the timing reflects a historic event or an ongoing
 * event.  Ongoing events should not include an upper bound in the Period or
 * Timing.bounds.

[The list of types may be constrained as appropriate for the
 * type of event.  The use of 'Timing' in type is generally only appropriate for
 * Events that are typically used to represent summary information.].
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * The date, period or timing when the {{title}} did occur or is occurring.
 * This indicates when the activity actually occurred or is occurring, not when it
 * was asked/requested/ordered to occur.  For the latter, look at the occurence
 * element of the  Request this {{event}} is "basedOn".  The status code allows
 * differentiation of whether the timing reflects a historic event or an ongoing
 * event.  Ongoing events should not include an upper bound in the Period or
 * Timing.bounds.

[The list of types may be constrained as appropriate for the
 * type of event.  The use of 'Timing' in type is generally only appropriate for
 * Events that are typically used to represent summary information.].
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * A larger event of which this particular {{title}} is a component or step.
 * Not to be used to link an {{title}} to an Encounter - use 'context' for
 * that.

[The allowed reference resources may be adjusted as appropriate for the
 * event resource].
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed the {{title}} and how they were involved.
 * [Resources may choose to replace this with just a single performer or repeating
 * where there's no need to distinguish the function performed].
 */
  performer?: Array<Element> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed the {{title}}.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Distinguishes the type of involvement of the performer in the {{title}}.
 * [Consider adding examples].
 */
  function?: CodeableConcept | undefined;
  _function?: Element | undefined;

        
      
        
          
  /**
 * Describes why the {{title}} occurred in coded or textual form.
 * Textual reasons can be captured using reasonCode.text.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies this {{title}}.
 * [Additional resources may be added as appropriate].
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The date the occurrence of the {{title}} was first captured in the record -
 * potentially significantly after the occurrence of the event.
 */
  recorded?: string | undefined;
  _recorded?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates if this record was captured as a secondary 'reported' record rather
 * than as an original primary source-of-truth record.  It may also indicate the
 * source of the report.
 */
  reportedBoolean?: boolean | undefined;
  _reportedBoolean?: Element | undefined;

          
            
  /**
 * Indicates if this record was captured as a secondary 'reported' record rather
 * than as an original primary source-of-truth record.  It may also indicate the
 * source of the report.
 */
  reportedReference?: Reference | undefined;
  _reportedReference?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates that this {{title}} is relevant to the specified research study(ies).
 * This relevance might mean that the {{title}} occurred as part of the study
 * protocol, but can also include events that occurred outside the study but still
 * have relevance.
 */
  researchStudy?: Array<Reference> | undefined;
  _researchStudy?: Element[] | undefined;

        
      
        
          
  /**
 * The current state of the {{title}}.
 * A nominal state-transition diagram can be found in the [[event.html#statemachine
 * | Event pattern]] documentation

Unknown does not represent "other" - one of the
 * defined statuses must apply.  Unknown is used when the authoring system is not
 * sure what the current status is.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the {{title}}.
 * This is generally only used for "exception" statuses such as "not-done",
 * "suspended" or "cancelled".  The reason for performing the event at all is
 * captured in reasonCode, not here.

[distinct reason codes for different statuses
 * can be enforced using invariants if they are universal bindings].
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * The individual or set of individuals the action is being or was performed on.
 * [For resources that aren't patient-specific, the set of allowed resources may be
 * extended to include other things.  Group should generally be retained unless
 * there's certainty this resource won't be used for veterinary, research or public
 * health settings where Group may be necessary (e.g. this cage of rats/crate of
 * chickens, group of people in a 5 mile radious of the incident, etc.)].
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
    }

  


  
    /**
 * EventDefinition
 * 
 * The EventDefinition resource provides a reusable description of when a
 * particular event can occur.
 * 
 * @see {@link http://hl7.org/fhir/R4B/EventDefinition.html}
 */
    export interface EventDefinition extends DomainResource {
      
      readonly resourceType: "EventDefinition";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the event definition and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the event definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the event definition was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the event definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the event definition. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the event definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the event definition
 * was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the event definition as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the event definition is presumed to
 * be the predominant language in the place the event definition was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the event definition content was or is planned to be in
 * active use.
 * The effective period for a event definition  determines when the content is
 * applicable for usage and is independent of publication and review dates. For
 * example, a measure intended to be used for the year 2016 might be published in
 * 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this event definition is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of event definitions that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this event definition when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this event definition outside of
 * FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the event definition is intended to be
 * used.
 * It may be possible for the event definition to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the event definition. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the event definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the event definition is the organization or individual primarily responsible for
 * the maintenance and upkeep of the event definition. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the event definition. This item SHOULD be populated unless the information
 * is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this event definition is needed and why it has been designed
 * as it has.
 * This element does not describe the usage of the event definition. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this event definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Related resources such as additional documentation, justification, or
 * bibliographic references.
 * Each related resource is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this event definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of event definitions that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * A code or group definition that describes the intended subject of the event
 * definition.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * A code or group definition that describes the intended subject of the event
 * definition.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
        
      
        
          
  /**
 * An explanatory or alternate title for the event definition giving additional
 * information about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the event definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Descriptive topics related to the module. Topics provide a high-level
 * categorization of the module that can be useful for filtering and searching.
 */
  topic?: Array<CodeableConcept> | undefined;
  _topic?: Element[] | undefined;

        
      
        
          
  /**
 * The trigger element defines when the event occurs. If more than one trigger
 * condition is specified, the event fires whenever any one of the trigger
 * conditions is met.
 */
  trigger: Array<TriggerDefinition>;
  _trigger?: Element[] | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this event definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this event definition is
 * (or will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the event definition is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A detailed description of how the event definition is used from a clinical
 * perspective.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate event definition
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the event definition
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the event definition author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different event definition instances that have the same identifier
 * but different versions.  The version can be appended to the url in a reference
 * to allow a reference to a particular business version of the event definition
 * with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Evidence
 * 
 * The Evidence Resource provides a machine-interpretable expression of an evidence
 * concept including the evidence variables (eg population,
 * exposures/interventions, comparators, outcomes, measured variables, confounding
 * variables), the statistics, and the certainty of this evidence.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Evidence.html}
 */
    export interface Evidence extends DomainResource {
      
      readonly resourceType: "Evidence";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * Declarative description of the Evidence.
 */
  assertion?: string | undefined;
  _assertion?: Element | undefined;

        
      
        
          
  /**
 * An individiual, organization, or device primarily involved in the creation and
 * maintenance of the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * Assessment of certainty, confidence in the estimates, or quality of the
 * evidence.
 */
  certainty?: Array<BackboneElement> | undefined;
  _certainty?: Element[] | undefined;

        
      
        
          
  /**
 * Textual description of certainty.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Footnotes and/or explanatory notes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Individual or group who did the rating.
 */
  rater?: string | undefined;
  _rater?: Element | undefined;

        
      
        
          
  /**
 * Assessment or judgement of the aspect.
 */
  rating?: CodeableConcept | undefined;
  _rating?: Element | undefined;

        
      
        
          
  /**
 * A domain or subdomain of certainty.
 */
  subcomponent?: Array<undefined> | undefined;
  _subcomponent?: Element[] | undefined;

        
      
        
          
  /**
 * Aspect of certainty being rated.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * Citation Resource or display of suggested citation for this evidence.
 */
  citeAsReference?: Reference | undefined;
  _citeAsReference?: Element | undefined;

          
            
  /**
 * Citation Resource or display of suggested citation for this evidence.
 */
  citeAsMarkdown?: string | undefined;
  _citeAsMarkdown?: Element | undefined;

          
        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the summary was published. The date must
 * change when the business version changes and it must change if the status code
 * changes. In addition, it should change when the substantive content of the
 * summary changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the summary. Additional specific
 * dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the evidence from a consumer's
 * perspective.
 * This description can be used to capture details such as why the evidence was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the evidence as conveyed in the 'text' field of the resource itself. This
 * item SHOULD be populated unless the information is available from context (e.g.
 * the language of the evidence is presumed to be the predominant language in the
 * place the evidence was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An individiual, organization, or device primarily responsible for internal
 * coherence of the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * An individiual, organization, or device responsible for officially endorsing the
 * content for use in some setting.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this summary when it is represented
 * in other formats, or referenced in a specification, model, design or an
 * instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this summary outside of FHIR, where
 * it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * Footnotes and/or explanatory notes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the evidence.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the evidence is the organization or individual primarily responsible for the
 * maintenance and upkeep of the evidence. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * evidence. This item SHOULD be populated unless the information is available from
 * context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Link or citation to artifact associated with the summary.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individiual, organization, or device primarily responsible for review of some
 * aspect of the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * Values and parameters for a single statistic.
 */
  statistic?: Array<BackboneElement> | undefined;
  _statistic?: Element[] | undefined;

        
      
        
          
  /**
 * A statistical attribute of the statistic such as a measure of heterogeneity.
 */
  attributeEstimate?: Array<BackboneElement> | undefined;
  _attributeEstimate?: Element[] | undefined;

        
      
        
          
  /**
 * A nested attribute estimate; which is the attribute estimate of an attribute
 * estimate.
 * A nested attribute estimate; which is the attribute estimate of an attribute
 * estimate
 */
  attributeEstimate?: Array<undefined> | undefined;
  _attributeEstimate?: Element[] | undefined;

        
      
        
          
  /**
 * Human-readable summary of the estimate.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Use 95 for a 95% confidence interval.
 */
  level?: number | undefined;
  _level?: Element | undefined;

        
      
        
          
  /**
 * Footnote or explanatory note about the estimate.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The singular quantity of the attribute estimate, for attribute estimates
 * represented as single values; also used to report unit of measure.
 * Often the p value
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Lower bound of confidence interval.
 */
  range?: Range | undefined;
  _range?: Element | undefined;

        
      
        
          
  /**
 * The type of attribute estimate, eg confidence interval or p value.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * When the measured variable is handled categorically, the category element is
 * used to define which category the statistic is reporting.
 * Simple strings can be used for descriptive purposes. Exact matching to
 * EvidenceVariable.category.name for the
 * Evidence.variableDefinition[variableRole=measuredVariable].observed=Reference(Ev
 * idenceVariable) could facilitate validation within datasets.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A description of the content value of the statistic.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A component of the method to generate the statistic.
 */
  modelCharacteristic?: Array<BackboneElement> | undefined;
  _modelCharacteristic?: Element[] | undefined;

        
      
        
          
  /**
 * An attribute of the statistic used as a model characteristic.
 */
  attributeEstimate?: Array<undefined> | undefined;
  _attributeEstimate?: Element[] | undefined;

        
      
        
          
  /**
 * Description of a component of the method to generate the statistic.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Further specification of the quantified value of the component of the method to
 * generate the statistic.
 */
  value?: Quantity | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * A variable adjusted for in the adjusted analysis.
 */
  variable?: Array<BackboneElement> | undefined;
  _variable?: Element[] | undefined;

        
      
        
          
  /**
 * How the variable is classified for use in adjusted analysis.
 */
  handling?: string | undefined;
  _handling?: Element | undefined;

        
      
        
          
  /**
 * Description for grouping of ordinal or polychotomous variables.
 */
  valueCategory?: Array<CodeableConcept> | undefined;
  _valueCategory?: Element[] | undefined;

        
      
        
          
  /**
 * Discrete value for grouping of ordinal or polychotomous variables.
 */
  valueQuantity?: Array<Quantity> | undefined;
  _valueQuantity?: Element[] | undefined;

        
      
        
          
  /**
 * Range of values for grouping of ordinal or polychotomous variables.
 */
  valueRange?: Array<Range> | undefined;
  _valueRange?: Element[] | undefined;

        
      
        
          
  /**
 * Description of the variable.
 */
  variableDefinition: Reference;
  _variableDefinition?: Element | undefined;

        
      
        
          
  /**
 * Footnotes and/or explanatory notes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The number of participants affected where the unit of analysis is the same as
 * sampleSize.knownDataCount and sampleSize.numberOfParticipants.
 * When the number affected is the statistic, use Evidence.statistic.quantity and
 * set Evidence.statistic.type.coding.code=C25463 and
 * Evidence.statistic.type.coding.display=Count. When the statistic is a
 * Proportion, use Evidence.statistic.numberAffected and enter an integer as the
 * value. When the statistic is an Event Rate (where individual participants may
 * have 2 or more events), use Evidence.statistic.numberAffected to record the
 * number of participants with events rather than the total number of events.
 */
  numberAffected?: unsignedInt | undefined;
  _numberAffected?: Element | undefined;

        
      
        
          
  /**
 * The number of events associated with the statistic, where the unit of analysis
 * is different from numberAffected, sampleSize.knownDataCount and
 * sampleSize.numberOfParticipants.
 * When the number of events is the statistic, use Evidence.statistic.quantity and
 * set Evidence.statistic.type.coding.code=C25463 and
 * Evidence.statistic.type.coding.display=Count. When the statistic is an Event
 * Rate (where individual participants may have 2 or more events), use
 * Evidence.statistic.numberOfEvents to record the total number of events rather
 * than the number of participants with events.
 */
  numberOfEvents?: unsignedInt | undefined;
  _numberOfEvents?: Element | undefined;

        
      
        
          
  /**
 * Statistic value.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Number of samples in the statistic.
 */
  sampleSize?: BackboneElement | undefined;
  _sampleSize?: Element | undefined;

        
      
        
          
  /**
 * Human-readable summary of population sample size.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Number of participants with known results for measured variables.
 */
  knownDataCount?: unsignedInt | undefined;
  _knownDataCount?: Element | undefined;

        
      
        
          
  /**
 * Footnote or explanatory note about the sample size.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable string to clarify or explain concepts about the sample size.
 */
  numberOfParticipants?: unsignedInt | undefined;
  _numberOfParticipants?: Element | undefined;

        
      
        
          
  /**
 * Number of participants in the population.
 */
  numberOfStudies?: unsignedInt | undefined;
  _numberOfStudies?: Element | undefined;

        
      
        
          
  /**
 * Type of statistic, eg relative risk.
 */
  statisticType?: CodeableConcept | undefined;
  _statisticType?: Element | undefined;

        
      
        
          
  /**
 * The status of this summary. Enables tracking the life-cycle of the content.
 * Allows filtering of summarys s that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The type of study that produced this evidence.
 */
  studyType?: CodeableConcept | undefined;
  _studyType?: Element | undefined;

        
      
        
          
  /**
 * The method to combine studies.
 */
  synthesisType?: CodeableConcept | undefined;
  _synthesisType?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the summary.
 * In some cases, the resource can no longer be found at the stated url, but the
 * url itself cannot change. Implementations can use the meta.source element to
 * indicate where the current master source of the resource can be found.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this evidence when it is referenced in
 * a specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this summary is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the summary is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate evidence
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * Evidence variable such as population, exposure, or outcome.
 */
  variableDefinition: Array<BackboneElement>;
  _variableDefinition?: Element[] | undefined;

        
      
        
          
  /**
 * A text description or summary of the variable.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Indication of quality of match between intended variable to actual variable.
 */
  directnessMatch?: CodeableConcept | undefined;
  _directnessMatch?: Element | undefined;

        
      
        
          
  /**
 * Definition of the intended variable related to the Evidence.
 */
  intended?: Reference | undefined;
  _intended?: Element | undefined;

        
      
        
          
  /**
 * Footnotes and/or explanatory notes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Definition of the actual variable related to the statistic(s).
 */
  observed?: Reference | undefined;
  _observed?: Element | undefined;

        
      
        
          
  /**
 * population | subpopulation | exposure | referenceExposure | measuredVariable |
 * confounder.
 */
  variableRole: CodeableConcept;
  _variableRole?: Element | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the summary when it is
 * referenced in a specification, model, design or instance. This is an arbitrary
 * value managed by the summary author and is not expected to be globally unique.
 * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
 * available. There is also no expectation that versions can be placed in a
 * lexicographical sequence.
 * The determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author. Considerations for
 * making this decision are found in Technical and Business Versions.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * EvidenceReport
 * 
 * The EvidenceReport Resource is a specialized container for a collection of
 * resources and codable concepts, adapted to support compositions of Evidence,
 * EvidenceVariable, and Citation resources and related concepts.
 * 
 * @see {@link http://hl7.org/fhir/R4B/EvidenceReport.html}
 */
    export interface EvidenceReport extends DomainResource {
      
      readonly resourceType: "EvidenceReport";
      

      
        
          
  /**
 * An individiual, organization, or device primarily involved in the creation and
 * maintenance of the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
            
  /**
 * Citation Resource or display of suggested citation for this report.
 * used for reports for which external citation is expected, such as use in support
 * of scholarly publications.
 */
  citeAsReference?: Reference | undefined;
  _citeAsReference?: Element | undefined;

          
            
  /**
 * Citation Resource or display of suggested citation for this report.
 * used for reports for which external citation is expected, such as use in support
 * of scholarly publications.
 */
  citeAsMarkdown?: string | undefined;
  _citeAsMarkdown?: Element | undefined;

          
        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * An individiual, organization, or device primarily responsible for internal
 * coherence of the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * An individiual, organization, or device responsible for officially endorsing the
 * content for use in some setting.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this EvidenceReport when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * This element will contain unique identifiers that support de-duplication of
 * EvidenceReports. This identifier can be valid for only one EvidenceReport
 * resource.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Used for footnotes and annotations.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the evidence report.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the evidence report is the organization or individual primarily responsible for
 * the maintenance and upkeep of the evidence report. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the evidence report. This item SHOULD be populated unless the information
 * is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Link, description or reference to artifact associated with the report.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify things closely related to this
 * EvidenceReport.
 * May include trial registry identifiers, e.g. NCT04372602 from
 * clinicaltrials.gov. This identifier can be valid for multiple EvidenceReport
 * resources.
 */
  relatedIdentifier?: Array<Identifier> | undefined;
  _relatedIdentifier?: Element[] | undefined;

        
      
        
          
  /**
 * Relationships that this composition has with other compositions or documents
 * that already exist.
 * A document is a version specific composition.
 */
  relatesTo?: Array<BackboneElement> | undefined;
  _relatesTo?: Element[] | undefined;

        
      
        
          
  /**
 * The type of relationship that this composition has with anther composition or
 * document.
 * If this document appends another document, then the document cannot be fully
 * understood without also accessing the referenced document.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
            
  /**
 * The target composition/document of this relationship.
 */
  targetIdentifier?: Identifier | undefined;
  _targetIdentifier?: Element | undefined;

          
            
  /**
 * The target composition/document of this relationship.
 */
  targetReference?: Reference | undefined;
  _targetReference?: Element | undefined;

          
        
      
        
          
  /**
 * An individiual, organization, or device primarily responsible for review of some
 * aspect of the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The root of the sections that make up the composition.
 */
  section?: Array<BackboneElement> | undefined;
  _section?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies who is responsible for the information in this section, not
 * necessarily who typed it in.
 */
  author?: Array<Reference> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * If the section is empty, why the list is empty. An empty section typically has
 * some text explaining the empty reason.
 * The various reasons for an empty section make a significant interpretation to
 * its interpretation. Note that this code is for use when the entire section
 * content has been suppressed, and not for when individual items are omitted -
 * implementers may consider using a text note or a flag on an entry in these
 * cases.
 */
  emptyReason?: CodeableConcept | undefined;
  _emptyReason?: Element | undefined;

        
      
        
          
  /**
 * Specifies any type of classification of the evidence report.
 */
  entryClassifier?: Array<CodeableConcept> | undefined;
  _entryClassifier?: Element[] | undefined;

        
      
        
          
  /**
 * Quantity as content.
 */
  entryQuantity?: Array<Quantity> | undefined;
  _entryQuantity?: Element[] | undefined;

        
      
        
          
  /**
 * A reference to the actual resource from which the narrative in the section is
 * derived.
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
  entryReference?: Array<Reference> | undefined;
  _entryReference?: Element[] | undefined;

        
      
        
          
  /**
 * A code identifying the kind of content contained within the section. This should
 * be consistent with the section title.
 * The code identifies the section for an automated processor of the document. This
 * is particularly relevant when using profiles to control the structure of the
 * document.   

If the section has content (instead of sub-sections), the
 * section.code does not change the meaning or interpretation of the resource that
 * is the content of the section in the comments for the section.code.
 */
  focus?: CodeableConcept | undefined;
  _focus?: Element | undefined;

        
      
        
          
  /**
 * A definitional Resource identifying the kind of content contained within the
 * section. This should be consistent with the section title.
 */
  focusReference?: Reference | undefined;
  _focusReference?: Element | undefined;

        
      
        
          
  /**
 * How the entry list was prepared - whether it is a working list that is suitable
 * for being maintained on an ongoing basis, or if it represents a snapshot of a
 * list of items from another source, or whether it is a prepared list where items
 * may be marked as added, modified or deleted.
 * This element is labeled as a modifier because a change list must not be
 * misunderstood as a complete list.
 */
  mode?: string | undefined;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * Specifies the order applied to the items in the section entries.
 * Applications SHOULD render ordered lists in the order provided, but MAY allow
 * users to re-order based on their own preferences as well. If there is no order
 * specified, the order is unknown, though there may still be some order.
 */
  orderedBy?: CodeableConcept | undefined;
  _orderedBy?: Element | undefined;

        
      
        
          
  /**
 * A nested sub-section within this section.
 * Nested sections are primarily used to help human readers navigate to particular
 * portions of the document.
 */
  section?: Array<undefined> | undefined;
  _section?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable narrative that contains the attested content of the section,
 * used to represent the content of the resource to a human. The narrative need not
 * encode all the structured data, but is peferred to contain sufficient detail to
 * make it acceptable for a human to just read the narrative.
 * Document profiles may define what content should be represented in the
 * narrative.
 */
  text?: Narrative | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * The label for this particular section.  This will be part of the rendered
 * content for the document, and is often used to build a table of contents.
 * The title identifies the section for a human reader. The title must be
 * consistent with the narrative of the resource that is the target of the
 * section.content reference. Generally, sections SHOULD have titles, but in some
 * documents, it is unnecessary or inappropriate. Typically, this is where a
 * section has subsections that have their own adequately distinguishing title,  or
 * documents that only have a single section.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * The status of this summary. Enables tracking the life-cycle of the content.
 * Allows filtering of summaries that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Specifies the subject or focus of the report. Answers "What is this report
 * about?".
 * May be used as an expression for search queries and search results
 */
  subject: BackboneElement;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Characteristic.
 */
  characteristic?: Array<BackboneElement> | undefined;
  _characteristic?: Element[] | undefined;

        
      
        
          
  /**
 * Characteristic code.
 * Example 1 is a Citation. Example 2 is a type of outcome. Example 3 is a specific
 * outcome.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Is used to express not the characteristic.
 */
  exclude?: boolean | undefined;
  _exclude?: Element | undefined;

        
      
        
          
  /**
 * Timeframe for the characteristic.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
            
  /**
 * Characteristic value.
 * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3
 * is 1-year mortality.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
            
  /**
 * Characteristic value.
 * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3
 * is 1-year mortality.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * Characteristic value.
 * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3
 * is 1-year mortality.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * Characteristic value.
 * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3
 * is 1-year mortality.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Characteristic value.
 * Example 1 is Citation #37. Example 2 is selecting clinical outcomes. Example 3
 * is 1-year mortality.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
        
      
        
          
  /**
 * Used for general notes and annotations not coded elsewhere.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies the kind of report, such as grouping of classifiers, search results,
 * or human-compiled expression.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this EvidenceReport when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this summary is (or will
 * be) published. This URL can be the target of a canonical reference. It SHALL
 * remain the same when the summary is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate evidence report
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
    }

  


  
    /**
 * EvidenceVariable
 * 
 * The EvidenceVariable resource describes an element that knowledge (Evidence) is
 * about.
 * 
 * @see {@link http://hl7.org/fhir/R4B/EvidenceVariable.html}
 */
    export interface EvidenceVariable extends DomainResource {
      
      readonly resourceType: "EvidenceVariable";
      

      
        
          
  /**
 * True if the actual variable measured, false if a conceptual representation of
 * the intended variable.
 */
  actual?: boolean | undefined;
  _actual?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * A grouping (or set of values) described along with other groupings to specify
 * the set of groupings allowed for the variable.
 */
  category?: Array<BackboneElement> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable title or representation of the grouping.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
            
  /**
 * Value or set of values that define the grouping.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * Value or set of values that define the grouping.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Value or set of values that define the grouping.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
        
      
        
          
  /**
 * A characteristic that defines the members of the evidence element. Multiple
 * characteristics are applied with "and" semantics.
 * Characteristics can be defined flexibly to accommodate different use cases for
 * membership criteria, ranging from simple codes, all the way to using an
 * expression language to express the criteria.
 */
  characteristic?: Array<BackboneElement> | undefined;
  _characteristic?: Element[] | undefined;

        
      
        
          
            
  /**
 * Define members of the evidence element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionReference?: Reference | undefined;
  _definitionReference?: Element | undefined;

          
            
  /**
 * Define members of the evidence element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionCanonical?: string | undefined;
  _definitionCanonical?: Element | undefined;

          
            
  /**
 * Define members of the evidence element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionCodeableConcept?: CodeableConcept | undefined;
  _definitionCodeableConcept?: Element | undefined;

          
            
  /**
 * Define members of the evidence element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionExpression?: Expression | undefined;
  _definitionExpression?: Element | undefined;

          
        
      
        
          
  /**
 * A short, natural language description of the characteristic that could be used
 * to communicate the criteria to an end-user.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Device used for determining characteristic.
 */
  device?: Reference | undefined;
  _device?: Element | undefined;

        
      
        
          
  /**
 * When true, members with this characteristic are excluded from the element.
 */
  exclude?: boolean | undefined;
  _exclude?: Element | undefined;

        
      
        
          
  /**
 * Indicates how elements are aggregated within the study effective period.
 */
  groupMeasure?: string | undefined;
  _groupMeasure?: Element | undefined;

        
      
        
          
  /**
 * Method used for describing characteristic.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * Indicates duration, period, or point of observation from the participant's study
 * entry.
 */
  timeFromStart?: BackboneElement | undefined;
  _timeFromStart?: Element | undefined;

        
      
        
          
  /**
 * A short, natural language description.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A human-readable string to clarify or explain concepts about the resource.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Used to express the observation at a defined amount of time after the study
 * start.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Used to express the observation within a period after the study start.
 */
  range?: Range | undefined;
  _range?: Element | undefined;

        
      
        
          
  /**
 * Used to specify if two or more characteristics are combined with OR or AND.
 */
  characteristicCombination?: string | undefined;
  _characteristicCombination?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the evidence variable was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the evidence variable changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the evidence variable. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the evidence variable from a
 * consumer's perspective.
 * This description can be used to capture details such as why the evidence
 * variable was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the evidence variable as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the evidence variable is presumed
 * to be the predominant language in the place the evidence variable was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * Used for an outcome to classify.
 */
  handling?: string | undefined;
  _handling?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this evidence variable when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this evidence variable outside of
 * FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the evidence variable. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A human-readable string to clarify or explain concepts about the resource.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the evidence variable.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the evidence variable is the organization or individual primarily responsible
 * for the maintenance and upkeep of the evidence variable. This is not necessarily
 * the same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the evidence variable. This item SHOULD be populated unless the information
 * is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Related artifacts such as additional documentation, justification, or
 * bibliographic references.
 * Each related artifact is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 * Extensions to ContactDetail include: contactReference, contactAddress, and
 * contributionTime (Details at:
 * http://build.fhir.org/clinicalreasoning-module.html).
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The short title provides an alternate title for use in informal descriptive
 * contexts where the full, formal title is not necessary.
 */
  shortTitle?: string | undefined;
  _shortTitle?: Element | undefined;

        
      
        
          
  /**
 * The status of this evidence variable. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of evidence variables that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * An explanatory or alternate title for the EvidenceVariable giving additional
 * information about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the evidence variable.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this evidence variable when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this evidence variable is
 * (or will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the evidence variable is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate evidence variable
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the evidence variable
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the evidence variable author and is not expected to
 * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence. To provide a version consistent with
 * the Decision Support Service specification, use the format Major.Minor.Revision
 * (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the
 * Decision Support Service specification. Note that a version is required for
 * non-experimental active artifacts.
 * There may be different evidence variable instances that have the same identifier
 * but different versions.  The version can be appended to the url in a reference
 * to allow a reference to a particular business version of the evidence variable
 * with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * ExampleScenario
 * 
 * Example of workflow instance.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ExampleScenario.html}
 */
    export interface ExampleScenario extends DomainResource {
      
      readonly resourceType: "ExampleScenario";
      

      
        
          
  /**
 * Actor participating in the resource.
 */
  actor?: Array<BackboneElement> | undefined;
  _actor?: Element[] | undefined;

        
      
        
          
  /**
 * ID or acronym of actor.
 * should this be called ID or acronym?
 */
  actorId: string;
  _actorId?: Element | undefined;

        
      
        
          
  /**
 * The description of the actor.
 * Cardinality: is name and description 1..1?
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The name of the actor as shown in the page.
 * Cardinality: is name and description 1..1?
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The type of actor - person or system.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the example scenario and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the example scenario.
 * nullFrequently, the copyright differs between the value set and the codes that
 * are included. The copyright statement should clearly differentiate between these
 * when required.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the example scenario was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the example scenario changes. (e.g. the 'content logical definition').
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the example scenario. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this example scenario is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of example scenarios that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this example scenario when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this example scenario outside of
 * FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Each resource and each version that is present in the workflow.
 */
  instance?: Array<BackboneElement> | undefined;
  _instance?: Element[] | undefined;

        
      
        
          
  /**
 * Resources contained in the instance (e.g. the observations contained in a
 * bundle).
 */
  containedInstance?: Array<BackboneElement> | undefined;
  _containedInstance?: Element[] | undefined;

        
      
        
          
  /**
 * Each resource contained in the instance.
 */
  resourceId: string;
  _resourceId?: Element | undefined;

        
      
        
          
  /**
 * A specific version of a resource contained in the instance.
 */
  versionId?: string | undefined;
  _versionId?: Element | undefined;

        
      
        
          
  /**
 * Human-friendly description of the resource instance.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A short name for the resource instance.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The id of the resource for referencing.
 */
  resourceId: string;
  _resourceId?: Element | undefined;

        
      
        
          
  /**
 * The type of the resource.
 */
  resourceType: string;
  _resourceType?: Element | undefined;

        
      
        
          
  /**
 * A specific version of the resource.
 */
  version?: Array<BackboneElement> | undefined;
  _version?: Element[] | undefined;

        
      
        
          
  /**
 * The description of the resource version.
 */
  description: string;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The identifier of a specific version of a resource.
 */
  versionId: string;
  _versionId?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the example scenario is intended to be
 * used.
 * It may be possible for the example scenario to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the example scenario. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Each major process - a group of operations.
 */
  process?: Array<BackboneElement> | undefined;
  _process?: Element[] | undefined;

        
      
        
          
  /**
 * A longer description of the group of operations.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Description of final status after the process ends.
 */
  postConditions?: string | undefined;
  _postConditions?: Element | undefined;

        
      
        
          
  /**
 * Description of initial status before the process starts.
 */
  preConditions?: string | undefined;
  _preConditions?: Element | undefined;

        
      
        
          
  /**
 * Each step of the process.
 */
  step?: Array<BackboneElement> | undefined;
  _step?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates an alternative step that can be taken instead of the operations on the
 * base step in exceptional/atypical circumstances.
 */
  alternative?: Array<BackboneElement> | undefined;
  _alternative?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable description of the alternative explaining when the alternative
 * should occur rather than the base step.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * What happens in each alternative option.
 */
  step?: Array<undefined> | undefined;
  _step?: Element[] | undefined;

        
      
        
          
  /**
 * The label to display for the alternative that gives a sense of the circumstance
 * in which the alternative should be invoked.
 */
  title: string;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Each interaction or action.
 */
  operation?: BackboneElement | undefined;
  _operation?: Element | undefined;

        
      
        
          
  /**
 * A comment to be inserted in the diagram.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Who starts the transaction.
 */
  initiator?: string | undefined;
  _initiator?: Element | undefined;

        
      
        
          
  /**
 * Whether the initiator is deactivated right after the transaction.
 */
  initiatorActive?: boolean | undefined;
  _initiatorActive?: Element | undefined;

        
      
        
          
  /**
 * The human-friendly name of the interaction.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The sequential number of the interaction, e.g. 1.2.5.
 */
  number: string;
  _number?: Element | undefined;

        
      
        
          
  /**
 * Who receives the transaction.
 */
  receiver?: string | undefined;
  _receiver?: Element | undefined;

        
      
        
          
  /**
 * Whether the receiver is deactivated right after the transaction.
 */
  receiverActive?: boolean | undefined;
  _receiverActive?: Element | undefined;

        
      
        
          
  /**
 * Each resource instance used by the initiator.
 */
  request?: undefined | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * Each resource instance used by the responder.
 */
  response?: undefined | undefined;
  _response?: Element | undefined;

        
      
        
          
  /**
 * The type of operation - CRUD.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * If there is a pause in the flow.
 */
  pause?: boolean | undefined;
  _pause?: Element | undefined;

        
      
        
          
  /**
 * Nested process.
 */
  process?: Array<undefined> | undefined;
  _process?: Element[] | undefined;

        
      
        
          
  /**
 * The diagram title of the group of operations.
 */
  title: string;
  _title?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the example scenario.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the example scenario is the organization or individual primarily responsible for
 * the maintenance and upkeep of the example scenario. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the example scenario. This item SHOULD be populated unless the information
 * is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * What the example scenario resource is created for. This should not be used to
 * show the business purpose of the scenario itself, but the purpose of documenting
 * a scenario.
 * This element does not describe the usage of the example scenario. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this example scenario.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The status of this example scenario. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of example scenarios that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this example scenario when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this example scenario is
 * (or will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the example scenario is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate example scenario
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the example scenario
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the example scenario author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different example scenario instances that have the same identifier
 * but different versions.  The version can be appended to the url in a reference
 * to allow a reference to a particular business version of the example scenario
 * with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * Another nested workflow.
 */
  workflow?: Array<string> | undefined;
  _workflow?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * ExplanationOfBenefit
 * 
 * This resource provides: the claim details; adjudication details from the
 * processing of a Claim; and optionally account balance information, for informing
 * the subscriber of the benefits provided.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ExplanationOfBenefit.html}
 */
    export interface ExplanationOfBenefit extends DomainResource {
      
      readonly resourceType: "ExplanationOfBenefit";
      

      
        
          
  /**
 * Details of a accident which resulted in injuries which required the products and
 * services listed in the claim.
 */
  accident?: BackboneElement | undefined;
  _accident?: Element | undefined;

        
      
        
          
  /**
 * Date of an accident event  related to the products and services contained in the
 * claim.
 * The date of the accident has to precede the dates of the products and services
 * but within a reasonable timeframe.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
            
  /**
 * The physical location of the accident event.
 */
  locationAddress?: Address | undefined;
  _locationAddress?: Element | undefined;

          
            
  /**
 * The physical location of the accident event.
 */
  locationReference?: Reference | undefined;
  _locationReference?: Element | undefined;

          
        
      
        
          
  /**
 * The type or context of the accident event for the purposes of selection of
 * potential insurance coverages and determination of coordination between
 * insurers.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The first-tier service adjudications for payor added product or service lines.
 */
  addItem?: Array<BackboneElement> | undefined;
  _addItem?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Physical service site on the patient (limb, tooth, etc.).
 * For example, providing a tooth code allows an insurer to identify a provider
 * performing a filling on a tooth that was previously removed.
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * The second-tier service adjudications for payor added services.
 */
  detail?: Array<BackboneElement> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example, in Oral whether the treatment is cosmetic or associated with TMJ,
 * or for Medical whether the treatment was outside the clinic or out of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The third-tier service adjudications for payor added services.
 */
  subDetail?: Array<BackboneElement> | undefined;
  _subDetail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example, in Oral whether the treatment is cosmetic or associated with TMJ,
 * or for Medical whether the treatment was outside the clinic or out of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * The sequence number of the details within the claim item which this line is
 * intended to replace.
 */
  detailSequence?: Array<number> | undefined;
  _detailSequence?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Claim items which this service line is intended to replace.
 */
  itemSequence?: Array<number> | undefined;
  _itemSequence?: Element[] | undefined;

        
      
        
          
            
  /**
 * Where the product or service was provided.
 */
  locationCodeableConcept?: CodeableConcept | undefined;
  _locationCodeableConcept?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationAddress?: Address | undefined;
  _locationAddress?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationReference?: Reference | undefined;
  _locationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example, in Oral whether the treatment is cosmetic or associated with TMJ,
 * or for Medical whether the treatment was outside the clinic or out of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The providers who are authorized for the services rendered to the patient.
 */
  provider?: Array<Reference> | undefined;
  _provider?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedDate?: string | undefined;
  _servicedDate?: Element | undefined;

          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedPeriod?: Period | undefined;
  _servicedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * The sequence number of the sub-details woithin the details within the claim item
 * which this line is intended to replace.
 */
  subDetailSequence?: Array<number> | undefined;
  _subDetailSequence?: Element[] | undefined;

        
      
        
          
  /**
 * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
 */
  subSite?: Array<CodeableConcept> | undefined;
  _subSite?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * The adjudication results which are presented at the header level rather than at
 * the line-item or add-item levels.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Balance by Benefit Category.
 */
  benefitBalance?: Array<BackboneElement> | undefined;
  _benefitBalance?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A richer description of the benefit or services covered.
 * For example, 'DENT2 covers 100% of basic, 50% of major but excludes Ortho,
 * Implants and Cosmetic services'.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * True if the indicated class of service is excluded from the plan, missing or
 * False indicates the product or service is included in the coverage.
 */
  excluded?: boolean | undefined;
  _excluded?: Element | undefined;

        
      
        
          
  /**
 * Benefits Used to date.
 */
  financial?: Array<BackboneElement> | undefined;
  _financial?: Element[] | undefined;

        
      
        
          
            
  /**
 * The quantity of the benefit which is permitted under the coverage.
 */
  allowedUnsignedInt?: unsignedInt | undefined;
  _allowedUnsignedInt?: Element | undefined;

          
            
  /**
 * The quantity of the benefit which is permitted under the coverage.
 */
  allowedString?: string | undefined;
  _allowedString?: Element | undefined;

          
            
  /**
 * The quantity of the benefit which is permitted under the coverage.
 */
  allowedMoney?: Money | undefined;
  _allowedMoney?: Element | undefined;

          
        
      
        
          
  /**
 * Classification of benefit being provided.
 * For example: deductible, visits, benefit amount.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * The quantity of the benefit which have been consumed to date.
 */
  usedUnsignedInt?: unsignedInt | undefined;
  _usedUnsignedInt?: Element | undefined;

          
            
  /**
 * The quantity of the benefit which have been consumed to date.
 */
  usedMoney?: Money | undefined;
  _usedMoney?: Element | undefined;

          
        
      
        
          
  /**
 * A short name or tag for the benefit.
 * For example: MED01, or DENT2.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Is a flag to indicate whether the benefits refer to in-network providers or
 * out-of-network providers.
 */
  network?: CodeableConcept | undefined;
  _network?: Element | undefined;

        
      
        
          
  /**
 * The term or period of the values such as 'maximum lifetime benefit' or 'maximum
 * annual visits'.
 */
  term?: CodeableConcept | undefined;
  _term?: Element | undefined;

        
      
        
          
  /**
 * Indicates if the benefits apply to an individual or to the family.
 */
  unit?: CodeableConcept | undefined;
  _unit?: Element | undefined;

        
      
        
          
  /**
 * The term of the benefits documented in this response.
 * Not applicable when use=claim.
 */
  benefitPeriod?: Period | undefined;
  _benefitPeriod?: Element | undefined;

        
      
        
          
  /**
 * The period for which charges are being submitted.
 * Typically this would be today or in the past for a claim, and today or in the
 * future for preauthorizations and prodeterminations. Typically line item dates of
 * service should fall within the billing period if one is specified.
 */
  billablePeriod?: Period | undefined;
  _billablePeriod?: Element | undefined;

        
      
        
          
  /**
 * The members of the team who provided the products and services.
 */
  careTeam?: Array<BackboneElement> | undefined;
  _careTeam?: Element[] | undefined;

        
      
        
          
  /**
 * Member of the team who provided the product or service.
 */
  provider: Reference;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * The qualification of the practitioner which is applicable for this service.
 */
  qualification?: CodeableConcept | undefined;
  _qualification?: Element | undefined;

        
      
        
          
  /**
 * The party who is billing and/or responsible for the claimed products or
 * services.
 * Responsible might not be required when there is only a single provider listed.
 */
  responsible?: boolean | undefined;
  _responsible?: Element | undefined;

        
      
        
          
  /**
 * The lead, assisting or supervising practitioner and their discipline if a
 * multidisciplinary team.
 * Role might not be required when there is only a single provider listed.
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify care team entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * The business identifier for the instance of the adjudication request: claim
 * predetermination or preauthorization.
 */
  claim?: Reference | undefined;
  _claim?: Element | undefined;

        
      
        
          
  /**
 * The business identifier for the instance of the adjudication response: claim,
 * predetermination or preauthorization response.
 */
  claimResponse?: Reference | undefined;
  _claimResponse?: Element | undefined;

        
      
        
          
  /**
 * The date this resource was created.
 * This field is independent of the date of creation of the resource as it may
 * reflect the creation date of a source document prior to digitization. Typically
 * for claims all services must be completed as of this date.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * Information about diagnoses relevant to the claim items.
 */
  diagnosis?: Array<BackboneElement> | undefined;
  _diagnosis?: Element[] | undefined;

        
      
        
          
            
  /**
 * The nature of illness or problem in a coded form or as a reference to an
 * external defined Condition.
 */
  diagnosisCodeableConcept?: CodeableConcept | undefined;
  _diagnosisCodeableConcept?: Element | undefined;

          
            
  /**
 * The nature of illness or problem in a coded form or as a reference to an
 * external defined Condition.
 */
  diagnosisReference?: Reference | undefined;
  _diagnosisReference?: Element | undefined;

          
        
      
        
          
  /**
 * Indication of whether the diagnosis was present on admission to a facility.
 */
  onAdmission?: CodeableConcept | undefined;
  _onAdmission?: Element | undefined;

        
      
        
          
  /**
 * A package billing code or bundle code used to group products and services to a
 * particular health condition (such as heart attack) which is based on a
 * predetermined grouping code system.
 * For example, DRG (Diagnosis Related Group) or a bundled billing code. A patient
 * may have a diagnosis of a Myocardio-infarction and a DRG for HeartAttack would
 * assigned. The Claim item (and possible subsequent claims) would refer to the DRG
 * for those line items that were for services related to the heart attack event.
 */
  packageCode?: CodeableConcept | undefined;
  _packageCode?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify diagnosis entries.
 * Diagnosis are presented in list order to their expected importance: primary,
 * secondary, etc.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * When the condition was observed or the relative ranking.
 * For example: admitting, primary, secondary, discharge.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * A human readable description of the status of the adjudication.
 */
  disposition?: string | undefined;
  _disposition?: Element | undefined;

        
      
        
          
  /**
 * Individual who created the claim, predetermination or preauthorization.
 */
  enterer?: Reference | undefined;
  _enterer?: Element | undefined;

        
      
        
          
  /**
 * Facility where the services were provided.
 */
  facility?: Reference | undefined;
  _facility?: Element | undefined;

        
      
        
          
  /**
 * The actual form, by reference or inclusion, for printing the content or an EOB.
 * Needed to permit insurers to include the actual form.
 */
  form?: Attachment | undefined;
  _form?: Element | undefined;

        
      
        
          
  /**
 * A code for the form to be used for printing the content.
 * May be needed to identify specific jurisdictional forms.
 */
  formCode?: CodeableConcept | undefined;
  _formCode?: Element | undefined;

        
      
        
          
  /**
 * A code, used only on a response to a preauthorization, to indicate whether the
 * benefits payable have been reserved and for whom.
 * Fund would be release by a future claim quoting the preAuthRef of this response.
 * Examples of values include: provider, patient, none.
 */
  fundsReserve?: CodeableConcept | undefined;
  _fundsReserve?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate whether and for whom funds are to be reserved for future
 * claims.
 * This field is only used for preauthorizations.
 */
  fundsReserveRequested?: CodeableConcept | undefined;
  _fundsReserveRequested?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this explanation of benefit.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Financial instruments for reimbursement for the health care products and
 * services specified on the claim.
 * All insurance coverages for the patient which may be applicable for
 * reimbursement, of the products and services listed in the claim, are typically
 * provided in the claim to allow insurers to confirm the ordering of the insurance
 * coverages relative to local 'coordination of benefit' rules. One coverage (and
 * only one) with 'focal=true' is to be used in the adjudication of this claim.
 * Coverages appearing before the focal Coverage in the list, and where
 * 'Coverage.subrogation=false', should provide a reference to the ClaimResponse
 * containing the adjudication results of the prior claim.
 */
  insurance: Array<BackboneElement>;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to the insurance card level information contained in the Coverage
 * resource. The coverage issuing insurer will use these details to locate the
 * patient's actual coverage within the insurer's information system.
 */
  coverage: Reference;
  _coverage?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that this Coverage is to be used for adjudication of this
 * claim when set to true.
 * A patient may (will) have multiple insurance policies which provide
 * reimbursement for healthcare services and products. For example, a person may
 * also be covered by their spouse's policy and both appear in the list (and may be
 * from the same insurer). This flag will be set to true for only one of the listed
 * policies and that policy will be used for adjudicating this claim. Other claims
 * would be created to request adjudication against the other listed policies.
 */
  focal: boolean;
  _focal?: Element | undefined;

        
      
        
          
  /**
 * Reference numbers previously provided by the insurer to the provider to be
 * quoted on subsequent claims containing services or products related to the prior
 * authorization.
 * This value is an alphanumeric string that may be provided over the phone, via
 * text, via paper, or within a ClaimResponse resource and is not a FHIR
 * Identifier.
 */
  preAuthRef?: Array<string> | undefined;
  _preAuthRef?: Element[] | undefined;

        
      
        
          
  /**
 * The party responsible for authorization, adjudication and reimbursement.
 */
  insurer: Reference;
  _insurer?: Element | undefined;

        
      
        
          
  /**
 * A claim line. Either a simple (a product or service) or a 'group' of details
 * which can also be a simple items or groups of sub-details.
 */
  item?: Array<BackboneElement> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * If this item is a group then the values here are a summary of the adjudication
 * of the detail items. If this item is a simple product or service then this is
 * the result of the adjudication of this item.
 */
  adjudication?: Array<BackboneElement> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Monetary amount associated with the category.
 * For example, amount submitted, eligible amount, co-payment, and benefit payable.
 */
  amount?: Money | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate the information type of this adjudication record. Information
 * types may include: the value submitted, maximum values or percentages allowed or
 * payable under the plan, amounts that the patient is responsible for in-aggregate
 * or pertaining to this item, amounts paid by other coverages, and the benefit
 * payable for this item.
 * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A code supporting the understanding of the adjudication result and explaining
 * variance from expected amount.
 * For example, may indicate that the funds for this benefit type have been
 * exhausted.
 */
  reason?: CodeableConcept | undefined;
  _reason?: Element | undefined;

        
      
        
          
  /**
 * A non-monetary value associated with the category. Mutually exclusive to the
 * amount element above.
 * For example: eligible percentage or co-payment percentage.
 */
  value?: number | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * Physical service site on the patient (limb, tooth, etc.).
 * For example: Providing a tooth code, allows an insurer to identify a provider
 * performing a filling on a tooth that was previously removed.
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * Care team members related to this service or product.
 */
  careTeamSequence?: Array<number> | undefined;
  _careTeamSequence?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * Second-tier of goods and services.
 */
  detail?: Array<BackboneElement> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include: Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example, in Oral whether the treatment is cosmetic or associated with TMJ,
 * or for Medical whether the treatment was outside the clinic or out of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The type of revenue or cost center providing the product and/or service.
 */
  revenue?: CodeableConcept | undefined;
  _revenue?: Element | undefined;

        
      
        
          
  /**
 * A claim detail line. Either a simple (a product or service) or a 'group' of
 * sub-details which are simple items.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * Third-tier of goods and services.
 */
  subDetail?: Array<BackboneElement> | undefined;
  _subDetail?: Element[] | undefined;

        
      
        
          
  /**
 * The adjudication results.
 */
  adjudication?: Array<undefined> | undefined;
  _adjudication?: Element[] | undefined;

        
      
        
          
  /**
 * Code to identify the general type of benefits under which products and services
 * are provided.
 * Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example, in Oral whether the treatment is cosmetic or associated with TMJ,
 * or for Medical whether the treatment was outside the clinic or outside of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The type of revenue or cost center providing the product and/or service.
 */
  revenue?: CodeableConcept | undefined;
  _revenue?: Element | undefined;

        
      
        
          
  /**
 * A claim detail line. Either a simple (a product or service) or a 'group' of
 * sub-details which are simple items.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * Diagnoses applicable for this service or product.
 */
  diagnosisSequence?: Array<number> | undefined;
  _diagnosisSequence?: Element[] | undefined;

        
      
        
          
  /**
 * A billed item may include goods or services provided in multiple encounters.
 */
  encounter?: Array<Reference> | undefined;
  _encounter?: Element[] | undefined;

        
      
        
          
  /**
 * A real number that represents a multiplier used in determining the overall value
 * of services delivered and/or goods received. The concept of a Factor allows for
 * a discount or surcharge multiplier to be applied to a monetary amount.
 * To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * Exceptions, special conditions and supporting information applicable for this
 * service or product.
 */
  informationSequence?: Array<number> | undefined;
  _informationSequence?: Element[] | undefined;

        
      
        
          
            
  /**
 * Where the product or service was provided.
 */
  locationCodeableConcept?: CodeableConcept | undefined;
  _locationCodeableConcept?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationAddress?: Address | undefined;
  _locationAddress?: Element | undefined;

          
            
  /**
 * Where the product or service was provided.
 */
  locationReference?: Reference | undefined;
  _locationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Item typification or modifiers codes to convey additional context for the
 * product or service.
 * For example, in Oral whether the treatment is cosmetic or associated with TMJ,
 * or for Medical whether the treatment was outside the clinic or out of office
 * hours.
 */
  modifier?: Array<CodeableConcept> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity times the unit price for an additional service or product or
 * charge.
 * For example, the formula: quantity * unitPrice * factor  = net. Quantity and
 * factor are assumed to be 1 if not supplied.
 */
  net?: Money | undefined;
  _net?: Element | undefined;

        
      
        
          
  /**
 * The numbers associated with notes below which apply to the adjudication of this
 * item.
 */
  noteNumber?: Array<number> | undefined;
  _noteNumber?: Element[] | undefined;

        
      
        
          
  /**
 * Procedures applicable for this service or product.
 */
  procedureSequence?: Array<number> | undefined;
  _procedureSequence?: Element[] | undefined;

        
      
        
          
  /**
 * When the value is a group code then this item collects a set of related claim
 * details, otherwise this contains the product, service, drug or other billing
 * code for the item.
 * If this is an actual service or product line, i.e. not a Group, then use code to
 * indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS,
 * ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code
 * to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
 */
  productOrService: CodeableConcept;
  _productOrService?: Element | undefined;

        
      
        
          
  /**
 * Identifies the program under which this may be recovered.
 * For example: Neonatal program, child dental program or drug users recovery
 * program.
 */
  programCode?: Array<CodeableConcept> | undefined;
  _programCode?: Element[] | undefined;

        
      
        
          
  /**
 * The number of repetitions of a service or product.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The type of revenue or cost center providing the product and/or service.
 */
  revenue?: CodeableConcept | undefined;
  _revenue?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify item entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedDate?: string | undefined;
  _servicedDate?: Element | undefined;

          
            
  /**
 * The date or dates when the service or product was supplied, performed or
 * completed.
 */
  servicedPeriod?: Period | undefined;
  _servicedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
 */
  subSite?: Array<CodeableConcept> | undefined;
  _subSite?: Element[] | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * If the item is not a group then this is the fee for the product or service,
 * otherwise this is the total of the fees for the details of the group.
 */
  unitPrice?: Money | undefined;
  _unitPrice?: Element | undefined;

        
      
        
          
  /**
 * Original prescription which has been superseded by this prescription to support
 * the dispensing of pharmacy services, medications or products.
 * For example, a physician may prescribe a medication which the pharmacy
 * determines is contraindicated, or for which the patient has an intolerance, and
 * therefor issues a new prescription for an alternate medication which has the
 * same therapeutic intent. The prescription from the pharmacy becomes the
 * 'prescription' and that from the physician becomes the 'original prescription'.
 */
  originalPrescription?: Reference | undefined;
  _originalPrescription?: Element | undefined;

        
      
        
          
  /**
 * The outcome of the claim, predetermination, or preauthorization processing.
 * The resource may be used to indicate that: the request has been held (queued)
 * for processing; that it has been processed and errors found (error); that no
 * errors were found and that some of the adjudication has been undertaken
 * (partial) or that all of the adjudication has been undertaken (complete).
 */
  outcome: string;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * The party to whom the professional services and/or products have been supplied
 * or are being considered and for whom actual for forecast reimbursement is
 * sought.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The party to be reimbursed for cost of the products and services according to
 * the terms of the policy.
 * Often providers agree to receive the benefits payable to reduce the near-term
 * costs to the patient. The insurer may decline to pay the provider and may choose
 * to pay the subscriber instead.
 */
  payee?: BackboneElement | undefined;
  _payee?: Element | undefined;

        
      
        
          
  /**
 * Reference to the individual or organization to whom any payment will be made.
 * Not required if the payee is 'subscriber' or 'provider'.
 */
  party?: Reference | undefined;
  _party?: Element | undefined;

        
      
        
          
  /**
 * Type of Party to be reimbursed: Subscriber, provider, other.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Payment details for the adjudication of the claim.
 */
  payment?: BackboneElement | undefined;
  _payment?: Element | undefined;

        
      
        
          
  /**
 * Total amount of all adjustments to this payment included in this transaction
 * which are not related to this claim's adjudication.
 * Insurers will deduct amounts owing from the provider (adjustment), such as a
 * prior overpayment, from the amount owing to the provider (benefits payable) when
 * payment is made to the provider.
 */
  adjustment?: Money | undefined;
  _adjustment?: Element | undefined;

        
      
        
          
  /**
 * Reason for the payment adjustment.
 */
  adjustmentReason?: CodeableConcept | undefined;
  _adjustmentReason?: Element | undefined;

        
      
        
          
  /**
 * Benefits payable less any payment adjustment.
 */
  amount?: Money | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * Estimated date the payment will be issued or the actual issue date of payment.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Issuer's unique identifier for the payment instrument.
 * For example: EFT number or check number.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * Whether this represents partial or complete payment of the benefits payable.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Reference from the Insurer which is used in later communications which refers to
 * this adjudication.
 * This value is only present on preauthorization adjudications.
 */
  preAuthRef?: Array<string> | undefined;
  _preAuthRef?: Element[] | undefined;

        
      
        
          
  /**
 * The timeframe during which the supplied preauthorization reference may be quoted
 * on claims to obtain the adjudication as provided.
 * This value is only present on preauthorization adjudications.
 */
  preAuthRefPeriod?: Array<Period> | undefined;
  _preAuthRefPeriod?: Element[] | undefined;

        
      
        
          
  /**
 * This indicates the relative order of a series of EOBs related to different
 * coverages for the same suite of services.
 */
  precedence?: number | undefined;
  _precedence?: Element | undefined;

        
      
        
          
  /**
 * Prescription to support the dispensing of pharmacy, device or vision products.
 */
  prescription?: Reference | undefined;
  _prescription?: Element | undefined;

        
      
        
          
  /**
 * The provider-required urgency of processing the request. Typical values include:
 * stat, routine deferred.
 * If a claim processor is unable to complete the processing as per the priority
 * then they should generate and error and not process the request.
 */
  priority?: CodeableConcept | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * Procedures performed on the patient relevant to the billing items with the
 * claim.
 */
  procedure?: Array<BackboneElement> | undefined;
  _procedure?: Element[] | undefined;

        
      
        
          
  /**
 * Date and optionally time the procedure was performed.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
            
  /**
 * The code or reference to a Procedure resource which identifies the clinical
 * intervention performed.
 */
  procedureCodeableConcept?: CodeableConcept | undefined;
  _procedureCodeableConcept?: Element | undefined;

          
            
  /**
 * The code or reference to a Procedure resource which identifies the clinical
 * intervention performed.
 */
  procedureReference?: Reference | undefined;
  _procedureReference?: Element | undefined;

          
        
      
        
          
  /**
 * A number to uniquely identify procedure entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * When the condition was observed or the relative ranking.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * Unique Device Identifiers associated with this line item.
 */
  udi?: Array<Reference> | undefined;
  _udi?: Element[] | undefined;

        
      
        
          
  /**
 * A note that describes or explains adjudication results in a human readable form.
 */
  processNote?: Array<BackboneElement> | undefined;
  _processNote?: Element[] | undefined;

        
      
        
          
  /**
 * A code to define the language used in the text of the note.
 * Only required if the language is different from the resource language.
 */
  language?: CodeableConcept | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify a note entry.
 */
  number?: number | undefined;
  _number?: Element | undefined;

        
      
        
          
  /**
 * The explanation or description associated with the processing.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * The business purpose of the note text.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The provider which is responsible for the claim, predetermination or
 * preauthorization.
 * Typically this field would be 1..1 where this party is responsible for the claim
 * but not necessarily professionally responsible for the provision of the
 * individual products and services listed below.
 */
  provider: Reference;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * A reference to a referral resource.
 * The referral resource which lists the date, practitioner, reason and other
 * supporting information.
 */
  referral?: Reference | undefined;
  _referral?: Element | undefined;

        
      
        
          
  /**
 * Other claims which are related to this claim such as prior submissions or claims
 * for related services or for the same event.
 * For example,  for the original treatment and follow-up exams.
 */
  related?: Array<BackboneElement> | undefined;
  _related?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to a related claim.
 */
  claim?: Reference | undefined;
  _claim?: Element | undefined;

        
      
        
          
  /**
 * An alternate organizational reference to the case or file to which this
 * particular claim pertains.
 * For example, Property/Casualty insurer claim number or Workers Compensation case
 * number.
 */
  reference?: Identifier | undefined;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * A code to convey how the claims are related.
 * For example, prior claim or umbrella.
 */
  relationship?: CodeableConcept | undefined;
  _relationship?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A finer grained suite of claim type codes which may convey additional
 * information such as Inpatient vs Outpatient and/or a specialty service.
 * This may contain the local bill type codes such as the US UB-04 bill type code.
 */
  subType?: CodeableConcept | undefined;
  _subType?: Element | undefined;

        
      
        
          
  /**
 * Additional information codes regarding exceptions, special considerations, the
 * condition, situation, prior or concurrent issues.
 * Often there are multiple jurisdiction specific valuesets which are required.
 */
  supportingInfo?: Array<BackboneElement> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
        
          
  /**
 * The general class of the information supplied: information; exception; accident,
 * employment; onset, etc.
 * This may contain a category for the local bill type codes.
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * System and code pertaining to the specific information regarding special
 * conditions relating to the setting, treatment or patient  for which care is
 * sought.
 * This may contain the local bill type codes such as the US UB-04 bill type code.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Provides the reason in the situation where a reason code is required in addition
 * to the content.
 * For example: the reason for the additional stay, or why a tooth is  missing.
 */
  reason?: Coding | undefined;
  _reason?: Element | undefined;

        
      
        
          
  /**
 * A number to uniquely identify supporting information entries.
 */
  sequence: number;
  _sequence?: Element | undefined;

        
      
        
          
            
  /**
 * The date when or period to which this information refers.
 */
  timingDate?: string | undefined;
  _timingDate?: Element | undefined;

          
            
  /**
 * The date when or period to which this information refers.
 */
  timingPeriod?: Period | undefined;
  _timingPeriod?: Element | undefined;

          
        
      
        
          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example,
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example,
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example,
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example,
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * Additional data or information such as resources, documents, images etc.
 * including references to the data or the actual inclusion of the data.
 * Could be used to provide references to other resources, document. For example,
 * could contain a PDF in an Attachment of the Police Report for an Accident.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
        
          
  /**
 * Categorized monetary totals for the adjudication.
 * Totals for amounts submitted, co-pays, benefits payable etc.
 */
  total?: Array<BackboneElement> | undefined;
  _total?: Element[] | undefined;

        
      
        
          
  /**
 * Monetary total amount associated with the category.
 */
  amount: Money;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate the information type of this adjudication record. Information
 * types may include: the value submitted, maximum values or percentages allowed or
 * payable under the plan, amounts that the patient is responsible for in aggregate
 * or pertaining to this item, amounts paid by other coverages, and the benefit
 * payable for this item.
 * For example, codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
 * The majority of jurisdictions use: oral, pharmacy, vision, professional and
 * institutional, or variants on those terms, as the general styles of claims. The
 * valueset is extensible to accommodate other jurisdictional requirements.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate whether the nature of the request is: to request adjudication
 * of products and services previously rendered; or requesting authorization and
 * adjudication for provision in the future; or requesting the non-binding
 * adjudication of the listed products and services which could be provided in the
 * future.
 */
  use: string;
  _use?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * Expression
 * 
 * Base StructureDefinition for Expression Type: A expression that is evaluated in
 * a specified context and returns a value. The context of use of the expression
 * must specify the context in which the expression is evaluated, and how the
 * result of the expression is used.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Expression.html}
 */
    export interface Expression extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A brief, natural language description of the condition that effectively
 * communicates the intended semantics.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An expression in the specified language that returns a value.
 */
  expression?: string | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * The media type of the language for the expression.
 */
  language: string;
  _language?: Element | undefined;

        
      
        
          
  /**
 * A short name assigned to the expression to allow for multiple reuse of the
 * expression in the context where it is defined.
 */
  name?: id | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A URI that defines where the expression is found.
 * If both a reference and an expression is found, the reference SHALL point to the
 * same expression.
 */
  reference?: string | undefined;
  _reference?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Extension
 * 
 * Base StructureDefinition for Extension Type: Optional Extension Element - found
 * in all resources.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Extension.html}
 */
    export interface Extension extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Source of the definition for the extension code - a logical name or a URL.
 * The definition may point directly to a computable or human-readable definition
 * of the extensibility codes, or it may be a logical URI as declared in some other
 * specification. The definition SHALL be a URI for the Structure Definition
 * defining the extension.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueCanonical?: string | undefined;
  _valueCanonical?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueCode?: string | undefined;
  _valueCode?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueId?: id | undefined;
  _valueId?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueInstant?: string | undefined;
  _valueInstant?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueMarkdown?: string | undefined;
  _valueMarkdown?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueOid?: oid | undefined;
  _valueOid?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valuePositiveInt?: number | undefined;
  _valuePositiveInt?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueUnsignedInt?: unsignedInt | undefined;
  _valueUnsignedInt?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueUrl?: string | undefined;
  _valueUrl?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueUuid?: uuid | undefined;
  _valueUuid?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueAddress?: Address | undefined;
  _valueAddress?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueAge?: Age | undefined;
  _valueAge?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueAnnotation?: Annotation | undefined;
  _valueAnnotation?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueCodeableReference?: CodeableReference | undefined;
  _valueCodeableReference?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueContactPoint?: ContactPoint | undefined;
  _valueContactPoint?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueCount?: Count | undefined;
  _valueCount?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueDistance?: Distance | undefined;
  _valueDistance?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueDuration?: Duration | undefined;
  _valueDuration?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueHumanName?: HumanName | undefined;
  _valueHumanName?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueIdentifier?: Identifier | undefined;
  _valueIdentifier?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueMoney?: Money | undefined;
  _valueMoney?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueRatio?: Ratio | undefined;
  _valueRatio?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueRatioRange?: RatioRange | undefined;
  _valueRatioRange?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueSampledData?: SampledData | undefined;
  _valueSampledData?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueSignature?: Signature | undefined;
  _valueSignature?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueTiming?: Timing | undefined;
  _valueTiming?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueContactDetail?: ContactDetail | undefined;
  _valueContactDetail?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueContributor?: Contributor | undefined;
  _valueContributor?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueDataRequirement?: DataRequirement | undefined;
  _valueDataRequirement?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueExpression?: Expression | undefined;
  _valueExpression?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueParameterDefinition?: ParameterDefinition | undefined;
  _valueParameterDefinition?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  _valueRelatedArtifact?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  _valueTriggerDefinition?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueUsageContext?: UsageContext | undefined;
  _valueUsageContext?: Element | undefined;

          
            
  /**
 * Value of extension - must be one of a constrained set of the data types (see
 * [Extensibility](extensibility.html) for a list).
 */
  valueDosage?: Dosage | undefined;
  _valueDosage?: Element | undefined;

          
        
      
    }

  


  


  


  
    /**
 * FamilyMemberHistory
 * 
 * Significant health conditions for a person related to the patient relevant in
 * the context of care for the patient.
 * 
 * @see {@link http://hl7.org/fhir/R4B/FamilyMemberHistory.html}
 */
    export interface FamilyMemberHistory extends DomainResource {
      
      readonly resourceType: "FamilyMemberHistory";
      

      
        
          
            
  /**
 * The age of the relative at the time the family member history is recorded.
 * use estimatedAge to indicate whether the age is actual or not.
 */
  ageAge?: Age | undefined;
  _ageAge?: Element | undefined;

          
            
  /**
 * The age of the relative at the time the family member history is recorded.
 * use estimatedAge to indicate whether the age is actual or not.
 */
  ageRange?: Range | undefined;
  _ageRange?: Element | undefined;

          
            
  /**
 * The age of the relative at the time the family member history is recorded.
 * use estimatedAge to indicate whether the age is actual or not.
 */
  ageString?: string | undefined;
  _ageString?: Element | undefined;

          
        
      
        
          
            
  /**
 * The actual or approximate date of birth of the relative.
 */
  bornPeriod?: Period | undefined;
  _bornPeriod?: Element | undefined;

          
            
  /**
 * The actual or approximate date of birth of the relative.
 */
  bornDate?: string | undefined;
  _bornDate?: Element | undefined;

          
            
  /**
 * The actual or approximate date of birth of the relative.
 */
  bornString?: string | undefined;
  _bornString?: Element | undefined;

          
        
      
        
          
  /**
 * The significant Conditions (or condition) that the family member had. This is a
 * repeating section to allow a system to represent more than one condition per
 * resource, though there is nothing stopping multiple resources - one per
 * condition.
 */
  condition?: Array<BackboneElement> | undefined;
  _condition?: Element[] | undefined;

        
      
        
          
  /**
 * The actual condition specified. Could be a coded condition (like MI or Diabetes)
 * or a less specific string like 'cancer' depending on how much is known about the
 * condition and the capabilities of the creating system.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * This condition contributed to the cause of death of the related person. If
 * contributedToDeath is not populated, then it is unknown.
 */
  contributedToDeath?: boolean | undefined;
  _contributedToDeath?: Element | undefined;

        
      
        
          
  /**
 * An area where general notes can be placed about this specific condition.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * Either the age of onset, range of approximate age or descriptive string can be
 * recorded.  For conditions with multiple occurrences, this describes the first
 * known occurrence.
 */
  onsetAge?: Age | undefined;
  _onsetAge?: Element | undefined;

          
            
  /**
 * Either the age of onset, range of approximate age or descriptive string can be
 * recorded.  For conditions with multiple occurrences, this describes the first
 * known occurrence.
 */
  onsetRange?: Range | undefined;
  _onsetRange?: Element | undefined;

          
            
  /**
 * Either the age of onset, range of approximate age or descriptive string can be
 * recorded.  For conditions with multiple occurrences, this describes the first
 * known occurrence.
 */
  onsetPeriod?: Period | undefined;
  _onsetPeriod?: Element | undefined;

          
            
  /**
 * Either the age of onset, range of approximate age or descriptive string can be
 * recorded.  For conditions with multiple occurrences, this describes the first
 * known occurrence.
 */
  onsetString?: string | undefined;
  _onsetString?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates what happened following the condition.  If the condition resulted in
 * death, deceased date is captured on the relation.
 */
  outcome?: CodeableConcept | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * Describes why the family member's history is not available.
 */
  dataAbsentReason?: CodeableConcept | undefined;
  _dataAbsentReason?: Element | undefined;

        
      
        
          
  /**
 * The date (and possibly time) when the family member history was recorded or last
 * updated.
 * This should be captured even if the same as the date on the List aggregating the
 * full family history.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
            
  /**
 * Deceased flag or the actual or approximate age of the relative at the time of
 * death for the family member history record.
 */
  deceasedBoolean?: boolean | undefined;
  _deceasedBoolean?: Element | undefined;

          
            
  /**
 * Deceased flag or the actual or approximate age of the relative at the time of
 * death for the family member history record.
 */
  deceasedAge?: Age | undefined;
  _deceasedAge?: Element | undefined;

          
            
  /**
 * Deceased flag or the actual or approximate age of the relative at the time of
 * death for the family member history record.
 */
  deceasedRange?: Range | undefined;
  _deceasedRange?: Element | undefined;

          
            
  /**
 * Deceased flag or the actual or approximate age of the relative at the time of
 * death for the family member history record.
 */
  deceasedDate?: string | undefined;
  _deceasedDate?: Element | undefined;

          
            
  /**
 * Deceased flag or the actual or approximate age of the relative at the time of
 * death for the family member history record.
 */
  deceasedString?: string | undefined;
  _deceasedString?: Element | undefined;

          
        
      
        
          
  /**
 * If true, indicates that the age value specified is an estimated value.
 * This element is labeled as a modifier because the fact that age is estimated
 * can/should change the results of any algorithm that calculates based on the
 * specified age.
 */
  estimatedAge?: boolean | undefined;
  _estimatedAge?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this family member history by the performer or
 * other systems which remain constant as the resource is updated and propagates
 * from server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this FamilyMemberHistory.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this
 * FamilyMemberHistory.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with
 * the red hair".
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * This property allows a non condition-specific note to the made about the related
 * person. Ideally, the note would be in the condition property, but this is not
 * always possible.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The person who this history concerns.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * Describes why the family member history occurred in coded or textual form.
 * Textual reasons can be captured using reasonCode.text.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse
 * that justifies this family member history event.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The type of relationship this person has to the patient (father, mother, brother
 * etc.).
 */
  relationship: CodeableConcept;
  _relationship?: Element | undefined;

        
      
        
          
  /**
 * The birth sex of the family member.
 * This element should ideally reflect whether the individual is genetically male
 * or female.  However, as reported information based on the knowledge of the
 * patient or reporting friend/relative, there may be situations where the reported
 * sex might not be totally accurate.  E.g. 'Aunt Sue' might be XY rather than XX.
 * Questions soliciting this information should be phrased to encourage capture of
 * genetic sex where known.  However, systems performing analysis should also allow
 * for the possibility of imprecision with this element.
 */
  sex?: CodeableConcept | undefined;
  _sex?: Element | undefined;

        
      
        
          
  /**
 * A code specifying the status of the record of the family history of a specific
 * family member.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * FiveWs
 * 
 * Logical Model: Who What When Where Why - Common pattern for all resources that
 * deals with attribution.
 * 
 * @see {@link http://hl7.org/fhir/R4B/FiveWs.html}
 */
    export interface FiveWs {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * who did the work described the resource (or will do).
 */
  actor?: Array<Reference> | undefined;
  _actor?: Element[] | undefined;

        
      
        
          
  /**
 * who authored the content of the resource.
 */
  author?: Array<Reference> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * who prompted the work described in the resource.
 */
  cause?: Array<Reference> | undefined;
  _cause?: Element[] | undefined;

        
      
        
          
  /**
 * Classifier Field.
 */
  class?: Array<CodeableConcept> | undefined;
  _class?: Element[] | undefined;

        
      
        
          
  /**
 * a resource that gives context for the work described in this resource (usually
 * Encounter or EpisodeOfCare).
 */
  context?: Reference | undefined;
  _context?: Element | undefined;

        
      
        
          
            
  /**
 * when the work described in this resource was completed (or will be).
 */
  doneDateTime?: string | undefined;
  _doneDateTime?: Element | undefined;

          
            
  /**
 * when the work described in this resource was completed (or will be).
 */
  donePeriod?: Period | undefined;
  _donePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * A field that indicates the potential impact of the content of the resource.
 */
  grade?: CodeableConcept | undefined;
  _grade?: Element | undefined;

        
      
        
          
  /**
 * Business Identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * when the work described in this resource was started (or will be).
 */
  init?: string | undefined;
  _init?: Element | undefined;

        
      
        
          
  /**
 * when this resource is planned to occur.
 */
  planned?: Array<Timing> | undefined;
  _planned?: Element[] | undefined;

        
      
        
          
  /**
 * when this resource itself was created.
 */
  recorded?: string | undefined;
  _recorded?: Element | undefined;

        
      
        
          
  /**
 * Who provided the information in this resource.
 */
  source?: Array<Reference> | undefined;
  _source?: Element[] | undefined;

        
      
        
          
  /**
 * Status Field.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Who this resource is about.
 */
  subject?: Array<Reference> | undefined;
  _subject?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier for this version.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
            
  /**
 * what this resource is about.
 */
  whatCodeableConcept?: CodeableConcept | undefined;
  _whatCodeableConcept?: Element | undefined;

          
            
  /**
 * what this resource is about.
 */
  whatReference?: Reference | undefined;
  _whatReference?: Element | undefined;

          
        
      
        
          
            
  /**
 * The location of the work described.
 */
  whereCodeableConcept?: Array<CodeableConcept> | undefined;
  _whereCodeableConcept?: Element[] | undefined;

          
            
  /**
 * The location of the work described.
 */
  whereReference?: Array<Reference> | undefined;
  _whereReference?: Element[] | undefined;

          
        
      
        
          
  /**
 * An actor involved in the work described by this resource.
 */
  who?: Array<Reference> | undefined;
  _who?: Element[] | undefined;

        
      
        
          
            
  /**
 * Why this work was done.
 */
  whyCodeableConcept?: Array<CodeableConcept> | undefined;
  _whyCodeableConcept?: Element[] | undefined;

          
            
  /**
 * Why this work was done.
 */
  whyReference?: Array<Reference> | undefined;
  _whyReference?: Element[] | undefined;

          
        
      
        
          
  /**
 * who attests to the content of the resource (individual or org).
 */
  witness?: Array<Reference> | undefined;
  _witness?: Element[] | undefined;

        
      
    }

  


  
    /**
 * Flag
 * 
 * Prospective warnings of potential issues when providing care to the patient.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Flag.html}
 */
    export interface Flag extends DomainResource {
      
      readonly resourceType: "Flag";
      

      
        
          
  /**
 * The person, organization or device that created the flag.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * Allows a flag to be divided into different categories like clinical,
 * administrative etc. Intended to be used as a means of filtering which flags are
 * displayed to particular user or in a given context.
 * The value set will often need to be adjusted based on local business rules and
 * usage context.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The coded value or textual component of the flag to display to the user.
 * If non-coded, use CodeableConcept.text.  This element should always be included
 * in the narrative.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * This alert is only relevant during the encounter.
 * If both Flag.encounter and Flag.period are valued, then Flag.period.start shall
 * not be before Encounter.period.start and Flag.period.end shall not be after
 * Encounter.period.end.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this flag by the performer or other systems
 * which remain constant as the resource is updated and propagates from server to
 * server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The period of time from the activation of the flag to inactivation of the flag.
 * If the flag is active, the end of the period should be unspecified.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Supports basic workflow.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The patient, location, group, organization, or practitioner etc. this is about
 * record this flag is associated with.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * Goal
 * 
 * Describes the intended objective(s) for a patient, group or organization care,
 * for example, weight loss, restoring an activity of daily living, obtaining herd
 * immunity via immunization, meeting a process improvement objective, etc.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Goal.html}
 */
    export interface Goal extends DomainResource {
      
      readonly resourceType: "Goal";
      

      
        
          
  /**
 * Describes the progression, or lack thereof, towards the goal against the target.
 */
  achievementStatus?: CodeableConcept | undefined;
  _achievementStatus?: Element | undefined;

        
      
        
          
  /**
 * The identified conditions and other health record elements that are intended to
 * be addressed by the goal.
 */
  addresses?: Array<Reference> | undefined;
  _addresses?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a category the goal falls within.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Human-readable and/or coded description of a specific desired objective of care,
 * such as "control blood pressure" or "negotiate an obstacle course" or "dance
 * with child at wedding".
 * If no code is available, use CodeableConcept.text.
 */
  description: CodeableConcept;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Indicates whose goal this is - patient goal, practitioner goal, etc.
 * This is the individual responsible for establishing the goal, not necessarily
 * who recorded it.  (For that, use the Provenance resource.).
 */
  expressedBy?: Reference | undefined;
  _expressedBy?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this goal by the performer or other systems
 * which remain constant as the resource is updated and propagates from server to
 * server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The state of the goal throughout its lifecycle.
 * This element is labeled as a modifier because the lifecycleStatus contains codes
 * that mark the resource as not currently valid.
 */
  lifecycleStatus: string;
  _lifecycleStatus?: Element | undefined;

        
      
        
          
  /**
 * Any comments related to the goal.
 * May be used for progress notes, concerns or other related information that
 * doesn't actually describe the goal itself.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the change (or lack of change) at the point when the status of the
 * goal is assessed.
 * Note that this should not duplicate the goal status.
 */
  outcomeCode?: Array<CodeableConcept> | undefined;
  _outcomeCode?: Element[] | undefined;

        
      
        
          
  /**
 * Details of what's changed (or not changed).
 * The goal outcome is independent of the outcome of the related activities.  For
 * example, if the Goal is to achieve a target body weight of 150 lb and a care
 * plan activity is defined to diet, then the care plan’s activity outcome could be
 * calories consumed whereas goal outcome is an observation for the actual body
 * weight measured.
 */
  outcomeReference?: Array<Reference> | undefined;
  _outcomeReference?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the mutually agreed level of importance associated with
 * reaching/sustaining the goal.
 * Extensions are available to track priorities as established by each participant
 * (i.e. Priority from the patient's perspective, different practitioners'
 * perspectives, family member's perspectives)The ordinal extension on Coding can
 * be used to convey a numerically comparable ranking to priority.  (Keep in mind
 * that different coding systems may use a "low value=important".
 */
  priority?: CodeableConcept | undefined;
  _priority?: Element | undefined;

        
      
        
          
            
  /**
 * The date or event after which the goal should begin being pursued.
 */
  startDate?: string | undefined;
  _startDate?: Element | undefined;

          
            
  /**
 * The date or event after which the goal should begin being pursued.
 */
  startCodeableConcept?: CodeableConcept | undefined;
  _startCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * Identifies when the current status.  I.e. When initially created, when achieved,
 * when cancelled, etc.
 * To see the date for past statuses, query history.
 */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current status.
 * This will typically be captured for statuses such as rejected, on-hold or
 * cancelled, but could be present for others.
 */
  statusReason?: string | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * Identifies the patient, group or organization for whom the goal is being
 * established.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Indicates what should be done by when.
 * When multiple targets are present for a single goal instance, all targets must
 * be met for the overall goal to be met.
 */
  target?: Array<BackboneElement> | undefined;
  _target?: Element[] | undefined;

        
      
        
          
            
  /**
 * The target value of the focus to be achieved to signify the fulfillment of the
 * goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any focus value at or below the high value. Similarly, if the high
 * value is missing, it indicates that the goal is achieved at any focus value at
 * or above the low value.
 * A CodeableConcept with just a text would be used instead of a string if the
 * field was usually coded, or if the type associated with the Goal.target.measure
 * defines a coded value.
 */
  detailQuantity?: Quantity | undefined;
  _detailQuantity?: Element | undefined;

          
            
  /**
 * The target value of the focus to be achieved to signify the fulfillment of the
 * goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any focus value at or below the high value. Similarly, if the high
 * value is missing, it indicates that the goal is achieved at any focus value at
 * or above the low value.
 * A CodeableConcept with just a text would be used instead of a string if the
 * field was usually coded, or if the type associated with the Goal.target.measure
 * defines a coded value.
 */
  detailRange?: Range | undefined;
  _detailRange?: Element | undefined;

          
            
  /**
 * The target value of the focus to be achieved to signify the fulfillment of the
 * goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any focus value at or below the high value. Similarly, if the high
 * value is missing, it indicates that the goal is achieved at any focus value at
 * or above the low value.
 * A CodeableConcept with just a text would be used instead of a string if the
 * field was usually coded, or if the type associated with the Goal.target.measure
 * defines a coded value.
 */
  detailCodeableConcept?: CodeableConcept | undefined;
  _detailCodeableConcept?: Element | undefined;

          
            
  /**
 * The target value of the focus to be achieved to signify the fulfillment of the
 * goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any focus value at or below the high value. Similarly, if the high
 * value is missing, it indicates that the goal is achieved at any focus value at
 * or above the low value.
 * A CodeableConcept with just a text would be used instead of a string if the
 * field was usually coded, or if the type associated with the Goal.target.measure
 * defines a coded value.
 */
  detailString?: string | undefined;
  _detailString?: Element | undefined;

          
            
  /**
 * The target value of the focus to be achieved to signify the fulfillment of the
 * goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any focus value at or below the high value. Similarly, if the high
 * value is missing, it indicates that the goal is achieved at any focus value at
 * or above the low value.
 * A CodeableConcept with just a text would be used instead of a string if the
 * field was usually coded, or if the type associated with the Goal.target.measure
 * defines a coded value.
 */
  detailBoolean?: boolean | undefined;
  _detailBoolean?: Element | undefined;

          
            
  /**
 * The target value of the focus to be achieved to signify the fulfillment of the
 * goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any focus value at or below the high value. Similarly, if the high
 * value is missing, it indicates that the goal is achieved at any focus value at
 * or above the low value.
 * A CodeableConcept with just a text would be used instead of a string if the
 * field was usually coded, or if the type associated with the Goal.target.measure
 * defines a coded value.
 */
  detailInteger?: number | undefined;
  _detailInteger?: Element | undefined;

          
            
  /**
 * The target value of the focus to be achieved to signify the fulfillment of the
 * goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any focus value at or below the high value. Similarly, if the high
 * value is missing, it indicates that the goal is achieved at any focus value at
 * or above the low value.
 * A CodeableConcept with just a text would be used instead of a string if the
 * field was usually coded, or if the type associated with the Goal.target.measure
 * defines a coded value.
 */
  detailRatio?: Ratio | undefined;
  _detailRatio?: Element | undefined;

          
        
      
        
          
            
  /**
 * Indicates either the date or the duration after start by which the goal should
 * be met.
 */
  dueDate?: string | undefined;
  _dueDate?: Element | undefined;

          
            
  /**
 * Indicates either the date or the duration after start by which the goal should
 * be met.
 */
  dueDuration?: Duration | undefined;
  _dueDuration?: Element | undefined;

          
        
      
        
          
  /**
 * The parameter whose value is being tracked, e.g. body weight, blood pressure, or
 * hemoglobin A1c level.
 */
  measure?: CodeableConcept | undefined;
  _measure?: Element | undefined;

        
      
    }

  


  
    /**
 * GraphDefinition
 * 
 * A formal computable definition of a graph of resources - that is, a coherent set
 * of resources that form a graph by following references. The Graph Definition
 * resource defines a set and makes rules about the set.
 * 
 * @see {@link http://hl7.org/fhir/R4B/GraphDefinition.html}
 */
    export interface GraphDefinition extends DomainResource {
      
      readonly resourceType: "GraphDefinition";
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the graph definition was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the graph definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the graph definition. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the graph definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the graph definition
 * was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the graph definition as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the graph definition is presumed to
 * be the predominant language in the place the graph definition was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this graph definition is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of graph definitions that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the graph definition is intended to be
 * used.
 * It may be possible for the graph definition to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * Links this graph makes rules about.
 */
  link?: Array<BackboneElement> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * Information about why this link is of interest in this graph definition.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Maximum occurrences for this link.
 */
  max?: string | undefined;
  _max?: Element | undefined;

        
      
        
          
  /**
 * Minimum occurrences for this link.
 */
  min?: number | undefined;
  _min?: Element | undefined;

        
      
        
          
  /**
 * A FHIR expression that identifies one of FHIR References to other resources.
 * The path expression cannot contain a resolve() function. If there is no path,
 * the link is a reverse lookup, using target.params. If the path is "*" then this
 * means all references in the resource.
 */
  path?: string | undefined;
  _path?: Element | undefined;

        
      
        
          
  /**
 * Which slice (if profiled).
 */
  sliceName?: string | undefined;
  _sliceName?: Element | undefined;

        
      
        
          
  /**
 * Potential target for the link.
 */
  target?: Array<BackboneElement> | undefined;
  _target?: Element[] | undefined;

        
      
        
          
  /**
 * Compartment Consistency Rules.
 */
  compartment?: Array<BackboneElement> | undefined;
  _compartment?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the compartment.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Documentation for FHIRPath expression.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Custom rule, as a FHIRPath expression.
 */
  expression?: string | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * identical | matching | different | no-rule | custom.
 */
  rule: string;
  _rule?: Element | undefined;

        
      
        
          
  /**
 * Defines how the compartment rule is used - whether it it is used to test whether
 * resources are subject to the rule, or whether it is a rule that must be
 * followed.
 * All conditional rules are evaluated; if they are true, then the rules are
 * evaluated.
 */
  use: string;
  _use?: Element | undefined;

        
      
        
          
  /**
 * Additional links from target resource.
 */
  link?: Array<undefined> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * A set of parameters to look up.
 * At least one of the parameters must have the value {ref} which identifies the
 * focus resource.
 */
  params?: string | undefined;
  _params?: Element | undefined;

        
      
        
          
  /**
 * Profile for the target resource.
 */
  profile?: string | undefined;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * Type of resource this link refers to.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the graph definition. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The profile that describes the use of the base resource.
 * The code does not include the '$' prefix that is always included in the URL when
 * the operation is invoked.
 */
  profile?: string | undefined;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the graph definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the graph definition is the organization or individual primarily responsible for
 * the maintenance and upkeep of the graph definition. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the graph definition. This item SHOULD be populated unless the information
 * is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this graph definition is needed and why it has been designed
 * as it has.
 * This element does not describe the usage of the graph definition. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this graph definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The type of FHIR resource at which instances of this graph start.
 */
  start: string;
  _start?: Element | undefined;

        
      
        
          
  /**
 * The status of this graph definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of graph definitions that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this graph definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this graph definition is
 * (or will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the graph definition is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate graph definition
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the graph definition
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the graph definition author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different graph definition instances that have the same identifier
 * but different versions.  The version can be appended to the url in a reference
 * to allow a reference to a particular business version of the graph definition
 * with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Group
 * 
 * Represents a defined collection of entities that may be discussed or acted upon
 * collectively but which are not expected to act collectively, and are not
 * formally or legally recognized; i.e. a collection of entities that isn't an
 * Organization.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Group.html}
 */
    export interface Group extends DomainResource {
      
      readonly resourceType: "Group";
      

      
        
          
  /**
 * Indicates whether the record for the group is available for use or is merely
 * being retained for historical purposes.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * If true, indicates that the resource refers to a specific group of real
 * individuals.  If false, the group defines a set of intended individuals.
 */
  actual: boolean;
  _actual?: Element | undefined;

        
      
        
          
  /**
 * Identifies traits whose presence r absence is shared by members of the group.
 * All the identified characteristics must be true for an entity to a member of the
 * group.
 */
  characteristic?: Array<BackboneElement> | undefined;
  _characteristic?: Element[] | undefined;

        
      
        
          
  /**
 * A code that identifies the kind of trait being asserted.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * If true, indicates the characteristic is one that is NOT held by members of the
 * group.
 * This is labeled as "Is Modifier" because applications cannot wrongly include
 * excluded members as included or vice versa.
 */
  exclude: boolean;
  _exclude?: Element | undefined;

        
      
        
          
  /**
 * The period over which the characteristic is tested; e.g. the patient had an
 * operation during the month of June.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
            
  /**
 * The value of the trait that holds (or does not hold - see 'exclude') for members
 * of the group.
 * For Range, it means members of the group have a value that falls somewhere
 * within the specified range.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The value of the trait that holds (or does not hold - see 'exclude') for members
 * of the group.
 * For Range, it means members of the group have a value that falls somewhere
 * within the specified range.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The value of the trait that holds (or does not hold - see 'exclude') for members
 * of the group.
 * For Range, it means members of the group have a value that falls somewhere
 * within the specified range.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The value of the trait that holds (or does not hold - see 'exclude') for members
 * of the group.
 * For Range, it means members of the group have a value that falls somewhere
 * within the specified range.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The value of the trait that holds (or does not hold - see 'exclude') for members
 * of the group.
 * For Range, it means members of the group have a value that falls somewhere
 * within the specified range.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
        
          
  /**
 * Provides a specific type of resource the group includes; e.g. "cow", "syringe",
 * etc.
 * This would generally be omitted for Person resources.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A unique business identifier for this group.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Entity responsible for defining and maintaining Group characteristics and/or
 * registered members.
 * This does not strictly align with ownership of a herd or flock, but may suffice
 * to represent that relationship in simple cases. More complex cases will require
 * an extension.
 */
  managingEntity?: Reference | undefined;
  _managingEntity?: Element | undefined;

        
      
        
          
  /**
 * Identifies the resource instances that are members of the group.
 */
  member?: Array<BackboneElement> | undefined;
  _member?: Element[] | undefined;

        
      
        
          
  /**
 * A reference to the entity that is a member of the group. Must be consistent with
 * Group.type. If the entity is another group, then the type must be the same.
 */
  entity: Reference;
  _entity?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that the member is no longer in the group, but previously may
 * have been a member.
 */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;

        
      
        
          
  /**
 * The period that the member was in the group, if known.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * A label assigned to the group for human identification and communication.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A count of the number of resource instances that are part of the group.
 * Note that the quantity may be less than the number of members if some of the
 * members are not active.
 */
  quantity?: unsignedInt | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Identifies the broad classification of the kind of resources the group includes.
 * Group members SHALL be of the appropriate resource type (Patient for person or
 * animal; or Practitioner, Device, Medication or Substance for the other types.).
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  


  
    /**
 * GuidanceResponse
 * 
 * A guidance response is the formal response to a guidance request, including any
 * output parameters returned by the evaluation, as well as the description of any
 * proposed actions to be taken.
 * 
 * @see {@link http://hl7.org/fhir/R4B/GuidanceResponse.html}
 */
    export interface GuidanceResponse extends DomainResource {
      
      readonly resourceType: "GuidanceResponse";
      

      
        
          
  /**
 * If the evaluation could not be completed due to lack of information, or
 * additional information would potentially result in a more accurate response,
 * this element will a description of the data required in order to proceed with
 * the evaluation. A subsequent request to the service should include this data.
 */
  dataRequirement?: Array<DataRequirement> | undefined;
  _dataRequirement?: Element[] | undefined;

        
      
        
          
  /**
 * The encounter during which this response was created or to which the creation of
 * this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official copmletion of an
 * encounter but still be tied to the context of the encounter.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Messages resulting from the evaluation of the artifact or artifacts. As part of
 * evaluating the request, the engine may produce informational or warning
 * messages. These messages will be provided by this element.
 */
  evaluationMessage?: Array<Reference> | undefined;
  _evaluationMessage?: Element[] | undefined;

        
      
        
          
  /**
 * Allows a service to provide  unique, business identifiers for the response.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
            
  /**
 * An identifier, CodeableConcept or canonical reference to the guidance that was
 * requested.
 */
  moduleUri?: string | undefined;
  _moduleUri?: Element | undefined;

          
            
  /**
 * An identifier, CodeableConcept or canonical reference to the guidance that was
 * requested.
 */
  moduleCanonical?: string | undefined;
  _moduleCanonical?: Element | undefined;

          
            
  /**
 * An identifier, CodeableConcept or canonical reference to the guidance that was
 * requested.
 */
  moduleCodeableConcept?: CodeableConcept | undefined;
  _moduleCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * Provides a mechanism to communicate additional information about the response.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates when the guidance response was processed.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

        
      
        
          
  /**
 * The output parameters of the evaluation, if any. Many modules will result in the
 * return of specific resources such as procedure or communication requests that
 * are returned as part of the operation result. However, modules may define
 * specific outputs that would be returned as the result of the evaluation, and
 * these would be returned in this element.
 */
  outputParameters?: Reference | undefined;
  _outputParameters?: Element | undefined;

        
      
        
          
  /**
 * Provides a reference to the device that performed the guidance.
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * Describes the reason for the guidance response in coded or textual form.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the reason the request was initiated. This is typically provided as a
 * parameter to the evaluation and echoed by the service, although for some use
 * cases, such as subscription- or event-based scenarios, it may provide an
 * indication of the cause for the response.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier of the request associated with this response. If an identifier
 * was given as part of the request, it will be reproduced here to enable the
 * requester to more easily identify the response in a multi-request scenario.
 */
  requestIdentifier?: Identifier | undefined;
  _requestIdentifier?: Element | undefined;

        
      
        
          
  /**
 * The actions, if any, produced by the evaluation of the artifact.
 */
  result?: Reference | undefined;
  _result?: Element | undefined;

        
      
        
          
  /**
 * The status of the response. If the evaluation is completed successfully, the
 * status will indicate success. However, in order to complete the evaluation, the
 * engine may require more information. In this case, the status will be
 * data-required, and the response will contain a description of the additional
 * required information. If the evaluation completed successfully, but the engine
 * determines that a potentially more accurate response could be provided if more
 * data was available, the status will be data-requested, and the response will
 * contain a description of the additional requested information.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The patient for which the request was processed.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
    }

  


  


  
    /**
 * HealthcareService
 * 
 * The details of a healthcare service available at a location.
 * 
 * @see {@link http://hl7.org/fhir/R4B/HealthcareService.html}
 */
    export interface HealthcareService extends DomainResource {
      
      readonly resourceType: "HealthcareService";
      

      
        
          
  /**
 * This flag is used to mark the record to not be used. This is not used when a
 * center is closed for maintenance, or for holidays, the notAvailable period is to
 * be used for this.
 * This element is labeled as a modifier because it may be used to mark that the
 * resource was created in error.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether or not a prospective consumer will require an appointment for
 * a particular service at a site to be provided by the Organization. Indicates if
 * an appointment is required for access to this service.
 */
  appointmentRequired?: boolean | undefined;
  _appointmentRequired?: Element | undefined;

        
      
        
          
  /**
 * A description of site availability exceptions, e.g. public holiday availability.
 * Succinctly describing all possible exceptions to normal site availability as
 * details in the available Times and not available Times.
 */
  availabilityExceptions?: string | undefined;
  _availabilityExceptions?: Element | undefined;

        
      
        
          
  /**
 * A collection of times that the Service Site is available.
 * More detailed availability information may be provided in associated
 * Schedule/Slot resources.
 */
  availableTime?: Array<BackboneElement> | undefined;
  _availableTime?: Element[] | undefined;

        
      
        
          
  /**
 * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
 */
  allDay?: boolean | undefined;
  _allDay?: Element | undefined;

        
      
        
          
  /**
 * The closing time of day. Note: If the AllDay flag is set, then this time is
 * ignored.
 * The time zone is expected to be for where this HealthcareService is provided at.
 */
  availableEndTime?: time | undefined;
  _availableEndTime?: Element | undefined;

        
      
        
          
  /**
 * The opening time of day. Note: If the AllDay flag is set, then this time is
 * ignored.
 * The time zone is expected to be for where this HealthcareService is provided at.
 */
  availableStartTime?: time | undefined;
  _availableStartTime?: Element | undefined;

        
      
        
          
  /**
 * Indicates which days of the week are available between the start and end Times.
 */
  daysOfWeek?: Array<string> | undefined;
  _daysOfWeek?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the broad category of service being performed or delivered.
 * Selecting a Service Category then determines the list of relevant service types
 * that can be selected in the primary service type.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Collection of characteristics (attributes).
 * These could be such things as is wheelchair accessible.
 */
  characteristic?: Array<CodeableConcept> | undefined;
  _characteristic?: Element[] | undefined;

        
      
        
          
  /**
 * Any additional description of the service and/or any specific issues not covered
 * by the other attributes, which can be displayed as further detail under the
 * serviceName.
 * Would expect that a user would not see this information on a search results, and
 * it would only be available when viewing the complete details of the service.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Some services are specifically made available in multiple languages, this
 * property permits a directory to declare the languages this is offered in.
 * Typically this is only provided where a service operates in communities with
 * mixed languages used.
 * When using this property it indicates that the service is available with this
 * language, it is not derived from the practitioners, and not all are required to
 * use this language, just that this language is available while scheduling.
 */
  communication?: Array<CodeableConcept> | undefined;
  _communication?: Element[] | undefined;

        
      
        
          
  /**
 * The location(s) that this service is available to (not where the service is
 * provided).
 * The locations referenced by the coverage area can include both specific
 * locations, including areas, and also conceptual domains too (mode = kind), such
 * as a physical area (tri-state area) and some other attribute (covered by Example
 * Care Organization). These types of Locations are often not managed by any
 * specific organization. This could also include generic locations such as
 * "in-home".
 */
  coverageArea?: Array<Reference> | undefined;
  _coverageArea?: Element[] | undefined;

        
      
        
          
  /**
 * Does this service have specific eligibility requirements that need to be met in
 * order to use the service?
 */
  eligibility?: Array<BackboneElement> | undefined;
  _eligibility?: Element[] | undefined;

        
      
        
          
  /**
 * Coded value for the eligibility.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Describes the eligibility conditions for the service.
 * The description of service eligibility should, in general, not exceed one or two
 * paragraphs. It should be sufficient for a prospective consumer to determine if
 * they are likely to be eligible or not. Where eligibility requirements and
 * conditions are complex, it may simply be noted that an eligibility assessment is
 * required. Where eligibility is determined by an outside source, such as an Act
 * of Parliament, this should be noted, preferably with a reference to a commonly
 * available copy of the source document such as a web page.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Technical endpoints providing access to services operated for the specific
 * healthcare services defined at this resource.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * Extra details about the service that can't be placed in the other fields.
 */
  extraDetails?: string | undefined;
  _extraDetails?: Element | undefined;

        
      
        
          
  /**
 * External identifiers for this item.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The location(s) where this healthcare service may be provided.
 */
  location?: Array<Reference> | undefined;
  _location?: Element[] | undefined;

        
      
        
          
  /**
 * Further description of the service as it would be presented to a consumer while
 * searching.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The HealthcareService is not available during this period of time due to the
 * provided reason.
 */
  notAvailable?: Array<BackboneElement> | undefined;
  _notAvailable?: Element[] | undefined;

        
      
        
          
  /**
 * The reason that can be presented to the user as to why this time is not
 * available.
 */
  description: string;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Service is not available (seasonally or for a public holiday) from this date.
 */
  during?: Period | undefined;
  _during?: Element | undefined;

        
      
        
          
  /**
 * If there is a photo/symbol associated with this HealthcareService, it may be
 * included here to facilitate quick identification of the service in a list.
 */
  photo?: Attachment | undefined;
  _photo?: Element | undefined;

        
      
        
          
  /**
 * Programs that this service is applicable to.
 * Programs are often defined externally to an Organization, commonly by
 * governments; e.g. Home and Community Care Programs, Homeless Program, ….
 */
  program?: Array<CodeableConcept> | undefined;
  _program?: Element[] | undefined;

        
      
        
          
  /**
 * The organization that provides this healthcare service.
 * This property is recommended to be the same as the Location's
 * managingOrganization, and if not provided should be interpreted as such. If the
 * Location does not have a managing Organization, then this property should be
 * populated.
 */
  providedBy?: Reference | undefined;
  _providedBy?: Element | undefined;

        
      
        
          
  /**
 * Ways that the service accepts referrals, if this is not provided then it is
 * implied that no referral is required.
 */
  referralMethod?: Array<CodeableConcept> | undefined;
  _referralMethod?: Element[] | undefined;

        
      
        
          
  /**
 * The code(s) that detail the conditions under which the healthcare service is
 * available/offered.
 * The provision means being commissioned by, contractually obliged or financially
 * sourced. Types of costings that may apply to this healthcare service, such if
 * the service may be available for free, some discounts available, or fees apply.
 */
  serviceProvisionCode?: Array<CodeableConcept> | undefined;
  _serviceProvisionCode?: Element[] | undefined;

        
      
        
          
  /**
 * Collection of specialties handled by the service site. This is more of a medical
 * term.
 */
  specialty?: Array<CodeableConcept> | undefined;
  _specialty?: Element[] | undefined;

        
      
        
          
  /**
 * List of contacts related to this specific healthcare service.
 * If this is empty, then refer to the location's contacts.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
        
          
  /**
 * The specific type of service that may be delivered or performed.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * HumanName
 * 
 * Base StructureDefinition for HumanName Type: A human's name with the ability to
 * identify parts and usage.
 * 
 * @see {@link http://hl7.org/fhir/R4B/HumanName.html}
 */
    export interface HumanName extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea)
 * the family name of a son is the first name of his father.
 * Family Name may be decomposed into specific parts using extensions (de, nl, es
 * related cultures).
 */
  family?: string | undefined;
  _family?: Element | undefined;

        
      
        
          
  /**
 * Given name.
 * If only initials are recorded, they may be used in place of the full name parts.
 * Initials may be separated into multiple given names but often aren't due to
 * paractical limitations.  This element is not called "first name" since given
 * names do not always come first.
 */
  given?: Array<string> | undefined;
  _given?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the period of time when this name was valid for the named person.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Part of the name that is acquired as a title due to academic, legal, employment
 * or nobility status, etc. and that appears at the start of the name.
 */
  prefix?: Array<string> | undefined;
  _prefix?: Element[] | undefined;

        
      
        
          
  /**
 * Part of the name that is acquired as a title due to academic, legal, employment
 * or nobility status, etc. and that appears at the end of the name.
 */
  suffix?: Array<string> | undefined;
  _suffix?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies the entire name as it should be displayed e.g. on an application UI.
 * This may be provided instead of or as well as the specific parts.
 * Can provide both a text representation and parts. Applications updating a name
 * SHALL ensure that when both text and parts are present,  no content is included
 * in the text that isn't found in a part.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Identifies the purpose for this name.
 * Applications can assume that a name is current unless it explicitly says that it
 * is temporary or old.
 */
  use?: string | undefined;
  _use?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Identifier
 * 
 * Base StructureDefinition for Identifier Type: An identifier - identifies some
 * entity uniquely and unambiguously. Typically this is used for business
 * identifiers.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Identifier.html}
 */
    export interface Identifier extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Organization that issued/manages the identifier.
 * The Identifier.assigner may omit the .reference element and only contain a
 * .display element reflecting the name or other textual information about the
 * assigning organization.
 */
  assigner?: Reference | undefined;
  _assigner?: Element | undefined;

        
      
        
          
  /**
 * Time period during which identifier is/was valid for use.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Establishes the namespace for the value - that is, a URL that describes a set
 * values that are unique.
 * Identifier.system is always case sensitive.
 */
  system?: string | undefined;
  _system?: Element | undefined;

        
      
        
          
  /**
 * A coded type for the identifier that can be used to determine which identifier
 * to use for a specific purpose.
 * This element deals only with general categories of identifiers.  It SHOULD not
 * be used for codes that correspond 1..1 with the Identifier.system. Some
 * identifiers may fall into multiple categories due to common usage.   Where the
 * system is known, a type is unnecessary because the type is always part of the
 * system definition. However systems often need to handle identifiers where the
 * system is not known. There is not a 1:1 relationship between type and system,
 * since many different systems have the same type.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The purpose of this identifier.
 * Applications can assume that an identifier is permanent unless it explicitly
 * says that it is temporary.
 */
  use?: string | undefined;
  _use?: Element | undefined;

        
      
        
          
  /**
 * The portion of the identifier typically relevant to the user and which is unique
 * within the context of the system.
 * If the value is a full URI, then the system SHALL be urn:ietf:rfc:3986.  The
 * value's primary purpose is computational mapping.  As a result, it may be
 * normalized for comparison purposes (e.g. removing non-significant whitespace,
 * dashes, etc.)  A value formatted for human display can be conveyed using the
 * [Rendered Value extension](extension-rendered-value.html). Identifier.value is
 * to be treated as case sensitive unless knowledge of the Identifier.system allows
 * the processer to be confident that non-case-sensitive processing is safe.
 */
  value?: string | undefined;
  _value?: Element | undefined;

        
      
    }

  


  
    /**
 * ImagingStudy
 * 
 * Representation of the content produced in a DICOM imaging study. A study
 * comprises a set of series, each of which includes a set of Service-Object Pair
 * Instances (SOP Instances - images or other data) acquired or produced in a
 * common context.  A series is of only one modality (e.g. X-ray, CT, MR,
 * ultrasound), but a study may have multiple series of different modalities.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ImagingStudy.html}
 */
    export interface ImagingStudy extends DomainResource {
      
      readonly resourceType: "ImagingStudy";
      

      
        
          
  /**
 * A list of the diagnostic requests that resulted in this imaging study being
 * performed.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * The Imaging Manager description of the study. Institution-generated description
 * or classification of the Study (component) performed.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The healthcare event (e.g. a patient and healthcare provider interaction) during
 * which this ImagingStudy is made.
 * This will typically be the encounter the event occurred within, but some events
 * may be initiated prior to or after the official completion of an encounter but
 * still be tied to the context of the encounter (e.g. pre-admission test).
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * The network service providing access (e.g., query, view, or retrieval) for the
 * study. See implementation notes for information about using DICOM endpoints. A
 * study-level endpoint applies to each series in the study, unless overridden by a
 * series-level endpoint with the same Endpoint.connectionType.
 * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM
 * instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API;
 * DICOM WADO-URI, which can similarly retrieve native or rendered instances,
 * except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful
 * query for DICOM information without retrieving the actual instances; or IHE
 * Invoke Image Display (IID), which provides standard invocation of an imaging web
 * viewer.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * Identifiers for the ImagingStudy such as DICOM Study Instance UID, and Accession
 * Number.
 * See discussion under [Imaging Study Implementation
 * Notes](imagingstudy.html#notes) for encoding of DICOM Study Instance UID.
 * Accession Number should use ACSN Identifier type.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Who read the study and interpreted the images or other content.
 */
  interpreter?: Array<Reference> | undefined;
  _interpreter?: Element[] | undefined;

        
      
        
          
  /**
 * The principal physical location where the ImagingStudy was performed.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * A list of all the series.modality values that are actual acquisition modalities,
 * i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
 */
  modality?: Array<Coding> | undefined;
  _modality?: Element[] | undefined;

        
      
        
          
  /**
 * Per the recommended DICOM mapping, this element is derived from the Study
 * Description attribute (0008,1030). Observations or findings about the imaging
 * study should be recorded in another resource, e.g. Observation, and not in this
 * element.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Number of SOP Instances in Study. This value given may be larger than the number
 * of instance elements this resource contains due to resource availability,
 * security, or other factors. This element should be present if any instance
 * elements are present.
 */
  numberOfInstances?: unsignedInt | undefined;
  _numberOfInstances?: Element | undefined;

        
      
        
          
  /**
 * Number of Series in the Study. This value given may be larger than the number of
 * series elements this Resource contains due to resource availability, security,
 * or other factors. This element should be present if any series elements are
 * present.
 */
  numberOfSeries?: unsignedInt | undefined;
  _numberOfSeries?: Element | undefined;

        
      
        
          
  /**
 * The code for the performed procedure type.
 */
  procedureCode?: Array<CodeableConcept> | undefined;
  _procedureCode?: Element[] | undefined;

        
      
        
          
  /**
 * The procedure which this ImagingStudy was part of.
 */
  procedureReference?: Reference | undefined;
  _procedureReference?: Element | undefined;

        
      
        
          
  /**
 * Description of clinical condition indicating why the ImagingStudy was requested.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies this Study.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The requesting/referring physician.
 */
  referrer?: Reference | undefined;
  _referrer?: Element | undefined;

        
      
        
          
  /**
 * Each study has one or more series of images or other content.
 */
  series?: Array<BackboneElement> | undefined;
  _series?: Element[] | undefined;

        
      
        
          
  /**
 * The anatomic structures examined. See DICOM Part 16 Annex L
 * (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html)
 * for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of
 * body part imaged; if so, it shall be consistent with any content of
 * ImagingStudy.series.laterality.
 */
  bodySite?: Coding | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * A description of the series.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The network service providing access (e.g., query, view, or retrieval) for this
 * series. See implementation notes for information about using DICOM endpoints. A
 * series-level endpoint, if present, has precedence over a study-level endpoint
 * with the same Endpoint.connectionType.
 * Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM
 * instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API;
 * DICOM WADO-URI, which can similarly retrieve native or rendered instances,
 * except using an HTTP query-based approach; and DICOM QIDO-RS, which allows
 * RESTful query for DICOM information without retrieving the actual instances.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * A single SOP instance within the series, e.g. an image, or presentation state.
 */
  instance?: Array<BackboneElement> | undefined;
  _instance?: Element[] | undefined;

        
      
        
          
  /**
 * The number of instance in the series.
 */
  number?: unsignedInt | undefined;
  _number?: Element | undefined;

        
      
        
          
  /**
 * DICOM instance  type.
 */
  sopClass: Coding;
  _sopClass?: Element | undefined;

        
      
        
          
  /**
 * The description of the instance.
 * Particularly for post-acquisition analytic objects, such as SR, presentation
 * states, value mapping, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * The DICOM SOP Instance UID for this image or other DICOM content.
 * See  [DICOM PS3.3
 * C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.1
 * 2.html#sect_C.12.1).
 */
  uid: id;
  _uid?: Element | undefined;

        
      
        
          
  /**
 * The laterality of the (possibly paired) anatomic structures examined. E.g., the
 * left knee, both lungs, or unpaired abdomen. If present, shall be consistent with
 * any laterality information indicated in ImagingStudy.series.bodySite.
 */
  laterality?: Coding | undefined;
  _laterality?: Element | undefined;

        
      
        
          
  /**
 * The modality of this series sequence.
 */
  modality: Coding;
  _modality?: Element | undefined;

        
      
        
          
  /**
 * The numeric identifier of this series in the study.
 */
  number?: unsignedInt | undefined;
  _number?: Element | undefined;

        
      
        
          
  /**
 * Number of SOP Instances in the Study. The value given may be larger than the
 * number of instance elements this resource contains due to resource availability,
 * security, or other factors. This element should be present if any instance
 * elements are present.
 */
  numberOfInstances?: unsignedInt | undefined;
  _numberOfInstances?: Element | undefined;

        
      
        
          
  /**
 * Indicates who or what performed the series and how they were involved.
 * If the person who performed the series is not known, their Organization may be
 * recorded. A patient, or related person, may be the performer, e.g. for
 * patient-captured images.
 */
  performer?: Array<BackboneElement> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed the series.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Distinguishes the type of involvement of the performer in the series.
 */
  function?: CodeableConcept | undefined;
  _function?: Element | undefined;

        
      
        
          
  /**
 * The specimen imaged, e.g., for whole slide imaging of a biopsy.
 */
  specimen?: Array<Reference> | undefined;
  _specimen?: Element[] | undefined;

        
      
        
          
  /**
 * The date and time the series was started.
 */
  started?: string | undefined;
  _started?: Element | undefined;

        
      
        
          
  /**
 * The DICOM Series Instance UID for the series.
 * See [DICOM PS3.3
 * C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.
 * 3.html).
 */
  uid: id;
  _uid?: Element | undefined;

        
      
        
          
  /**
 * Date and time the study started.
 */
  started?: string | undefined;
  _started?: Element | undefined;

        
      
        
          
  /**
 * The current state of the ImagingStudy.
 * Unknown does not represent "other" - one of the defined statuses must apply.
 * Unknown is used when the authoring system is not sure what the current status
 * is.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The subject, typically a patient, of the imaging study.
 * QA phantoms can be recorded with a Device; multiple subjects (such as mice) can
 * be recorded with a Group.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
    }

  


  
    /**
 * Immunization
 * 
 * Describes the event of a patient being administered a vaccine or a record of an
 * immunization as reported by a patient, a clinician or another party.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Immunization.html}
 */
    export interface Immunization extends DomainResource {
      
      readonly resourceType: "Immunization";
      

      
        
          
  /**
 * The quantity of vaccine product that was administered.
 */
  doseQuantity?: Quantity | undefined;
  _doseQuantity?: Element | undefined;

        
      
        
          
  /**
 * Educational material presented to the patient (or guardian) at the time of
 * vaccine administration.
 */
  education?: Array<BackboneElement> | undefined;
  _education?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier of the material presented to the patient.
 */
  documentType?: string | undefined;
  _documentType?: Element | undefined;

        
      
        
          
  /**
 * Date the educational material was given to the patient.
 */
  presentationDate?: string | undefined;
  _presentationDate?: Element | undefined;

        
      
        
          
  /**
 * Date the educational material was published.
 */
  publicationDate?: string | undefined;
  _publicationDate?: Element | undefined;

        
      
        
          
  /**
 * Reference pointer to the educational material given to the patient if the
 * information was on line.
 */
  reference?: string | undefined;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * The visit or admission or other contact between patient and health care provider
 * the immunization was performed as part of.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Date vaccine batch expires.
 */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;

        
      
        
          
  /**
 * Indicates the source of the vaccine actually administered. This may be different
 * than the patient eligibility (e.g. the patient may be eligible for a publically
 * purchased vaccine but due to inventory issues, vaccine purchased with private
 * funds was actually administered).
 */
  fundingSource?: CodeableConcept | undefined;
  _fundingSource?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this immunization record.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Indication if a dose is considered to be subpotent. By default, a dose should be
 * considered to be potent.
 * Typically, the recognition of the dose being sub-potent is retrospective, after
 * the administration (ex. notification of a manufacturer recall after
 * administration). However, in the case of a partial administration (the patient
 * moves unexpectedly and only some of the dose is actually administered),
 * subpotency may be recognized immediately, but it is still important to record
 * the event.
 */
  isSubpotent?: boolean | undefined;
  _isSubpotent?: Element | undefined;

        
      
        
          
  /**
 * The service delivery location where the vaccine administration occurred.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Lot number of the  vaccine product.
 */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;

        
      
        
          
  /**
 * Name of vaccine manufacturer.
 */
  manufacturer?: Reference | undefined;
  _manufacturer?: Element | undefined;

        
      
        
          
  /**
 * Extra information about the immunization that is not conveyed by the other
 * attributes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * Date vaccine administered or was to be administered.
 * When immunizations are given a specific date and time should always be known.
 * When immunizations are patient reported, a specific date might not be known.
 * Although partial dates are allowed, an adult patient might not be able to recall
 * the year a childhood immunization was given. An exact date is always preferable,
 * but the use of the String data type is acceptable when an exact date is not
 * known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as
 * a series of patient self-administered dose over a span of time. In cases like
 * this, often, only the first dose (typically a provider supervised dose) is
 * recorded with the occurrence indicating the date/time of the first dose.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * Date vaccine administered or was to be administered.
 * When immunizations are given a specific date and time should always be known.
 * When immunizations are patient reported, a specific date might not be known.
 * Although partial dates are allowed, an adult patient might not be able to recall
 * the year a childhood immunization was given. An exact date is always preferable,
 * but the use of the String data type is acceptable when an exact date is not
 * known. A small number of vaccines (e.g. live oral typhoid vaccine) are given as
 * a series of patient self-administered dose over a span of time. In cases like
 * this, often, only the first dose (typically a provider supervised dose) is
 * recorded with the occurrence indicating the date/time of the first dose.
 */
  occurrenceString?: string | undefined;
  _occurrenceString?: Element | undefined;

          
        
      
        
          
  /**
 * The patient who either received or did not receive the immunization.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * Indicates who performed the immunization event.
 */
  performer?: Array<BackboneElement> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * The practitioner or organization who performed the action.
 * When the individual practitioner who performed the action is known, it is best
 * to send.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Describes the type of performance (e.g. ordering provider, administering
 * provider, etc.).
 */
  function?: CodeableConcept | undefined;
  _function?: Element | undefined;

        
      
        
          
  /**
 * An indication that the content of the record is based on information from the
 * person who administered the vaccine. This reflects the context under which the
 * data was originally recorded.
 * Reflects the “reliability” of the content.
 */
  primarySource?: boolean | undefined;
  _primarySource?: Element | undefined;

        
      
        
          
  /**
 * Indicates a patient's eligibility for a funding program.
 */
  programEligibility?: Array<CodeableConcept> | undefined;
  _programEligibility?: Element[] | undefined;

        
      
        
          
  /**
 * The protocol (set of recommendations) being followed by the provider who
 * administered the dose.
 */
  protocolApplied?: Array<BackboneElement> | undefined;
  _protocolApplied?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the authority who published the protocol (e.g. ACIP) that is being
 * followed.
 */
  authority?: Reference | undefined;
  _authority?: Element | undefined;

        
      
        
          
            
  /**
 * Nominal position in a series.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  doseNumberPositiveInt?: number | undefined;
  _doseNumberPositiveInt?: Element | undefined;

          
            
  /**
 * Nominal position in a series.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  doseNumberString?: string | undefined;
  _doseNumberString?: Element | undefined;

          
        
      
        
          
  /**
 * One possible path to achieve presumed immunity against a disease - within the
 * context of an authority.
 */
  series?: string | undefined;
  _series?: Element | undefined;

        
      
        
          
            
  /**
 * The recommended number of doses to achieve immunity.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  seriesDosesPositiveInt?: number | undefined;
  _seriesDosesPositiveInt?: Element | undefined;

          
            
  /**
 * The recommended number of doses to achieve immunity.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  seriesDosesString?: string | undefined;
  _seriesDosesString?: Element | undefined;

          
        
      
        
          
  /**
 * The vaccine preventable disease the dose is being administered against.
 */
  targetDisease?: Array<CodeableConcept> | undefined;
  _targetDisease?: Element[] | undefined;

        
      
        
          
  /**
 * Categorical data indicating that an adverse event is associated in time to an
 * immunization.
 * A reaction may be an indication of an allergy or intolerance and, if this is
 * determined to be the case, it should be recorded as a new AllergyIntolerance
 * resource instance as most systems will not query against past
 * Immunization.reaction elements.
 */
  reaction?: Array<BackboneElement> | undefined;
  _reaction?: Element[] | undefined;

        
      
        
          
  /**
 * Date of reaction to the immunization.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Details of the reaction.
 */
  detail?: Reference | undefined;
  _detail?: Element | undefined;

        
      
        
          
  /**
 * Self-reported indicator.
 */
  reported?: boolean | undefined;
  _reported?: Element | undefined;

        
      
        
          
  /**
 * Reasons why the vaccine was administered.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Condition, Observation or DiagnosticReport that supports why the immunization
 * was administered.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The date the occurrence of the immunization was first captured in the record -
 * potentially significantly after the occurrence of the event.
 */
  recorded?: string | undefined;
  _recorded?: Element | undefined;

        
      
        
          
  /**
 * The source of the data when the report of the immunization event is not based on
 * information from the person who administered the vaccine.
 * Should not be populated if primarySource = True, not required even if
 * primarySource = False.
 */
  reportOrigin?: CodeableConcept | undefined;
  _reportOrigin?: Element | undefined;

        
      
        
          
  /**
 * The path by which the vaccine product is taken into the body.
 */
  route?: CodeableConcept | undefined;
  _route?: Element | undefined;

        
      
        
          
  /**
 * Body site where vaccine was administered.
 */
  site?: CodeableConcept | undefined;
  _site?: Element | undefined;

        
      
        
          
  /**
 * Indicates the current status of the immunization event.
 * Will generally be set to show that the immunization has been completed or not
 * done.  This element is labeled as a modifier because the status contains codes
 * that mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Indicates the reason the immunization event was not performed.
 * This is generally only used for the status of "not-done". The reason for
 * performing the immunization event is captured in reasonCode, not here.
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * Reason why a dose is considered to be subpotent.
 */
  subpotentReason?: Array<CodeableConcept> | undefined;
  _subpotentReason?: Element[] | undefined;

        
      
        
          
  /**
 * Vaccine that was administered or was to be administered.
 */
  vaccineCode: CodeableConcept;
  _vaccineCode?: Element | undefined;

        
      
    }

  


  
    /**
 * ImmunizationEvaluation
 * 
 * Describes a comparison of an immunization event against published
 * recommendations to determine if the administration is "valid" in relation to
 * those  recommendations.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ImmunizationEvaluation.html}
 */
    export interface ImmunizationEvaluation extends DomainResource {
      
      readonly resourceType: "ImmunizationEvaluation";
      

      
        
          
  /**
 * Indicates the authority who published the protocol (e.g. ACIP).
 */
  authority?: Reference | undefined;
  _authority?: Element | undefined;

        
      
        
          
  /**
 * The date the evaluation of the vaccine administration event was performed.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Additional information about the evaluation.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
            
  /**
 * Nominal position in a series.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  doseNumberPositiveInt?: number | undefined;
  _doseNumberPositiveInt?: Element | undefined;

          
            
  /**
 * Nominal position in a series.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  doseNumberString?: string | undefined;
  _doseNumberString?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates if the dose is valid or not valid with respect to the published
 * recommendations.
 */
  doseStatus: CodeableConcept;
  _doseStatus?: Element | undefined;

        
      
        
          
  /**
 * Provides an explanation as to why the vaccine administration event is valid or
 * not relative to the published recommendations.
 */
  doseStatusReason?: Array<CodeableConcept> | undefined;
  _doseStatusReason?: Element[] | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this immunization evaluation record.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The vaccine administration event being evaluated.
 */
  immunizationEvent: Reference;
  _immunizationEvent?: Element | undefined;

        
      
        
          
  /**
 * The individual for whom the evaluation is being done.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * One possible path to achieve presumed immunity against a disease - within the
 * context of an authority.
 */
  series?: string | undefined;
  _series?: Element | undefined;

        
      
        
          
            
  /**
 * The recommended number of doses to achieve immunity.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  seriesDosesPositiveInt?: number | undefined;
  _seriesDosesPositiveInt?: Element | undefined;

          
            
  /**
 * The recommended number of doses to achieve immunity.
 * The use of an integer is preferred if known. A string should only be used in
 * cases where an integer is not available (such as when documenting a recurring
 * booster dose).
 */
  seriesDosesString?: string | undefined;
  _seriesDosesString?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates the current status of the evaluation of the vaccination administration
 * event.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The vaccine preventable disease the dose is being evaluated against.
 */
  targetDisease: CodeableConcept;
  _targetDisease?: Element | undefined;

        
      
    }

  


  
    /**
 * ImmunizationRecommendation
 * 
 * A patient's point-in-time set of recommendations (i.e. forecasting) according to
 * a published schedule with optional supporting justification.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ImmunizationRecommendation.html}
 */
    export interface ImmunizationRecommendation extends DomainResource {
      
      readonly resourceType: "ImmunizationRecommendation";
      

      
        
          
  /**
 * Indicates the authority who published the protocol (e.g. ACIP).
 */
  authority?: Reference | undefined;
  _authority?: Element | undefined;

        
      
        
          
  /**
 * The date the immunization recommendation(s) were created.
 */
  date: string;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this particular recommendation record.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The patient the recommendation(s) are for.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * Vaccine administration recommendations.
 */
  recommendation: Array<BackboneElement>;
  _recommendation?: Element[] | undefined;

        
      
        
          
  /**
 * Vaccine(s) which should not be used to fulfill the recommendation.
 */
  contraindicatedVaccineCode?: Array<CodeableConcept> | undefined;
  _contraindicatedVaccineCode?: Element[] | undefined;

        
      
        
          
  /**
 * Vaccine date recommendations.  For example, earliest date to administer, latest
 * date to administer, etc.
 */
  dateCriterion?: Array<BackboneElement> | undefined;
  _dateCriterion?: Element[] | undefined;

        
      
        
          
  /**
 * Date classification of recommendation.  For example, earliest date to give,
 * latest date to give, etc.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The date whose meaning is specified by dateCriterion.code.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * Contains the description about the protocol under which the vaccine was
 * administered.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
            
  /**
 * Nominal position of the recommended dose in a series (e.g. dose 2 is the next
 * recommended dose).
 * The use of an integer is prefered if known. A string should only be used in
 * cases where an interger is not available (such as when documenting a recurring
 * booster dose).
 */
  doseNumberPositiveInt?: number | undefined;
  _doseNumberPositiveInt?: Element | undefined;

          
            
  /**
 * Nominal position of the recommended dose in a series (e.g. dose 2 is the next
 * recommended dose).
 * The use of an integer is prefered if known. A string should only be used in
 * cases where an interger is not available (such as when documenting a recurring
 * booster dose).
 */
  doseNumberString?: string | undefined;
  _doseNumberString?: Element | undefined;

          
        
      
        
          
  /**
 * The reason for the assigned forecast status.
 */
  forecastReason?: Array<CodeableConcept> | undefined;
  _forecastReason?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the patient status with respect to the path to immunity for the target
 * disease.
 */
  forecastStatus: CodeableConcept;
  _forecastStatus?: Element | undefined;

        
      
        
          
  /**
 * One possible path to achieve presumed immunity against a disease - within the
 * context of an authority.
 */
  series?: string | undefined;
  _series?: Element | undefined;

        
      
        
          
            
  /**
 * The recommended number of doses to achieve immunity.
 * The use of an integer is prefered if known. A string should only be used in
 * cases where an interger is not available (such as when documenting a recurring
 * booster dose).
 */
  seriesDosesPositiveInt?: number | undefined;
  _seriesDosesPositiveInt?: Element | undefined;

          
            
  /**
 * The recommended number of doses to achieve immunity.
 * The use of an integer is prefered if known. A string should only be used in
 * cases where an interger is not available (such as when documenting a recurring
 * booster dose).
 */
  seriesDosesString?: string | undefined;
  _seriesDosesString?: Element | undefined;

          
        
      
        
          
  /**
 * Immunization event history and/or evaluation that supports the status and
 * recommendation.
 */
  supportingImmunization?: Array<Reference> | undefined;
  _supportingImmunization?: Element[] | undefined;

        
      
        
          
  /**
 * Patient Information that supports the status and recommendation.  This includes
 * patient observations, adverse reactions and allergy/intolerance information.
 */
  supportingPatientInformation?: Array<Reference> | undefined;
  _supportingPatientInformation?: Element[] | undefined;

        
      
        
          
  /**
 * The targeted disease for the recommendation.
 */
  targetDisease?: CodeableConcept | undefined;
  _targetDisease?: Element | undefined;

        
      
        
          
  /**
 * Vaccine(s) or vaccine group that pertain to the recommendation.
 */
  vaccineCode?: Array<CodeableConcept> | undefined;
  _vaccineCode?: Element[] | undefined;

        
      
    }

  


  


  
    /**
 * ImplementationGuide
 * 
 * A set of rules of how a particular interoperability or standards problem is
 * solved - typically through the use of FHIR resources. This resource is used to
 * gather all the parts of an implementation guide into a logical whole and to
 * publish a computable definition of all the parts.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ImplementationGuide.html}
 */
    export interface ImplementationGuide extends DomainResource {
      
      readonly resourceType: "ImplementationGuide";
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the implementation guide and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the implementation guide.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the implementation guide was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the implementation guide changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the implementation guide.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * The information needed by an IG publisher tool to publish the whole
 * implementation guide.
 * Principally, this consists of information abuot source resource and file
 * locations, and build parameters and templates.
 */
  definition?: BackboneElement | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * A logical group of resources. Logical groups can be used when building pages.
 * Groupings are arbitrary sub-divisions of content. Typically, they are used to
 * help build Table of Contents automatically.
 */
  grouping?: Array<BackboneElement> | undefined;
  _grouping?: Element[] | undefined;

        
      
        
          
  /**
 * Human readable text describing the package.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The human-readable title to display for the package of resources when rendering
 * the implementation guide.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A page / section in the implementation guide. The root page is the
 * implementation guide home page.
 * Pages automatically become sections if they have sub-pages. By convention, the
 * home page is called index.html.
 */
  page?: BackboneElement | undefined;
  _page?: Element | undefined;

        
      
        
          
  /**
 * A code that indicates how the page is generated.
 */
  generation: string;
  _generation?: Element | undefined;

        
      
        
          
            
  /**
 * The source address for the page.
 * The publishing tool will autogenerate source for list (source = n/a) and inject
 * included implementations for include (source = uri of guide to include).
 */
  nameUrl?: string | undefined;
  _nameUrl?: Element | undefined;

          
            
  /**
 * The source address for the page.
 * The publishing tool will autogenerate source for list (source = n/a) and inject
 * included implementations for include (source = uri of guide to include).
 */
  nameReference?: Reference | undefined;
  _nameReference?: Element | undefined;

          
        
      
        
          
  /**
 * Nested Pages/Sections under this page.
 * The implementation guide breadcrumbs are generated from this structure.
 */
  page?: Array<undefined> | undefined;
  _page?: Element[] | undefined;

        
      
        
          
  /**
 * A short title used to represent this page in navigational structures such as
 * table of contents, bread crumbs, etc.
 */
  title: string;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Defines how IG is built by tools.
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * apply | path-resource | path-pages | path-tx-cache | expansion-parameter |
 * rule-broken-links | generate-xml | generate-json | generate-turtle |
 * html-template.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Value for named type.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * A resource that is part of the implementation guide. Conformance resources
 * (value set, structure definition, capability statements etc.) are obvious
 * candidates for inclusion, but any kind of resource can be included as an example
 * resource.
 */
  resource: Array<BackboneElement>;
  _resource?: Element[] | undefined;

        
      
        
          
  /**
 * A description of the reason that a resource has been included in the
 * implementation guide.
 * This is mostly used with examples to explain why it is present (though they can
 * have extensive comments in the examples).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
            
  /**
 * If true or a reference, indicates the resource is an example instance.  If a
 * reference is present, indicates that the example is an example of the specified
 * profile.
 * Examples: 

* StructureDefinition -> Any 
* ValueSet -> expansion 
*
 * OperationDefinition -> Parameters 
* Questionnaire -> QuestionnaireResponse.
 */
  exampleBoolean?: boolean | undefined;
  _exampleBoolean?: Element | undefined;

          
            
  /**
 * If true or a reference, indicates the resource is an example instance.  If a
 * reference is present, indicates that the example is an example of the specified
 * profile.
 * Examples: 

* StructureDefinition -> Any 
* ValueSet -> expansion 
*
 * OperationDefinition -> Parameters 
* Questionnaire -> QuestionnaireResponse.
 */
  exampleCanonical?: string | undefined;
  _exampleCanonical?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates the FHIR Version(s) this artifact is intended to apply to. If no
 * versions are specified, the resource is assumed to apply to all the versions
 * stated in ImplementationGuide.fhirVersion.
 * The resource SHALL be valid against all the versions it is specified to apply
 * to. If the resource referred to is a StructureDefinition, the fhirVersion stated
 * in the StructureDefinition cannot disagree with the version specified here; the
 * specified versions SHALL include the version specified by the
 * StructureDefinition, and may include additional versions using the
 * [applicable-version](extension-structuredefinition-applicable-version.html)
 * extension.
 */
  fhirVersion?: Array<string> | undefined;
  _fhirVersion?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to the id of the grouping this resource appears in.
 * This must correspond to a package.id element within this implementation guide.
 */
  groupingId?: id | undefined;
  _groupingId?: Element | undefined;

        
      
        
          
  /**
 * A human assigned name for the resource. All resources SHOULD have a name, but
 * the name may be extracted from the resource (e.g. ValueSet.name).
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Where this resource is found.
 * Usually this is a relative URL that locates the resource within the
 * implementation guide. If you authoring an implementation guide, and will publish
 * it using the FHIR publication tooling, use a URI that may point to a resource,
 * or to one of various alternative representations (e.g. spreadsheet). The tooling
 * will convert this when it publishes it.
 */
  reference: Reference;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * A template for building resources.
 */
  template?: Array<BackboneElement> | undefined;
  _template?: Element[] | undefined;

        
      
        
          
  /**
 * Type of template specified.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The scope in which the template applies.
 */
  scope?: string | undefined;
  _scope?: Element | undefined;

        
      
        
          
  /**
 * The source location for the template.
 */
  source: string;
  _source?: Element | undefined;

        
      
        
          
  /**
 * Another implementation guide that this implementation depends on. Typically, an
 * implementation guide uses value sets, profiles etc.defined in other
 * implementation guides.
 */
  dependsOn?: Array<BackboneElement> | undefined;
  _dependsOn?: Element[] | undefined;

        
      
        
          
  /**
 * The NPM package name for the Implementation Guide that this IG depends on.
 */
  packageId?: id | undefined;
  _packageId?: Element | undefined;

        
      
        
          
  /**
 * A canonical reference to the Implementation guide for the dependency.
 * Usually, A canonical reference to the implementation guide is the same as the
 * master location at which the implementation guide is published.
 */
  uri: string;
  _uri?: Element | undefined;

        
      
        
          
  /**
 * The version of the IG that is depended on, when the correct version is required
 * to understand the IG correctly.
 * This follows the syntax of the NPM packaging version field - see [[reference]].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the implementation guide from a
 * consumer's perspective.
 * This description can be used to capture details such as why the implementation
 * guide was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the implementation guide as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the implementation guide is
 * presumed to be the predominant language in the place the implementation guide
 * was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this implementation guide is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of implementation guides that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * The version(s) of the FHIR specification that this ImplementationGuide targets -
 * e.g. describes how to use. The value of this element is the formal version of
 * the specification, without the revision number, e.g.
 * [publication].[major].[minor], which is 4.3.0. for this version.
 * Most implementation guides target a single version - e.g. they describe how to
 * use a particular version, and the profiles and examples etc are valid for that
 * version. But some implementation guides describe how to use multiple different
 * versions of FHIR to solve the same problem, or in concert with each other.
 * Typically, the requirement to support multiple versions arises as implementation
 * matures and different implementation communities are stuck at different versions
 * by regulation or market dynamics.
 */
  fhirVersion: Array<string>;
  _fhirVersion?: Element[] | undefined;

        
      
        
          
  /**
 * A set of profiles that all resources covered by this implementation guide must
 * conform to.
 * See [Default Profiles](implementationguide.html#default) for a discussion of
 * which resources are 'covered' by an implementation guide.
 */
  global?: Array<BackboneElement> | undefined;
  _global?: Element[] | undefined;

        
      
        
          
  /**
 * A reference to the profile that all instances must conform to.
 */
  profile: string;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * The type of resource that all instances must conform to.
 * The type must match that of the profile that is referred to but is made explicit
 * here as a denormalization so that a system processing the implementation guide
 * resource knows which resources the profile applies to even if the profile itself
 * is not available.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the implementation guide is intended to be
 * used.
 * It may be possible for the implementation guide to be used in jurisdictions
 * other than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The license that applies to this Implementation Guide, using an SPDX license
 * code, or 'not-open-source'.
 */
  license?: string | undefined;
  _license?: Element | undefined;

        
      
        
          
  /**
 * Information about an assembled implementation guide, created by the publication
 * tooling.
 */
  manifest?: BackboneElement | undefined;
  _manifest?: Element | undefined;

        
      
        
          
  /**
 * Indicates a relative path to an image that exists within the IG.
 */
  image?: Array<string> | undefined;
  _image?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the relative path of an additional non-page, non-image file that is
 * part of the IG - e.g. zip, jar and similar files that could be the target of a
 * hyperlink in a derived IG.
 */
  other?: Array<string> | undefined;
  _other?: Element[] | undefined;

        
      
        
          
  /**
 * Information about a page within the IG.
 */
  page?: Array<BackboneElement> | undefined;
  _page?: Element[] | undefined;

        
      
        
          
  /**
 * The name of an anchor available on the page.
 * Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to
 * the anchor.
 */
  anchor?: Array<string> | undefined;
  _anchor?: Element[] | undefined;

        
      
        
          
  /**
 * Relative path to the page.
 * Appending 'rendering' + "/" + this should resolve to the page.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Label for the page intended for human display.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * A pointer to official web page, PDF or other rendering of the implementation
 * guide.
 */
  rendering?: string | undefined;
  _rendering?: Element | undefined;

        
      
        
          
  /**
 * A resource that is part of the implementation guide. Conformance resources
 * (value set, structure definition, capability statements etc.) are obvious
 * candidates for inclusion, but any kind of resource can be included as an example
 * resource.
 */
  resource: Array<BackboneElement>;
  _resource?: Element[] | undefined;

        
      
        
          
            
  /**
 * If true or a reference, indicates the resource is an example instance.  If a
 * reference is present, indicates that the example is an example of the specified
 * profile.
 * Typically, conformance resources and knowledge resources are directly part of
 * the implementation guide, with their normal meaning, and patient linked
 * resources are usually examples. However this is not always true.
 */
  exampleBoolean?: boolean | undefined;
  _exampleBoolean?: Element | undefined;

          
            
  /**
 * If true or a reference, indicates the resource is an example instance.  If a
 * reference is present, indicates that the example is an example of the specified
 * profile.
 * Typically, conformance resources and knowledge resources are directly part of
 * the implementation guide, with their normal meaning, and patient linked
 * resources are usually examples. However this is not always true.
 */
  exampleCanonical?: string | undefined;
  _exampleCanonical?: Element | undefined;

          
        
      
        
          
  /**
 * Where this resource is found.
 * Usually this is a relative URL that locates the resource within the
 * implementation guide. If you authoring an implementation guide, and will publish
 * it using the FHIR publication tooling, use a URI that may point to a resource,
 * or to one of various alternative representations (e.g. spreadsheet). The tooling
 * will convert this when it publishes it.
 */
  reference: Reference;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * The relative path for primary page for this resource within the IG.
 * Appending 'rendering' + "/" + this should resolve to the resource page.
 */
  relativePath?: string | undefined;
  _relativePath?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the implementation guide. This name should
 * be usable as an identifier for the module by machine processing applications
 * such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The NPM package name for this Implementation Guide, used in the NPM package
 * distribution, which is the primary mechanism by which FHIR based tooling manages
 * IG dependencies. This value must be globally unique, and should be assigned with
 * care.
 * Many (if not all) IG publishing tools will require that this element be present.
 * For implementation guides published through HL7 or the FHIR foundation, the FHIR
 * product director assigns package IDs.
 */
  packageId: id;
  _packageId?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the implementation
 * guide.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the implementation guide is the organization or individual primarily responsible
 * for the maintenance and upkeep of the implementation guide. This is not
 * necessarily the same individual or organization that developed and initially
 * authored the content. The publisher is the primary point of contact for
 * questions or issues with the implementation guide. This item SHOULD be populated
 * unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * The status of this implementation guide. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of implementation guides that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the implementation guide.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this implementation guide when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this implementation guide
 * is (or will be) published. This URL can be the target of a canonical reference.
 * It SHALL remain the same when the implementation guide is stored on different
 * servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate implementation
 * guide instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the implementation guide
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the implementation guide author and is not expected
 * to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different implementation guide instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the
 * implementation guide with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Ingredient
 * 
 * An ingredient of a manufactured item or pharmaceutical product.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Ingredient.html}
 */
    export interface Ingredient extends DomainResource {
      
      readonly resourceType: "Ingredient";
      

      
        
          
  /**
 * If the ingredient is a known or suspected allergen. Note that this is a property
 * of the substance, so if a reference to a SubstanceDefinition is used to decribe
 * that (rather than just a code), the allergen information should go there, not
 * here.
 */
  allergenicIndicator?: boolean | undefined;
  _allergenicIndicator?: Element | undefined;

        
      
        
          
  /**
 * The product which this ingredient is a constituent part of.
 */
  for?: Array<Reference> | undefined;
  _for?: Element[] | undefined;

        
      
        
          
  /**
 * A classification of the ingredient identifying its precise purpose(s) in the
 * drug product. This extends the Ingredient.role to add more detail. Example:
 * antioxidant, alkalizing agent.
 */
  function?: Array<CodeableConcept> | undefined;
  _function?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier(s) of this Ingredient that are assigned by business processes
 * and/or used to refer to it when a direct URL reference to the resource itself is
 * not appropriate.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The organization(s) that manufacture this ingredient. Can be used to indicate:
 * 1) Organizations we are aware of that manufacture this ingredient
 * 2) Specific Manufacturer(s) currently being used         3) Set of organisations
 * allowed to manufacture this ingredient for this product         Users must be
 * clear on the application of context relevant to their use case.
 */
  manufacturer?: Array<BackboneElement> | undefined;
  _manufacturer?: Element[] | undefined;

        
      
        
          
  /**
 * An organization that manufactures this ingredient.
 */
  manufacturer: Reference;
  _manufacturer?: Element | undefined;

        
      
        
          
  /**
 * The way in which this manufacturer is associated with the ingredient. For
 * example whether it is a possible one (others allowed), or an exclusive
 * authorized one for this ingredient. Note that this is not the manufacturing
 * process role.
 */
  role?: string | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * A classification of the ingredient identifying its purpose within the product,
 * e.g. active, inactive.
 */
  role: CodeableConcept;
  _role?: Element | undefined;

        
      
        
          
  /**
 * The status of this ingredient. Enables tracking the life-cycle of the content.
 * Allows filtering of ingredient that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The substance that comprises this ingredient.
 */
  substance: BackboneElement;
  _substance?: Element | undefined;

        
      
        
          
  /**
 * A code or full resource that represents the ingredient's substance.
 */
  code: CodeableReference;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The quantity of substance in the unit of presentation, or in the volume (or
 * mass) of the single pharmaceutical product or manufactured item. The allowed
 * repetitions do not represent different strengths, but are different
 * representations - mathematically equivalent - of a single strength.
 */
  strength?: Array<BackboneElement> | undefined;
  _strength?: Element[] | undefined;

        
      
        
          
            
  /**
 * The strength per unitary volume (or mass).
 */
  concentrationRatio?: Ratio | undefined;
  _concentrationRatio?: Element | undefined;

          
            
  /**
 * The strength per unitary volume (or mass).
 */
  concentrationRatioRange?: RatioRange | undefined;
  _concentrationRatioRange?: Element | undefined;

          
        
      
        
          
  /**
 * The country or countries for which the strength range applies.
 */
  country?: Array<CodeableConcept> | undefined;
  _country?: Element[] | undefined;

        
      
        
          
  /**
 * For when strength is measured at a particular point or distance. There are
 * products where strength is measured at a particular point. For example, the
 * strength of the ingredient in some inhalers is measured at a particular position
 * relative to the point of aerosolization.
 */
  measurementPoint?: string | undefined;
  _measurementPoint?: Element | undefined;

        
      
        
          
            
  /**
 * The quantity of substance in the unit of presentation, or in the volume (or
 * mass) of the single pharmaceutical product or manufactured item. Unit of
 * presentation refers to the quantity that the item occurs in e.g. a strength per
 * tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally
 * normalized as a unitary unit, which would be 'per mg').
 */
  presentationRatio?: Ratio | undefined;
  _presentationRatio?: Element | undefined;

          
            
  /**
 * The quantity of substance in the unit of presentation, or in the volume (or
 * mass) of the single pharmaceutical product or manufactured item. Unit of
 * presentation refers to the quantity that the item occurs in e.g. a strength per
 * tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally
 * normalized as a unitary unit, which would be 'per mg').
 */
  presentationRatioRange?: RatioRange | undefined;
  _presentationRatioRange?: Element | undefined;

          
        
      
        
          
  /**
 * Strength expressed in terms of a reference substance. For when the ingredient
 * strength is additionally expressed as equivalent to the strength of some other
 * closely related substance (e.g. salt vs. base). Reference strength represents
 * the strength (quantitative composition) of the active moiety of the active
 * substance. There are situations when the active substance and active moiety are
 * different, therefore both a strength and a reference strength are needed.
 */
  referenceStrength?: Array<BackboneElement> | undefined;
  _referenceStrength?: Element[] | undefined;

        
      
        
          
  /**
 * The country or countries for which the strength range applies.
 */
  country?: Array<CodeableConcept> | undefined;
  _country?: Element[] | undefined;

        
      
        
          
  /**
 * For when strength is measured at a particular point or distance.
 */
  measurementPoint?: string | undefined;
  _measurementPoint?: Element | undefined;

        
      
        
          
            
  /**
 * Strength expressed in terms of a reference substance.
 */
  strengthRatio?: Ratio | undefined;
  _strengthRatio?: Element | undefined;

          
            
  /**
 * Strength expressed in terms of a reference substance.
 */
  strengthRatioRange?: RatioRange | undefined;
  _strengthRatioRange?: Element | undefined;

          
        
      
        
          
  /**
 * Relevant reference substance.
 */
  substance?: CodeableReference | undefined;
  _substance?: Element | undefined;

        
      
        
          
  /**
 * A textual represention of either the whole of the concentration strength or a
 * part of it - with the rest being in Strength.concentration as a ratio.
 */
  textConcentration?: string | undefined;
  _textConcentration?: Element | undefined;

        
      
        
          
  /**
 * A textual represention of either the whole of the presentation strength or a
 * part of it - with the rest being in Strength.presentation as a ratio.
 */
  textPresentation?: string | undefined;
  _textPresentation?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * InsurancePlan
 * 
 * Details of a Health Insurance product/plan provided by an organization.
 * 
 * @see {@link http://hl7.org/fhir/R4B/InsurancePlan.html}
 */
    export interface InsurancePlan extends DomainResource {
      
      readonly resourceType: "InsurancePlan";
      

      
        
          
  /**
 * An organization which administer other services such as underwriting, customer
 * service and/or claims processing on behalf of the health insurance product
 * owner.
 */
  administeredBy?: Reference | undefined;
  _administeredBy?: Element | undefined;

        
      
        
          
  /**
 * A list of alternate names that the product is known as, or was known as in the
 * past.
 * There are no dates associated with the alias/historic names, as this is not
 * intended to track when names were used, but to assist in searching so that older
 * names can still result in identifying the product/plan.
 */
  alias?: Array<string> | undefined;
  _alias?: Element[] | undefined;

        
      
        
          
  /**
 * The contact for the health insurance product for a certain purpose.
 * Where multiple contacts for the same purpose are provided there is a standard
 * extension that can be used to determine which one is the preferred contact to
 * use.
 */
  contact?: Array<BackboneElement> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * Visiting or postal addresses for the contact.
 */
  address?: Address | undefined;
  _address?: Element | undefined;

        
      
        
          
  /**
 * A name associated with the contact.
 */
  name?: HumanName | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Indicates a purpose for which the contact can be reached.
 */
  purpose?: CodeableConcept | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * A contact detail (e.g. a telephone number or an email address) by which the
 * party may be contacted.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
        
          
  /**
 * Details about the coverage offered by the insurance product.
 */
  coverage?: Array<BackboneElement> | undefined;
  _coverage?: Element[] | undefined;

        
      
        
          
  /**
 * Specific benefits under this type of coverage.
 */
  benefit: Array<BackboneElement>;
  _benefit?: Element[] | undefined;

        
      
        
          
  /**
 * The specific limits on the benefit.
 */
  limit?: Array<BackboneElement> | undefined;
  _limit?: Element[] | undefined;

        
      
        
          
  /**
 * The specific limit on the benefit.
 * Use `CodeableConcept.text` element if the data is free (uncoded) text.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The maximum amount of a service item a plan will pay for a covered benefit.  For
 * examples. wellness visits, or eyeglasses.
 * May also be called “eligible expense,” “payment allowance,” or “negotiated
 * rate.”.
 */
  value?: Quantity | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The referral requirements to have access/coverage for this benefit.
 */
  requirement?: string | undefined;
  _requirement?: Element | undefined;

        
      
        
          
  /**
 * Type of benefit (primary care; speciality care; inpatient; outpatient).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Reference to the network that providing the type of coverage.
 * Networks are represented as a hierarchy of organization resources.
 */
  network?: Array<Reference> | undefined;
  _network?: Element[] | undefined;

        
      
        
          
  /**
 * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision;
 * Drug; Short Term; Long Term Care; Hospice; Home Health).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The geographic region in which a health insurance product's benefits apply.
 */
  coverageArea?: Array<Reference> | undefined;
  _coverageArea?: Element[] | undefined;

        
      
        
          
  /**
 * The technical endpoints providing access to services operated for the health
 * insurance product.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this health insurance product which remain
 * constant as the resource is updated and propagates from server to server.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Official name of the health insurance product as designated by the owner.
 * If the name of the product/plan changes, consider putting the old name in the
 * alias column so that it can still be located through searches.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Reference to the network included in the health insurance product.
 * Networks are represented as a hierarchy of organization resources.
 */
  network?: Array<Reference> | undefined;
  _network?: Element[] | undefined;

        
      
        
          
  /**
 * The entity that is providing  the health insurance product and underwriting the
 * risk.  This is typically an insurance carriers, other third-party payers, or
 * health plan sponsors comonly referred to as 'payers'.
 */
  ownedBy?: Reference | undefined;
  _ownedBy?: Element | undefined;

        
      
        
          
  /**
 * The period of time that the health insurance product is available.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Details about an insurance plan.
 */
  plan?: Array<BackboneElement> | undefined;
  _plan?: Element[] | undefined;

        
      
        
          
  /**
 * The geographic region in which a health insurance plan's benefits apply.
 */
  coverageArea?: Array<Reference> | undefined;
  _coverageArea?: Element[] | undefined;

        
      
        
          
  /**
 * Overall costs associated with the plan.
 */
  generalCost?: Array<BackboneElement> | undefined;
  _generalCost?: Element[] | undefined;

        
      
        
          
  /**
 * Additional information about the general costs associated with this plan.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Value of the cost.
 */
  cost?: Money | undefined;
  _cost?: Element | undefined;

        
      
        
          
  /**
 * Number of participants enrolled in the plan.
 */
  groupSize?: number | undefined;
  _groupSize?: Element | undefined;

        
      
        
          
  /**
 * Type of cost.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this health insurance plan which remain
 * constant as the resource is updated and propagates from server to server.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to the network that providing the type of coverage.
 * Networks are represented as a hierarchy of organization resources.
 */
  network?: Array<Reference> | undefined;
  _network?: Element[] | undefined;

        
      
        
          
  /**
 * Costs associated with the coverage provided by the product.
 */
  specificCost?: Array<BackboneElement> | undefined;
  _specificCost?: Element[] | undefined;

        
      
        
          
  /**
 * List of the specific benefits under this category of benefit.
 */
  benefit?: Array<BackboneElement> | undefined;
  _benefit?: Element[] | undefined;

        
      
        
          
  /**
 * List of the costs associated with a specific benefit.
 */
  cost?: Array<BackboneElement> | undefined;
  _cost?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the cost applies to in-network or out-of-network providers (in-network;
 * out-of-network; other).
 */
  applicability?: CodeableConcept | undefined;
  _applicability?: Element | undefined;

        
      
        
          
  /**
 * Additional information about the cost, such as information about funding sources
 * (e.g. HSA, HRA, FSA, RRA).
 */
  qualifiers?: Array<CodeableConcept> | undefined;
  _qualifiers?: Element[] | undefined;

        
      
        
          
  /**
 * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The actual cost value. (some of the costs may be represented as percentages
 * rather than currency, e.g. 10% coinsurance).
 */
  value?: Quantity | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * Type of specific benefit (preventative; primary care office visit; speciality
 * office visit; hospitalization; emergency room; urgent care).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * General category of benefit (Medical; Dental; Vision; Drug; Mental Health;
 * Substance Abuse; Hospice, Home Health).
 */
  category: CodeableConcept;
  _category?: Element | undefined;

        
      
        
          
  /**
 * Type of plan. For example, "Platinum" or "High Deductable".
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The current state of the health insurance product.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The kind of health insurance product.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Invoice
 * 
 * Invoice containing collected ChargeItems from an Account with calculated
 * individual and total price for Billing purpose.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Invoice.html}
 */
    export interface Invoice extends DomainResource {
      
      readonly resourceType: "Invoice";
      

      
        
          
  /**
 * Account which is supposed to be balanced with this Invoice.
 * Systems posting the ChargeItems might not always be able to determine, which
 * accounts the Items need to be places into. It is up to the potprocessing
 * Financial System to apply internal rules to decide based on the
 * Encounter/EpisodeOfCare/Patient/Coverage context and the type of ChargeItem,
 * which Account is appropriate.
 */
  account?: Reference | undefined;
  _account?: Element | undefined;

        
      
        
          
  /**
 * In case of Invoice cancellation a reason must be given (entered in error,
 * superseded by corrected invoice etc.).
 * Derived Profiles may choose to add invariants requiring this field to be
 * populated if either priceOverride or factorOverride have been filled.
 */
  cancelledReason?: string | undefined;
  _cancelledReason?: Element | undefined;

        
      
        
          
  /**
 * Date/time(s) of when this Invoice was posted.
 * The list of types may be constrained as appropriate for the type of charge item.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Identifier of this Invoice, often used for reference in correspondence about
 * this invoice or for tracking of payments.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The organizationissuing the Invoice.
 * Practitioners and Devices can be associated with multiple organizations. It has
 * to be made clear, on behalf of which Organization the services have been
 * rendered.
 */
  issuer?: Reference | undefined;
  _issuer?: Element | undefined;

        
      
        
          
  /**
 * Each line item represents one charge for goods and services rendered. Details
 * such as date, code and amount are found in the referenced ChargeItem resource.
 */
  lineItem?: Array<BackboneElement> | undefined;
  _lineItem?: Element[] | undefined;

        
      
        
          
            
  /**
 * The ChargeItem contains information such as the billing code, date, amount etc.
 * If no further details are required for the lineItem, inline billing codes can be
 * added using the CodeableConcept data type instead of the Reference.
 */
  chargeItemReference?: Reference | undefined;
  _chargeItemReference?: Element | undefined;

          
            
  /**
 * The ChargeItem contains information such as the billing code, date, amount etc.
 * If no further details are required for the lineItem, inline billing codes can be
 * added using the CodeableConcept data type instead of the Reference.
 */
  chargeItemCodeableConcept?: CodeableConcept | undefined;
  _chargeItemCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * The price for a ChargeItem may be calculated as a base price with
 * surcharges/deductions that apply in certain conditions. A ChargeItemDefinition
 * resource that defines the prices, factors and conditions that apply to a billing
 * code is currently under development. The priceComponent element can be used to
 * offer transparency to the recipient of the Invoice as to how the prices have
 * been calculated.
 */
  priceComponent?: Array<BackboneElement> | undefined;
  _priceComponent?: Element[] | undefined;

        
      
        
          
  /**
 * The amount calculated for this component.
 * There is no reason to carry the price in the instance of a ChargeItem unless
 * circumstances require a manual override. The list prices or are usually defined
 * in a back catalogue of the billing codes  (see ChargeItem.definition). Derived
 * profiles may require a ChargeItem.overrideReason to be provided if either factor
 * or price are manually overridden.
 */
  amount?: Money | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * A code that identifies the component. Codes may be used to differentiate between
 * kinds of taxes, surcharges, discounts etc.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The factor that has been applied on the base price for calculating this
 * component.
 * There is no reason to carry the price in the instance of a ChargeItem unless
 * circumstances require a manual override. The list prices or are usually defined
 * in a back catalogue of the billing codes  (see ChargeItem.definition). Derived
 * profiles may require a ChargeItem.overrideReason to be provided if either factor
 * or price are manually overridden.
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * This code identifies the type of the component.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Sequence in which the items appear on the invoice.
 */
  sequence?: number | undefined;
  _sequence?: Element | undefined;

        
      
        
          
  /**
 * Comments made about the invoice by the issuer, subject, or other participants.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed or participated in the charged service.
 */
  participant?: Array<BackboneElement> | undefined;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * The device, practitioner, etc. who performed or participated in the service.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Describes the type of involvement (e.g. transcriptionist, creator etc.). If the
 * invoice has been created automatically, the Participant may be a billing engine
 * or another kind of device.
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Payment details such as banking details, period of payment, deductibles, methods
 * of payment.
 * Derived Profiles may chose to add invariants requiring this field to be
 * populated if either priceOverride or factorOverride have been filled.
 */
  paymentTerms?: string | undefined;
  _paymentTerms?: Element | undefined;

        
      
        
          
  /**
 * The individual or Organization responsible for balancing of this invoice.
 */
  recipient?: Reference | undefined;
  _recipient?: Element | undefined;

        
      
        
          
  /**
 * The current state of the Invoice.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The individual or set of individuals receiving the goods and services billed in
 * this invoice.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Invoice total, tax included.
 * There is no reason to carry the price in the instance of a ChargeItem unless
 * circumstances require a manual override. The list prices or are usually defined
 * in a back catalogue of the billing codes  (see ChargeItem.definition). Derived
 * profiles may require a ChargeItem.overrideReason to be provided if either factor
 * or price are manually overridden.
 */
  totalGross?: Money | undefined;
  _totalGross?: Element | undefined;

        
      
        
          
  /**
 * Invoice total , taxes excluded.
 * There is no reason to carry the price in the instance of a ChargeItem unless
 * circumstances require a manual override. The list prices or are usually defined
 * in a back catalogue of the billing codes  (see ChargeItem.definition). Derived
 * profiles may require a ChargeItem.overrideReason to be provided if either factor
 * or price are manually overridden.
 */
  totalNet?: Money | undefined;
  _totalNet?: Element | undefined;

        
      
        
          
  /**
 * The total amount for the Invoice may be calculated as the sum of the line items
 * with surcharges/deductions that apply in certain conditions.  The priceComponent
 * element can be used to offer transparency to the recipient of the Invoice of how
 * the total price was calculated.
 */
  totalPriceComponent?: Array<undefined> | undefined;
  _totalPriceComponent?: Element[] | undefined;

        
      
        
          
  /**
 * Type of Invoice depending on domain, realm an usage (e.g. internal/external,
 * dental, preliminary).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * Library
 * 
 * The Library resource is a general-purpose container for knowledge asset
 * definitions. It can be used to describe and expose existing knowledge assets
 * such as logic libraries and information model descriptions, as well as to
 * describe a collection of knowledge assets.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Library.html}
 */
    export interface Library extends DomainResource {
      
      readonly resourceType: "Library";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The content of the library as an Attachment. The content may be a reference to a
 * url, or may be directly embedded as a base-64 string. Either way, the
 * contentType of the attachment determines how to interpret the content.
 */
  content?: Array<Attachment> | undefined;
  _content?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the library and/or its contents. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * library.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * Describes a set of data that must be provided in order to be able to
 * successfully perform the computations defined by the library.
 */
  dataRequirement?: Array<DataRequirement> | undefined;
  _dataRequirement?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the library was published. The date must
 * change when the business version changes and it must change if the status code
 * changes. In addition, it should change when the substantive content of the
 * library changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the library. Additional specific
 * dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the library from a consumer's
 * perspective.
 * This description can be used to capture details such as why the library was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the library as conveyed in the 'text' field of the resource itself. This item
 * SHOULD be populated unless the information is available from context (e.g. the
 * language of the library is presumed to be the predominant language in the place
 * the library was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the library content was or is planned to be in active
 * use.
 * The effective period for a library  determines when the content is applicable
 * for usage and is independent of publication and review dates. For example, a
 * measure intended to be used for the year 2016 might be published in 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this library is authored for testing purposes
 * (or education/evaluation/marketing) and is not intended to be used for genuine
 * usage.
 * Allows filtering of librarys that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this library when it is represented
 * in other formats, or referenced in a specification, model, design or an
 * instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least
 * one identifier is required for non-experimental active artifacts.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this library outside of FHIR, where
 * it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the library is intended to be used.
 * It may be possible for the library to be used in jurisdictions other than those
 * for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the library. This name should be usable as
 * an identifier for the module by machine processing applications such as code
 * generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The parameter element defines parameters used by the library.
 */
  parameter?: Array<ParameterDefinition> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the library.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the library is the organization or individual primarily responsible for the
 * maintenance and upkeep of the library. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * library. This item SHOULD be populated unless the information is available from
 * context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this library is needed and why it has been designed as it
 * has.
 * This element does not describe the usage of the library. Instead, it provides
 * traceability of ''why'' the resource is either needed or ''why'' it is defined
 * as it is.  This may be used to point to source materials or specifications that
 * drove the structure of this library.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Related artifacts such as additional documentation, justification, or
 * bibliographic references.
 * Each related artifact is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this library. Enables tracking the life-cycle of the content.
 * Allows filtering of libraries that are appropriate for use vs. not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * A code or group definition that describes the intended subject of the contents
 * of the library.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * A code or group definition that describes the intended subject of the contents
 * of the library.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
        
      
        
          
  /**
 * An explanatory or alternate title for the library giving additional information
 * about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the library.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Descriptive topics related to the content of the library. Topics provide a
 * high-level categorization of the library that can be useful for filtering and
 * searching.
 */
  topic?: Array<CodeableConcept> | undefined;
  _topic?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the type of library such as a Logic Library, Model Definition, Asset
 * Collection, or Module Definition.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this library when it is referenced in a
 * specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this library is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the library is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A detailed description of how the library is used from a clinical perspective.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate library instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the library when it is
 * referenced in a specification, model, design or instance. This is an arbitrary
 * value managed by the library author and is not expected to be globally unique.
 * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
 * available. There is also no expectation that versions can be placed in a
 * lexicographical sequence. To provide a version consistent with the Decision
 * Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0).
 * For more information on versioning knowledge assets, refer to the Decision
 * Support Service specification. Note that a version is required for
 * non-experimental active artifacts.
 * There may be different library instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the library with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * Linkage
 * 
 * Identifies two or more records (resource instances) that refer to the same
 * real-world "occurrence".
 * 
 * @see {@link http://hl7.org/fhir/R4B/Linkage.html}
 */
    export interface Linkage extends DomainResource {
      
      readonly resourceType: "Linkage";
      

      
        
          
  /**
 * Indicates whether the asserted set of linkages are considered to be "in effect".
 * If false, any asserted linkages should not be considered
 * current/relevant/applicable.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * Identifies the user or organization responsible for asserting the linkages as
 * well as the user or organization who establishes the context in which the nature
 * of each linkage is evaluated.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * Identifies which record considered as the reference to the same real-world
 * occurrence as well as how the items should be evaluated within the collection of
 * linked items.
 */
  item: Array<BackboneElement>;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * The resource instance being linked as part of the group.
 */
  resource: Reference;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * Distinguishes which item is "source of truth" (if any) and which items are no
 * longer considered to be current representations.
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * List
 * 
 * A list is a curated collection of resources.
 * 
 * @see {@link http://hl7.org/fhir/R4B/List.html}
 */
    export interface List extends DomainResource {
      
      readonly resourceType: "List";
      

      
        
          
  /**
 * This code defines the purpose of the list - why it was created.
 * If there is no code, the purpose of the list is implied where it is used, such
 * as in a document section using Document.section.code.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The date that the list was prepared.
 * The actual important date is the date of currency of the resources that were
 * summarized, but it is usually assumed that these are current when the
 * preparation occurs.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * If the list is empty, why the list is empty.
 * The various reasons for an empty list make a significant interpretation to its
 * interpretation. Note that this code is for use when the entire list has been
 * suppressed, and not for when individual items are omitted - implementers may
 * consider using a text note or a flag on an entry in these cases.
 */
  emptyReason?: CodeableConcept | undefined;
  _emptyReason?: Element | undefined;

        
      
        
          
  /**
 * The encounter that is the context in which this list was created.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Entries in this list.
 * If there are no entries in the list, an emptyReason SHOULD be provided.
 */
  entry?: Array<BackboneElement> | undefined;
  _entry?: Element[] | undefined;

        
      
        
          
  /**
 * When this item was added to the list.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * True if this item is marked as deleted in the list.
 * If the flag means that the entry has actually been deleted from the list, the
 * deleted element SHALL be true. Both flag and deleted can only be used if the
 * List.mode is "changes". A deleted entry should be displayed in narrative as
 * deleted.  This element is labeled as a modifier because it indicates that an
 * item is (to be) no longer in the list.
 */
  deleted?: boolean | undefined;
  _deleted?: Element | undefined;

        
      
        
          
  /**
 * The flag allows the system constructing the list to indicate the role and
 * significance of the item in the list.
 * The flag can only be understood in the context of the List.code. If the flag
 * means that the entry has actually been deleted from the list, the deleted
 * element SHALL be true. Deleted can only be used if the List.mode is "changes".
 */
  flag?: CodeableConcept | undefined;
  _flag?: Element | undefined;

        
      
        
          
  /**
 * A reference to the actual resource from which data was derived.
 */
  item: Reference;
  _item?: Element | undefined;

        
      
        
          
  /**
 * Identifier for the List assigned for business purposes outside the context of
 * FHIR.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * How this list was prepared - whether it is a working list that is suitable for
 * being maintained on an ongoing basis, or if it represents a snapshot of a list
 * of items from another source, or whether it is a prepared list where items may
 * be marked as added, modified or deleted.
 * This element is labeled as a modifier because a change list must not be
 * misunderstood as a complete list.
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * Comments that apply to the overall list.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * What order applies to the items in the list.
 * Applications SHOULD render ordered lists in the order provided, but MAY allow
 * users to re-order based on their own preferences as well. If there is no order
 * specified, the order is unknown, though there may still be some order.
 */
  orderedBy?: CodeableConcept | undefined;
  _orderedBy?: Element | undefined;

        
      
        
          
  /**
 * The entity responsible for deciding what the contents of the list were. Where
 * the list was created by a human, this is the same as the author of the list.
 * The primary source is the entity that made the decisions what items are in the
 * list. This may be software or user.
 */
  source?: Reference | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * Indicates the current state of this list.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The common subject (or patient) of the resources that are in the list if there
 * is one.
 * Some purely arbitrary lists do not have a common subject, so this is optional.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * A label for the list assigned by the author.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * Location
 * 
 * Details and position information for a physical place where services are
 * provided and resources and participants may be stored, found, contained, or
 * accommodated.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Location.html}
 */
    export interface Location extends DomainResource {
      
      readonly resourceType: "Location";
      

      
        
          
  /**
 * Physical location.
 * Additional addresses should be recorded using another instance of the Location
 * resource, or via the Organization.
 */
  address?: Address | undefined;
  _address?: Element | undefined;

        
      
        
          
  /**
 * A list of alternate names that the location is known as, or was known as, in the
 * past.
 * There are no dates associated with the alias/historic names, as this is not
 * intended to track when names were used, but to assist in searching so that older
 * names can still result in identifying the location.
 */
  alias?: Array<string> | undefined;
  _alias?: Element[] | undefined;

        
      
        
          
  /**
 * A description of when the locations opening ours are different to normal, e.g.
 * public holiday availability. Succinctly describing all possible exceptions to
 * normal site availability as detailed in the opening hours Times.
 */
  availabilityExceptions?: string | undefined;
  _availabilityExceptions?: Element | undefined;

        
      
        
          
  /**
 * Description of the Location, which helps in finding or referencing the place.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Technical endpoints providing access to services operated for the location.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * What days/times during a week is this location usually open.
 * This type of information is commonly found published in directories and on
 * websites informing customers when the facility is available.

Specific services
 * within the location may have their own hours which could be shorter (or longer)
 * than the locations hours.
 */
  hoursOfOperation?: Array<BackboneElement> | undefined;
  _hoursOfOperation?: Element[] | undefined;

        
      
        
          
  /**
 * The Location is open all day.
 */
  allDay?: boolean | undefined;
  _allDay?: Element | undefined;

        
      
        
          
  /**
 * Time that the Location closes.
 */
  closingTime?: time | undefined;
  _closingTime?: Element | undefined;

        
      
        
          
  /**
 * Indicates which days of the week are available between the start and end Times.
 */
  daysOfWeek?: Array<string> | undefined;
  _daysOfWeek?: Element[] | undefined;

        
      
        
          
  /**
 * Time that the Location opens.
 */
  openingTime?: time | undefined;
  _openingTime?: Element | undefined;

        
      
        
          
  /**
 * Unique code or number identifying the location to its users.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The organization responsible for the provisioning and upkeep of the location.
 * This can also be used as the part of the organization hierarchy where this
 * location provides services. These services can be defined through the
 * HealthcareService resource.
 */
  managingOrganization?: Reference | undefined;
  _managingOrganization?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether a resource instance represents a specific location or a class
 * of locations.
 * This is labeled as a modifier because whether or not the location is a class of
 * locations changes how it can be used and understood.
 */
  mode?: string | undefined;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * Name of the location as used by humans. Does not need to be unique.
 * If the name of a location changes, consider putting the old name in the alias
 * column so that it can still be located through searches.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The operational status covers operation values most relevant to beds (but can
 * also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair).
 * This typically covers concepts such as contamination, housekeeping, and other
 * activities like maintenance.
 */
  operationalStatus?: Coding | undefined;
  _operationalStatus?: Element | undefined;

        
      
        
          
  /**
 * Another Location of which this Location is physically a part of.
 */
  partOf?: Reference | undefined;
  _partOf?: Element | undefined;

        
      
        
          
  /**
 * Physical form of the location, e.g. building, room, vehicle, road.
 */
  physicalType?: CodeableConcept | undefined;
  _physicalType?: Element | undefined;

        
      
        
          
  /**
 * The absolute geographic location of the Location, expressed using the WGS84
 * datum (This is the same co-ordinate system used in KML).
 */
  position?: BackboneElement | undefined;
  _position?: Element | undefined;

        
      
        
          
  /**
 * Altitude. The value domain and the interpretation are the same as for the text
 * of the altitude element in KML (see notes below).
 */
  altitude?: number | undefined;
  _altitude?: Element | undefined;

        
      
        
          
  /**
 * Latitude. The value domain and the interpretation are the same as for the text
 * of the latitude element in KML (see notes below).
 */
  latitude: number;
  _latitude?: Element | undefined;

        
      
        
          
  /**
 * Longitude. The value domain and the interpretation are the same as for the text
 * of the longitude element in KML (see notes below).
 */
  longitude: number;
  _longitude?: Element | undefined;

        
      
        
          
  /**
 * The status property covers the general availability of the resource, not the
 * current value which may be covered by the operationStatus, or by a
 * schedule/slots if they are configured for the location.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The contact details of communication devices available at the location. This can
 * include phone numbers, fax numbers, mobile numbers, email addresses and web
 * sites.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the type of function performed at the location.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
    }

  


  


  


  


  
    /**
 * ManufacturedItemDefinition
 * 
 * The definition and characteristics of a medicinal manufactured item, such as a
 * tablet or capsule, as contained in a packaged medicinal product.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ManufacturedItemDefinition.html}
 */
    export interface ManufacturedItemDefinition extends DomainResource {
      
      readonly resourceType: "ManufacturedItemDefinition";
      

      
        
          
  /**
 * Unique identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The ingredients of this manufactured item. This is only needed if the
 * ingredients are not specified by incoming references from the Ingredient
 * resource.
 */
  ingredient?: Array<CodeableConcept> | undefined;
  _ingredient?: Element[] | undefined;

        
      
        
          
  /**
 * Dose form as manufactured and before any transformation into the pharmaceutical
 * product.
 */
  manufacturedDoseForm: CodeableConcept;
  _manufacturedDoseForm?: Element | undefined;

        
      
        
          
  /**
 * Manufacturer of the item (Note that this should be named "manufacturer" but it
 * currently causes technical issues).
 */
  manufacturer?: Array<Reference> | undefined;
  _manufacturer?: Element[] | undefined;

        
      
        
          
  /**
 * General characteristics of this item.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * A code expressing the type of characteristic.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * A value for the characteristic.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
        
      
        
          
  /**
 * The status of this item. Enables tracking the life-cycle of the content.
 * Allows filtering of manufactured items that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The “real world” units in which the quantity of the manufactured item is
 * described.
 */
  unitOfPresentation?: CodeableConcept | undefined;
  _unitOfPresentation?: Element | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * MarketingStatus
 * 
 * Base StructureDefinition for MarketingStatus Type: The marketing status
 * describes the date when a medicinal product is actually put on the market or the
 * date as of which it is no longer available.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MarketingStatus.html}
 */
    export interface MarketingStatus extends BackboneElement {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The country in which the marketing authorisation has been granted shall be
 * specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
 */
  country?: CodeableConcept | undefined;
  _country?: Element | undefined;

        
      
        
          
  /**
 * The date when the Medicinal Product is placed on the market by the Marketing
 * Authorisation Holder (or where applicable, the manufacturer/distributor) in a
 * country and/or jurisdiction shall be provided A complete date consisting of day,
 * month and year shall be specified using the ISO 8601 date format NOTE “Placed on
 * the market” refers to the release of the Medicinal Product into the distribution
 * chain.
 */
  dateRange?: Period | undefined;
  _dateRange?: Element | undefined;

        
      
        
          
  /**
 * Where a Medicines Regulatory Agency has granted a marketing authorisation for
 * which specific provisions within a jurisdiction apply, the jurisdiction can be
 * specified using an appropriate controlled terminology The controlled term and
 * the controlled term identifier shall be specified.
 */
  jurisdiction?: CodeableConcept | undefined;
  _jurisdiction?: Element | undefined;

        
      
        
          
  /**
 * The date when the Medicinal Product is placed on the market by the Marketing
 * Authorisation Holder (or where applicable, the manufacturer/distributor) in a
 * country and/or jurisdiction shall be provided A complete date consisting of day,
 * month and year shall be specified using the ISO 8601 date format NOTE “Placed on
 * the market” refers to the release of the Medicinal Product into the distribution
 * chain.
 */
  restoreDate?: string | undefined;
  _restoreDate?: Element | undefined;

        
      
        
          
  /**
 * This attribute provides information on the status of the marketing of the
 * medicinal product See ISO/TS 20443 for more information and examples.
 */
  status: CodeableConcept;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * Measure
 * 
 * The Measure resource provides the definition of a quality measure.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Measure.html}
 */
    export interface Measure extends DomainResource {
      
      readonly resourceType: "Measure";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * Provides a summary of relevant clinical guidelines or other clinical
 * recommendations supporting the measure.
 */
  clinicalRecommendationStatement?: string | undefined;
  _clinicalRecommendationStatement?: Element | undefined;

        
      
        
          
  /**
 * If this is a composite measure, the scoring method used to combine the component
 * measures to determine the composite score.
 */
  compositeScoring?: CodeableConcept | undefined;
  _compositeScoring?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the measure and/or its contents. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * measure.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the measure was published. The date must
 * change when the business version changes and it must change if the status code
 * changes. In addition, it should change when the substantive content of the
 * measure changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the measure. Additional specific
 * dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Provides a description of an individual term used within the measure.
 */
  definition?: Array<string> | undefined;
  _definition?: Element[] | undefined;

        
      
        
          
  /**
 * A free text natural language description of the measure from a consumer's
 * perspective.
 * This description can be used to capture details such as why the measure was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the measure as conveyed in the 'text' field of the resource itself. This item
 * SHOULD be populated unless the information is available from context (e.g. the
 * language of the measure is presumed to be the predominant language in the place
 * the measure was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Notices and disclaimers regarding the use of the measure or related to
 * intellectual property (such as code systems) referenced by the measure.
 */
  disclaimer?: string | undefined;
  _disclaimer?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the measure content was or is planned to be in active
 * use.
 * The effective period for a measure  determines when the content is applicable
 * for usage and is independent of publication and review dates. For example, a
 * measure intended to be used for the year 2016 might be published in 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this measure is authored for testing purposes
 * (or education/evaluation/marketing) and is not intended to be used for genuine
 * usage.
 * Allows filtering of measures that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A group of population criteria for the measure.
 */
  group?: Array<BackboneElement> | undefined;
  _group?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a meaning for the group. This can be as simple as a unique identifier,
 * or it can establish meaning in a broader context by drawing from a terminology,
 * allowing groups to be correlated across measures.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The human readable description of this population group.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A population criteria for the measure.
 */
  population?: Array<BackboneElement> | undefined;
  _population?: Element[] | undefined;

        
      
        
          
  /**
 * The type of population criteria.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * An expression that specifies the criteria for the population, typically the name
 * of an expression in a library.
 * In the case of a continuous-variable or ratio measure, this may be the name of a
 * function that calculates the value of the individual observation for each
 * patient or event in the population. For these types of measures, individual
 * observations are reported as observation resources included in the
 * evaluatedResources bundle for each patient. See the MeasureReport resource or
 * the Quality Reporting topic for more information.
 */
  criteria: Expression;
  _criteria?: Element | undefined;

        
      
        
          
  /**
 * The human readable description of this population criteria.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The stratifier criteria for the measure report, specified as either the name of
 * a valid CQL expression defined within a referenced library or a valid FHIR
 * Resource Path.
 */
  stratifier?: Array<BackboneElement> | undefined;
  _stratifier?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a meaning for the stratifier. This can be as simple as a unique
 * identifier, or it can establish meaning in a broader context by drawing from a
 * terminology, allowing stratifiers to be correlated across measures.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A component of the stratifier criteria for the measure report, specified as
 * either the name of a valid CQL expression defined within a referenced library or
 * a valid FHIR Resource Path.
 * Stratifiers are defined either as a single criteria, or as a set of component
 * criteria.
 */
  component?: Array<BackboneElement> | undefined;
  _component?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a meaning for the stratifier component. This can be as simple as a
 * unique identifier, or it can establish meaning in a broader context by drawing
 * from a terminology, allowing stratifiers to be correlated across measures.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * An expression that specifies the criteria for this component of the stratifier.
 * This is typically the name of an expression defined within a referenced library,
 * but it may also be a path to a stratifier element.
 */
  criteria: Expression;
  _criteria?: Element | undefined;

        
      
        
          
  /**
 * The human readable description of this stratifier criteria component.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An expression that specifies the criteria for the stratifier. This is typically
 * the name of an expression defined within a referenced library, but it may also
 * be a path to a stratifier element.
 */
  criteria?: Expression | undefined;
  _criteria?: Element | undefined;

        
      
        
          
  /**
 * The human readable description of this stratifier criteria.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Additional guidance for the measure including how it can be used in a clinical
 * context, and the intent of the measure.
 */
  guidance?: string | undefined;
  _guidance?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this measure when it is represented
 * in other formats, or referenced in a specification, model, design or an
 * instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this measure outside of FHIR, where
 * it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Information on whether an increase or decrease in score is the preferred result
 * (e.g., a higher score indicates better quality OR a lower score indicates better
 * quality OR quality is within a range).
 */
  improvementNotation?: CodeableConcept | undefined;
  _improvementNotation?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the measure is intended to be used.
 * It may be possible for the measure to be used in jurisdictions other than those
 * for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A reference to a Library resource containing the formal logic used by the
 * measure.
 */
  library?: Array<string> | undefined;
  _library?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the measure. This name should be usable as
 * an identifier for the module by machine processing applications such as code
 * generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the measure.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the measure is the organization or individual primarily responsible for the
 * maintenance and upkeep of the measure. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * measure. This item SHOULD be populated unless the information is available from
 * context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this measure is needed and why it has been designed as it
 * has.
 * This element does not describe the usage of the measure. Instead, it provides
 * traceability of ''why'' the resource is either needed or ''why'' it is defined
 * as it is.  This may be used to point to source materials or specifications that
 * drove the structure of this measure.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Describes how to combine the information calculated, based on logic in each of
 * several populations, into one summarized result.
 * The measure rate for an organization or clinician is based upon the entities’
 * aggregate data and summarizes the performance of the entity over a given time
 * period (e.g., monthly, quarterly, yearly). The aggregated data are derived from
 * the results of a specific measure algorithm and, if appropriate, the application
 * of specific risk adjustment models.  Can also be used to describe how to risk
 * adjust the data based on supplemental data elements described in the eMeasure
 * (e.g., pneumonia hospital measures antibiotic selection in the ICU versus
 * non-ICU and then the roll-up of the two). This could be applied to aggregated
 * cohort measure definitions (e.g., CDC's aggregate reporting for TB at the state
 * level).
 */
  rateAggregation?: string | undefined;
  _rateAggregation?: Element | undefined;

        
      
        
          
  /**
 * Provides a succinct statement of the need for the measure. Usually includes
 * statements pertaining to importance criterion: impact, gap in care, and
 * evidence.
 */
  rationale?: string | undefined;
  _rationale?: Element | undefined;

        
      
        
          
  /**
 * Related artifacts such as additional documentation, justification, or
 * bibliographic references.
 * Each related artifact is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * A description of the risk adjustment factors that may impact the resulting score
 * for the measure and how they may be accounted for when computing and reporting
 * measure results.
 * Describes the method of adjusting for clinical severity and conditions present
 * at the start of care that can influence patient outcomes for making valid
 * comparisons of outcome measures across providers. Indicates whether a measure is
 * subject to the statistical process for reducing, removing, or clarifying the
 * influences of confounding factors to allow for more useful comparisons.
 */
  riskAdjustment?: string | undefined;
  _riskAdjustment?: Element | undefined;

        
      
        
          
  /**
 * Indicates how the calculation is performed for the measure, including
 * proportion, ratio, continuous-variable, and cohort. The value set is extensible,
 * allowing additional measure scoring types to be represented.
 */
  scoring?: CodeableConcept | undefined;
  _scoring?: Element | undefined;

        
      
        
          
  /**
 * The status of this measure. Enables tracking the life-cycle of the content.
 * Allows filtering of measures that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * The intended subjects for the measure. If this element is not provided, a
 * Patient subject is assumed, but the subject of the measure can be anything.
 * The subject of the measure is critical in interpreting the criteria definitions,
 * as the logic in the measures is evaluated with respect to a particular subject.
 * This corresponds roughly to the notion of a Compartment in that it limits what
 * content is available based on its relationship to the subject. In CQL, this
 * corresponds to the context declaration.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * The intended subjects for the measure. If this element is not provided, a
 * Patient subject is assumed, but the subject of the measure can be anything.
 * The subject of the measure is critical in interpreting the criteria definitions,
 * as the logic in the measures is evaluated with respect to a particular subject.
 * This corresponds roughly to the notion of a Compartment in that it limits what
 * content is available based on its relationship to the subject. In CQL, this
 * corresponds to the context declaration.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
        
      
        
          
  /**
 * An explanatory or alternate title for the measure giving additional information
 * about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * The supplemental data criteria for the measure report, specified as either the
 * name of a valid CQL expression within a referenced library, or a valid FHIR
 * Resource Path.
 * Note that supplemental data are reported as observations for each patient and
 * included in the evaluatedResources bundle. See the MeasureReport resource or the
 * Quality Reporting topic for more information.
 */
  supplementalData?: Array<BackboneElement> | undefined;
  _supplementalData?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a meaning for the supplemental data. This can be as simple as a unique
 * identifier, or it can establish meaning in a broader context by drawing from a
 * terminology, allowing supplemental data to be correlated across measures.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The criteria for the supplemental data. This is typically the name of a valid
 * expression defined within a referenced library, but it may also be a path to a
 * specific data element. The criteria defines the data to be returned for this
 * element.
 */
  criteria: Expression;
  _criteria?: Element | undefined;

        
      
        
          
  /**
 * The human readable description of this supplemental data.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An indicator of the intended usage for the supplemental data element.
 * Supplemental data indicates the data is additional information requested to
 * augment the measure information. Risk adjustment factor indicates the data is
 * additional information used to calculate risk adjustment factors when applying a
 * risk model to the measure calculation.
 */
  usage?: Array<CodeableConcept> | undefined;
  _usage?: Element[] | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the measure.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Descriptive topics related to the content of the measure. Topics provide a
 * high-level categorization grouping types of measures that can be useful for
 * filtering and searching.
 */
  topic?: Array<CodeableConcept> | undefined;
  _topic?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates whether the measure is used to examine a process, an outcome over
 * time, a patient-reported outcome, or a structure measure such as utilization.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this measure when it is referenced in a
 * specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this measure is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the measure is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A detailed description, from a clinical perspective, of how the measure is used.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate measure instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the measure when it is
 * referenced in a specification, model, design or instance. This is an arbitrary
 * value managed by the measure author and is not expected to be globally unique.
 * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
 * available. There is also no expectation that versions can be placed in a
 * lexicographical sequence. To provide a version consistent with the Decision
 * Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0).
 * For more information on versioning knowledge assets, refer to the Decision
 * Support Service specification. Note that a version is required for
 * non-experimental active artifacts.
 * There may be different measure instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the measure with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * MeasureReport
 * 
 * The MeasureReport resource contains the results of the calculation of a measure;
 * and optionally a reference to the resources involved in that calculation.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MeasureReport.html}
 */
    export interface MeasureReport extends DomainResource {
      
      readonly resourceType: "MeasureReport";
      

      
        
          
  /**
 * The date this measure report was generated.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A reference to a Bundle containing the Resources that were used in the
 * calculation of this measure.
 */
  evaluatedResource?: Array<Reference> | undefined;
  _evaluatedResource?: Element[] | undefined;

        
      
        
          
  /**
 * The results of the calculation, one for each population group in the measure.
 */
  group?: Array<BackboneElement> | undefined;
  _group?: Element[] | undefined;

        
      
        
          
  /**
 * The meaning of the population group as defined in the measure definition.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The measure score for this population group, calculated as appropriate for the
 * measure type and scoring method, and based on the contents of the populations
 * defined in the group.
 */
  measureScore?: Quantity | undefined;
  _measureScore?: Element | undefined;

        
      
        
          
  /**
 * The populations that make up the population group, one for each type of
 * population appropriate for the measure.
 */
  population?: Array<BackboneElement> | undefined;
  _population?: Element[] | undefined;

        
      
        
          
  /**
 * The type of the population.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The number of members of the population.
 */
  count?: number | undefined;
  _count?: Element | undefined;

        
      
        
          
  /**
 * This element refers to a List of subject level MeasureReport resources, one for
 * each subject in this population.
 */
  subjectResults?: Reference | undefined;
  _subjectResults?: Element | undefined;

        
      
        
          
  /**
 * When a measure includes multiple stratifiers, there will be a stratifier group
 * for each stratifier defined by the measure.
 */
  stratifier?: Array<BackboneElement> | undefined;
  _stratifier?: Element[] | undefined;

        
      
        
          
  /**
 * The meaning of this stratifier, as defined in the measure definition.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * This element contains the results for a single stratum within the stratifier.
 * For example, when stratifying on administrative gender, there will be four
 * strata, one for each possible gender value.
 */
  stratum?: Array<BackboneElement> | undefined;
  _stratum?: Element[] | undefined;

        
      
        
          
  /**
 * A stratifier component value.
 */
  component?: Array<BackboneElement> | undefined;
  _component?: Element[] | undefined;

        
      
        
          
  /**
 * The code for the stratum component value.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The stratum component value.
 */
  value: CodeableConcept;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The measure score for this stratum, calculated as appropriate for the measure
 * type and scoring method, and based on only the members of this stratum.
 */
  measureScore?: Quantity | undefined;
  _measureScore?: Element | undefined;

        
      
        
          
  /**
 * The populations that make up the stratum, one for each type of population
 * appropriate to the measure.
 */
  population?: Array<BackboneElement> | undefined;
  _population?: Element[] | undefined;

        
      
        
          
  /**
 * The type of the population.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The number of members of the population in this stratum.
 */
  count?: number | undefined;
  _count?: Element | undefined;

        
      
        
          
  /**
 * This element refers to a List of subject level MeasureReport resources, one for
 * each subject in this population in this stratum.
 */
  subjectResults?: Reference | undefined;
  _subjectResults?: Element | undefined;

        
      
        
          
  /**
 * The value for this stratum, expressed as a CodeableConcept. When defining
 * stratifiers on complex values, the value must be rendered such that the value
 * for each stratum within the stratifier is unique.
 */
  value?: CodeableConcept | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this MeasureReport when it is
 * represented in other formats or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II data type -
 * e.g. to identify this {{title}} outside of FHIR, where the logical URL is not
 * possible to use.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Whether improvement in the measure is noted by an increase or decrease in the
 * measure score.
 * This element is typically defined by the measure, but reproduced here to ensure
 * the measure score can be interpreted. The element is labeled as a modifier
 * because it changes the interpretation of the reported measure score.
 */
  improvementNotation?: CodeableConcept | undefined;
  _improvementNotation?: Element | undefined;

        
      
        
          
  /**
 * A reference to the Measure that was calculated to produce this report.
 */
  measure: string;
  _measure?: Element | undefined;

        
      
        
          
  /**
 * The reporting period for which the report was calculated.
 */
  period: Period;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The individual, location, or organization that is reporting the data.
 */
  reporter?: Reference | undefined;
  _reporter?: Element | undefined;

        
      
        
          
  /**
 * The MeasureReport status. No data will be available until the MeasureReport
 * status is complete.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Optional subject identifying the individual or individuals the report is for.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * The type of measure report. This may be an individual report, which provides the
 * score for the measure for an individual member of the population; a
 * subject-listing, which returns the list of members that meet the various
 * criteria in the measure; a summary report, which returns a population count for
 * each of the criteria in the measure; or a data-collection, which enables the
 * MeasureReport to be used to exchange the data-of-interest for a quality measure.
 * Data-collection reports are used only to communicate data-of-interest for a
 * measure. They do not necessarily include all the data for a particular subject
 * or population, but they may.
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Media
 * 
 * A photo, video, or audio recording acquired or used in healthcare. The actual
 * content may be inline or provided by direct reference.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Media.html}
 */
    export interface Media extends DomainResource {
      
      readonly resourceType: "Media";
      

      
        
          
  /**
 * A procedure that is fulfilled in whole or in part by the creation of this media.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the site on the subject's body where the observation was made (i.e.
 * the target site).
 * Only used if not implicit in code found in Observation.code.  In many systems,
 * this may be represented as a related observation instead of an inline component.
 * If the use case requires BodySite to be handled as a separate resource (e.g.
 * to identify and track separately) then use the standard extension[
 * bodySite](extension-bodysite.html).
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * The actual content of the media - inline or by direct reference to the media
 * source file.
 * Recommended content types: image/jpeg, image/png, image/tiff, video/mpeg,
 * audio/mp4, application/dicom. Application/dicom can contain the transfer syntax
 * as a parameter.  For media that covers a period of time (video/sound), the
 * content.creationTime is the end time. Creation time is used for tracking,
 * organizing versions and searching.
 */
  content: Attachment;
  _content?: Element | undefined;

        
      
        
          
            
  /**
 * The date and time(s) at which the media was collected.
 */
  createdDateTime?: string | undefined;
  _createdDateTime?: Element | undefined;

          
            
  /**
 * The date and time(s) at which the media was collected.
 */
  createdPeriod?: Period | undefined;
  _createdPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * The device used to collect the media.
 * An extension should be used if further typing of the device is needed.
 * Secondary devices used to support collecting a media can be represented using
 * either extension or through the Observation.related element.
 */
  device?: Reference | undefined;
  _device?: Element | undefined;

        
      
        
          
  /**
 * The name of the device / manufacturer of the device  that was used to make the
 * recording.
 */
  deviceName?: string | undefined;
  _deviceName?: Element | undefined;

        
      
        
          
  /**
 * The duration of the recording in seconds - for audio and video.
 * The duration might differ from occurrencePeriod if recording was paused.
 */
  duration?: number | undefined;
  _duration?: Element | undefined;

        
      
        
          
  /**
 * The encounter that establishes the context for this media.
 * This will typically be the encounter the media occurred within.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * The number of frames in a photo. This is used with a multi-page fax, or an
 * imaging acquisition context that takes multiple slices in a single image, or an
 * animated gif. If there is more than one frame, this SHALL have a value in order
 * to alert interface software that a multi-frame capable rendering widget is
 * required.
 * if the number of frames is not supplied, the value may be unknown. Applications
 * should not assume that there is only one frame unless it is explicitly stated.
 */
  frames?: number | undefined;
  _frames?: Element | undefined;

        
      
        
          
  /**
 * Height of the image in pixels (photo/video).
 */
  height?: number | undefined;
  _height?: Element | undefined;

        
      
        
          
  /**
 * Identifiers associated with the image - these may include identifiers for the
 * image itself, identifiers for the context of its collection (e.g. series ids)
 * and context ids such as accession numbers or other workflow identifiers.
 * The identifier label and use can be used to determine what kind of identifier it
 * is.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The date and time this version of the media was made available to providers,
 * typically after having been reviewed.
 * It may be the same as the [`lastUpdated`
 * ](resource-definitions.html#Meta.lastUpdated) time of the resource itself.  For
 * Observations that do require review and verification for certain updates, it
 * might not be the same as the `lastUpdated` time of the resource itself due to a
 * non-clinically significant update that does not require the new version to be
 * reviewed and verified again.
 */
  issued?: string | undefined;
  _issued?: Element | undefined;

        
      
        
          
  /**
 * Details of the type of the media - usually, how it was acquired (what type of
 * device). If images sourced from a DICOM system, are wrapped in a Media resource,
 * then this is the modality.
 */
  modality?: CodeableConcept | undefined;
  _modality?: Element | undefined;

        
      
        
          
  /**
 * Comments made about the media by the performer, subject or other participants.
 * Not to be used for observations, conclusions, etc. Instead use an
 * [Observation](observation.html) based on the Media/ImagingStudy resource.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The person who administered the collection of the image.
 */
  operator?: Reference | undefined;
  _operator?: Element | undefined;

        
      
        
          
  /**
 * A larger event of which this particular event is a component or step.
 * Not to be used to link an event to an Encounter - use Media.encounter for
 * that.[The allowed reference resources may be adjusted as appropriate for the
 * event resource].
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Describes why the event occurred in coded or textual form.
 * Textual reasons can be captured using reasonCode.text.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * The current state of the {{title}}.
 * A nominal state-transition diagram can be found in the [[event.html#statemachine
 * | Event pattern]] documentationUnknown does not represent "other" - one of the
 * defined statuses must apply.  Unknown is used when the authoring system is not
 * sure what the current status is.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Who/What this Media is a record of.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * A code that classifies whether the media is an image, video or audio recording
 * or some other media category.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The name of the imaging view e.g. Lateral or Antero-posterior (AP).
 */
  view?: CodeableConcept | undefined;
  _view?: Element | undefined;

        
      
        
          
  /**
 * Width of the image in pixels (photo/video).
 */
  width?: number | undefined;
  _width?: Element | undefined;

        
      
    }

  


  
    /**
 * Medication
 * 
 * This resource is primarily used for the identification and definition of a
 * medication for the purposes of prescribing, dispensing, and administering a
 * medication as well as for making statements about medication use.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Medication.html}
 */
    export interface Medication extends DomainResource {
      
      readonly resourceType: "Medication";
      

      
        
          
  /**
 * Specific amount of the drug in the packaged product.  For example, when
 * specifying a product that has the same strength (For example, Insulin glargine
 * 100 unit per mL solution for injection), this attribute provides additional
 * clarification of the package amount (For example, 3 mL, 10mL, etc.).
 */
  amount?: Ratio | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * Information that only applies to packages (not products).
 */
  batch?: BackboneElement | undefined;
  _batch?: Element | undefined;

        
      
        
          
  /**
 * When this specific batch of product will expire.
 */
  expirationDate?: string | undefined;
  _expirationDate?: Element | undefined;

        
      
        
          
  /**
 * The assigned lot number of a batch of the specified product.
 */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;

        
      
        
          
  /**
 * A code (or set of codes) that specify this medication, or a textual description
 * if no code is available. Usage note: This could be a standard medication code
 * such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or
 * local formulary code, optionally with translations to other code systems.
 * Depending on the context of use, the code that was actually selected by the user
 * (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As
 * described in the coding datatype: "A coding may be marked as a "userSelected" if
 * a user selected the particular coded value in a user interface (e.g. the user
 * selects an item in a pick-list). If a user selected coding exists, it is the
 * preferred choice for performing translations etc. Other codes can only be
 * literal translations to alternative code systems, or codes at a lower level of
 * granularity (e.g. a generic code for a vendor-specific primary one).
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Describes the form of the item.  Powder; tablets; capsule.
 * When Medication is referenced from MedicationRequest, this is the ordered form.
 * When Medication is referenced within MedicationDispense, this is the dispensed
 * form.  When Medication is referenced within MedicationAdministration, this is
 * administered form.
 */
  form?: CodeableConcept | undefined;
  _form?: Element | undefined;

        
      
        
          
  /**
 * Business identifier for this medication.
 * The serial number could be included as an identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies a particular constituent of interest in the product.
 * The ingredients need not be a complete list.  If an ingredient is not specified,
 * this does not indicate whether an ingredient is present or absent.  If an
 * ingredient is specified it does not mean that all ingredients are specified.  It
 * is possible to specify both inactive and active ingredients.
 */
  ingredient?: Array<BackboneElement> | undefined;
  _ingredient?: Element[] | undefined;

        
      
        
          
  /**
 * Indication of whether this ingredient affects the therapeutic action of the
 * drug.
 */
  isActive?: boolean | undefined;
  _isActive?: Element | undefined;

        
      
        
          
            
  /**
 * The actual ingredient - either a substance (simple ingredient) or another
 * medication of a medication.
 */
  itemCodeableConcept?: CodeableConcept | undefined;
  _itemCodeableConcept?: Element | undefined;

          
            
  /**
 * The actual ingredient - either a substance (simple ingredient) or another
 * medication of a medication.
 */
  itemReference?: Reference | undefined;
  _itemReference?: Element | undefined;

          
        
      
        
          
  /**
 * Specifies how many (or how much) of the items there are in this Medication.  For
 * example, 250 mg per tablet.  This is expressed as a ratio where the numerator is
 * 250mg and the denominator is 1 tablet.
 */
  strength?: Ratio | undefined;
  _strength?: Element | undefined;

        
      
        
          
  /**
 * Describes the details of the manufacturer of the medication product.  This is
 * not intended to represent the distributor of a medication product.
 */
  manufacturer?: Reference | undefined;
  _manufacturer?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate if the medication is in active use.
 * This status is intended to identify if the medication in a local system is in
 * active use within a drug database or inventory.  For example, a pharmacy system
 * may create a new drug file record for a compounded product "ABC Hospital Special
 * Cream" with an active status.  At some point in the future, it may be determined
 * that the drug record was created with an error and the status is changed to
 * "entered in error".   This status is not intended to specify if a medication is
 * part of a particular formulary.  It is possible that the drug record may be
 * referenced by multiple formularies or catalogues and each of those entries would
 * have a separate status.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
    }

  


  
    /**
 * MedicationAdministration
 * 
 * Describes the event of a patient consuming or otherwise being administered a
 * medication.  This may be as simple as swallowing a tablet or it may be a long
 * running infusion.  Related resources tie this event to the authorizing
 * prescription, and the specific encounter between patient and health care
 * practitioner.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MedicationAdministration.html}
 */
    export interface MedicationAdministration extends DomainResource {
      
      readonly resourceType: "MedicationAdministration";
      

      
        
          
  /**
 * Indicates where the medication is expected to be consumed or administered.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * The visit, admission, or other contact between patient and health care provider
 * during which the medication administration was performed.
 */
  context?: Reference | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * The device used in administering the medication to the patient.  For example, a
 * particular infusion pump.
 */
  device?: Array<Reference> | undefined;
  _device?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the medication dosage information details e.g. dose, rate, site,
 * route, etc.
 */
  dosage?: BackboneElement | undefined;
  _dosage?: Element | undefined;

        
      
        
          
  /**
 * The amount of the medication given at one administration event.   Use this value
 * when the administration is essentially an instantaneous event such as a
 * swallowing a tablet or giving an injection.
 * If the administration is not instantaneous (rate is present), this can be
 * specified to convey the total amount administered over period of time of a
 * single administration.
 */
  dose?: Quantity | undefined;
  _dose?: Element | undefined;

        
      
        
          
  /**
 * A coded value indicating the method by which the medication is intended to be or
 * was introduced into or on the body.  This attribute will most often NOT be
 * populated.  It is most commonly used for injections.  For example, Slow Push,
 * Deep IV.
 * One of the reasons this attribute is not used often, is that the method is often
 * pre-coordinated with the route and/or form of administration.  This means the
 * codes used in route or form may pre-coordinate the method in the route code or
 * the form code.  The implementation decision about what coding system to use for
 * route or form code will determine how frequently the method code will be
 * populated e.g. if route or form code pre-coordinate method code, then this
 * attribute will not be populated often; if there is no pre-coordination then
 * method code may  be used frequently.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
            
  /**
 * Identifies the speed with which the medication was or will be introduced into
 * the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100
 * ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2
 * hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
 * If the rate changes over time, and you want to capture this in
 * MedicationAdministration, then each change should be captured as a distinct
 * MedicationAdministration, with a specific MedicationAdministration.dosage.rate,
 * and the date time when the rate change occurred. Typically, the
 * MedicationAdministration.dosage.rate element is not used to convey an average
 * rate.
 */
  rateRatio?: Ratio | undefined;
  _rateRatio?: Element | undefined;

          
            
  /**
 * Identifies the speed with which the medication was or will be introduced into
 * the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100
 * ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2
 * hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
 * If the rate changes over time, and you want to capture this in
 * MedicationAdministration, then each change should be captured as a distinct
 * MedicationAdministration, with a specific MedicationAdministration.dosage.rate,
 * and the date time when the rate change occurred. Typically, the
 * MedicationAdministration.dosage.rate element is not used to convey an average
 * rate.
 */
  rateQuantity?: Quantity | undefined;
  _rateQuantity?: Element | undefined;

          
        
      
        
          
  /**
 * A code specifying the route or physiological path of administration of a
 * therapeutic agent into or onto the patient.  For example, topical, intravenous,
 * etc.
 */
  route?: CodeableConcept | undefined;
  _route?: Element | undefined;

        
      
        
          
  /**
 * A coded specification of the anatomic site where the medication first entered
 * the body.  For example, "left arm".
 * If the use case requires attributes from the BodySite resource (e.g. to identify
 * and track separately) then use the standard extension
 * [bodySite](extension-bodysite.html).  May be a summary code, or a reference to a
 * very precise definition of the location, or both.
 */
  site?: CodeableConcept | undefined;
  _site?: Element | undefined;

        
      
        
          
  /**
 * Free text dosage can be used for cases where the dosage administered is too
 * complex to code. When coded dosage is present, the free text dosage may still be
 * present for display to humans.The dosage instructions should reflect the
 * dosage of the medication that was administered.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
            
  /**
 * A specific date/time or interval of time during which the administration took
 * place (or did not take place, when the 'notGiven' attribute is true). For many
 * administrations, such as swallowing a tablet the use of dateTime is more
 * appropriate.
 */
  effectiveDateTime?: string | undefined;
  _effectiveDateTime?: Element | undefined;

          
            
  /**
 * A specific date/time or interval of time during which the administration took
 * place (or did not take place, when the 'notGiven' attribute is true). For many
 * administrations, such as swallowing a tablet the use of dateTime is more
 * appropriate.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * A summary of the events of interest that have occurred, such as when the
 * administration was verified.
 * This might not include provenances for all versions of the request – only those
 * deemed “relevant” or important. This SHALL NOT include the Provenance associated
 * with this current version of the resource. (If that provenance is deemed to be a
 * “relevant” change, it will need to be added as part of a later update. Until
 * then, it can be queried directly as the Provenance that points to this version
 * using _revinclude All Provenances should have some historical version of this
 * Request as their subject.
 */
  eventHistory?: Array<Reference> | undefined;
  _eventHistory?: Element[] | undefined;

        
      
        
          
  /**
 * Identifiers associated with this Medication Administration that are defined by
 * business processes and/or used to refer to it when a direct URL reference to the
 * resource itself is not appropriate. They are business identifiers assigned to
 * this resource by the performer or other systems and remain constant as the
 * resource is updated and propagates from server to server.
 * This is a business identifier, not a resource identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A protocol, guideline, orderset, or other definition that was adhered to in
 * whole or in part by this event.
 */
  instantiates?: Array<string> | undefined;
  _instantiates?: Element[] | undefined;

        
      
        
          
            
  /**
 * Identifies the medication that was administered. This is either a link to a
 * resource representing the details of the medication or a simple attribute
 * carrying a code that identifies the medication from a known list of medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the medication resource is
 * recommended.  For example, if you require form or lot number, then you must
 * reference the Medication resource.
 */
  medicationCodeableConcept?: CodeableConcept | undefined;
  _medicationCodeableConcept?: Element | undefined;

          
            
  /**
 * Identifies the medication that was administered. This is either a link to a
 * resource representing the details of the medication or a simple attribute
 * carrying a code that identifies the medication from a known list of medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the medication resource is
 * recommended.  For example, if you require form or lot number, then you must
 * reference the Medication resource.
 */
  medicationReference?: Reference | undefined;
  _medicationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Extra information about the medication administration that is not conveyed by
 * the other attributes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * A larger event of which this particular event is a component or step.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed the medication administration and how they were
 * involved.
 */
  performer?: Array<BackboneElement> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed the medication administration.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Distinguishes the type of involvement of the performer in the medication
 * administration.
 */
  function?: CodeableConcept | undefined;
  _function?: Element | undefined;

        
      
        
          
  /**
 * A code indicating why the medication was given.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Condition or observation that supports why the medication was administered.
 * This is a reference to a condition that is the reason for the medication
 * request.  If only a code exists, use reasonCode.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The original request, instruction or authority to perform the administration.
 * This is a reference to the MedicationRequest  where the intent is either order
 * or instance-order.  It should not reference MedicationRequests where the intent
 * is any other value.
 */
  request?: Reference | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * Will generally be set to show that the administration has been completed.  For
 * some long running administrations such as infusions, it is possible for an
 * administration to be started but not completed or it may be paused while some
 * other process is under way.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A code indicating why the administration was not performed.
 */
  statusReason?: Array<CodeableConcept> | undefined;
  _statusReason?: Element[] | undefined;

        
      
        
          
  /**
 * The person or animal or group receiving the medication.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Additional information (for example, patient height and weight) that supports
 * the administration of the medication.
 */
  supportingInformation?: Array<Reference> | undefined;
  _supportingInformation?: Element[] | undefined;

        
      
    }

  


  
    /**
 * MedicationDispense
 * 
 * Indicates that a medication product is to be or has been dispensed for a named
 * person/patient.  This includes a description of the medication product (supply)
 * provided and the instructions for administering the medication.  The medication
 * dispense is the result of a pharmacy system responding to a medication order.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MedicationDispense.html}
 */
    export interface MedicationDispense extends DomainResource {
      
      readonly resourceType: "MedicationDispense";
      

      
        
          
  /**
 * Indicates the medication order that is being dispensed against.
 * Maps to basedOn in Event logical model.
 */
  authorizingPrescription?: Array<Reference> | undefined;
  _authorizingPrescription?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the type of medication dispense (for example, where the medication is
 * expected to be consumed or administered (i.e. inpatient or outpatient)).
 * The category can be used to include where the medication is expected to be
 * consumed or other types of dispenses.  Invariants can be used to bind to
 * different value sets when profiling to bind.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * The encounter or episode of care that establishes the context for this event.
 */
  context?: Reference | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * The amount of medication expressed as a timing amount.
 */
  daysSupply?: Quantity | undefined;
  _daysSupply?: Element | undefined;

        
      
        
          
  /**
 * Identification of the facility/location where the medication was shipped to, as
 * part of the dispense event.
 */
  destination?: Reference | undefined;
  _destination?: Element | undefined;

        
      
        
          
  /**
 * Indicates an actual or potential clinical issue with or between one or more
 * active or proposed clinical actions for a patient; e.g. drug-drug interaction,
 * duplicate therapy, dosage alert etc.
 * This element can include a detected issue that has been identified either by a
 * decision support system or by a clinician and may include information on the
 * steps that were taken to address the issue.
 */
  detectedIssue?: Array<Reference> | undefined;
  _detectedIssue?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates how the medication is to be used by the patient.
 * When the dose or rate is intended to change over the entire administration
 * period (e.g. Tapering dose prescriptions), multiple instances of dosage
 * instructions will need to be supplied to convey the different doses/rates.The
 * pharmacist reviews the medication order prior to dispense and updates the
 * dosageInstruction based on the actual product being dispensed.
 */
  dosageInstruction?: Array<Dosage> | undefined;
  _dosageInstruction?: Element[] | undefined;

        
      
        
          
  /**
 * A summary of the events of interest that have occurred, such as when the
 * dispense was verified.
 * This might not include provenances for all versions of the request – only those
 * deemed “relevant” or important. This SHALL NOT include the Provenance associated
 * with this current version of the resource. (If that provenance is deemed to be a
 * “relevant” change, it will need to be added as part of a later update. Until
 * then, it can be queried directly as the Provenance that points to this version
 * using _revinclude All Provenances should have some historical version of this
 * Request as their subject.).
 */
  eventHistory?: Array<Reference> | undefined;
  _eventHistory?: Element[] | undefined;

        
      
        
          
  /**
 * Identifiers associated with this Medication Dispense that are defined by
 * business processes and/or used to refer to it when a direct URL reference to the
 * resource itself is not appropriate. They are business identifiers assigned to
 * this resource by the performer or other systems and remain constant as the
 * resource is updated and propagates from server to server.
 * This is a business identifier, not a resource identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The principal physical location where the dispense was performed.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
            
  /**
 * Identifies the medication being administered. This is either a link to a
 * resource representing the details of the medication or a simple attribute
 * carrying a code that identifies the medication from a known list of medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the medication resource is
 * recommended.  For example, if you require form or lot number, then you must
 * reference the Medication resource.
 */
  medicationCodeableConcept?: CodeableConcept | undefined;
  _medicationCodeableConcept?: Element | undefined;

          
            
  /**
 * Identifies the medication being administered. This is either a link to a
 * resource representing the details of the medication or a simple attribute
 * carrying a code that identifies the medication from a known list of medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the medication resource is
 * recommended.  For example, if you require form or lot number, then you must
 * reference the Medication resource.
 */
  medicationReference?: Reference | undefined;
  _medicationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Extra information about the dispense that could not be conveyed in the other
 * attributes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The procedure that trigger the dispense.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who or what performed the event.
 */
  performer?: Array<BackboneElement> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * The device, practitioner, etc. who performed the action.  It should be assumed
 * that the actor is the dispenser of the medication.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Distinguishes the type of performer in the dispense.  For example, date enterer,
 * packager, final checker.
 */
  function?: CodeableConcept | undefined;
  _function?: Element | undefined;

        
      
        
          
  /**
 * The amount of medication that has been dispensed. Includes unit of measure.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Identifies the person who picked up the medication.  This will usually be a
 * patient or their caregiver, but some cases exist where it can be a healthcare
 * professional.
 */
  receiver?: Array<Reference> | undefined;
  _receiver?: Element[] | undefined;

        
      
        
          
  /**
 * A code specifying the state of the set of dispense events.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates the reason why a dispense was not performed.
 */
  statusReasonCodeableConcept?: CodeableConcept | undefined;
  _statusReasonCodeableConcept?: Element | undefined;

          
            
  /**
 * Indicates the reason why a dispense was not performed.
 */
  statusReasonReference?: Reference | undefined;
  _statusReasonReference?: Element | undefined;

          
        
      
        
          
  /**
 * A link to a resource representing the person or the group to whom the medication
 * will be given.
 * SubstanceAdministration->subject->Patient.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether or not substitution was made as part of the dispense.  In some
 * cases, substitution will be expected but does not happen, in other cases
 * substitution is not expected but does happen.  This block explains what
 * substitution did or did not happen and why.  If nothing is specified,
 * substitution was not done.
 */
  substitution?: BackboneElement | undefined;
  _substitution?: Element | undefined;

        
      
        
          
  /**
 * Indicates the reason for the substitution (or lack of substitution) from what
 * was prescribed.
 */
  reason?: Array<CodeableConcept> | undefined;
  _reason?: Element[] | undefined;

        
      
        
          
  /**
 * The person or organization that has primary responsibility for the substitution.
 */
  responsibleParty?: Array<Reference> | undefined;
  _responsibleParty?: Element[] | undefined;

        
      
        
          
  /**
 * A code signifying whether a different drug was dispensed from what was
 * prescribed.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * True if the dispenser dispensed a different drug or product from what was
 * prescribed.
 */
  wasSubstituted: boolean;
  _wasSubstituted?: Element | undefined;

        
      
        
          
  /**
 * Additional information that supports the medication being dispensed.
 */
  supportingInformation?: Array<Reference> | undefined;
  _supportingInformation?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the type of dispensing event that is performed. For example, Trial
 * Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The time the dispensed product was provided to the patient or their
 * representative.
 */
  whenHandedOver?: string | undefined;
  _whenHandedOver?: Element | undefined;

        
      
        
          
  /**
 * The time when the dispensed product was packaged and reviewed.
 */
  whenPrepared?: string | undefined;
  _whenPrepared?: Element | undefined;

        
      
    }

  


  
    /**
 * MedicationKnowledge
 * 
 * Information about a medication that is used to support knowledge.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MedicationKnowledge.html}
 */
    export interface MedicationKnowledge extends DomainResource {
      
      readonly resourceType: "MedicationKnowledge";
      

      
        
          
  /**
 * Guidelines for the administration of the medication.
 */
  administrationGuidelines?: Array<BackboneElement> | undefined;
  _administrationGuidelines?: Element[] | undefined;

        
      
        
          
  /**
 * Dosage for the medication for the specific guidelines.
 */
  dosage?: Array<BackboneElement> | undefined;
  _dosage?: Element[] | undefined;

        
      
        
          
  /**
 * Dosage for the medication for the specific guidelines.
 */
  dosage: Array<Dosage>;
  _dosage?: Element[] | undefined;

        
      
        
          
  /**
 * The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * Indication for use that apply to the specific administration guidelines.
 */
  indicationCodeableConcept?: CodeableConcept | undefined;
  _indicationCodeableConcept?: Element | undefined;

          
            
  /**
 * Indication for use that apply to the specific administration guidelines.
 */
  indicationReference?: Reference | undefined;
  _indicationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Characteristics of the patient that are relevant to the administration
 * guidelines (for example, height, weight, gender, etc.).
 */
  patientCharacteristics?: Array<BackboneElement> | undefined;
  _patientCharacteristics?: Element[] | undefined;

        
      
        
          
            
  /**
 * Specific characteristic that is relevant to the administration guideline (e.g.
 * height, weight, gender).
 */
  characteristicCodeableConcept?: CodeableConcept | undefined;
  _characteristicCodeableConcept?: Element | undefined;

          
            
  /**
 * Specific characteristic that is relevant to the administration guideline (e.g.
 * height, weight, gender).
 */
  characteristicQuantity?: Quantity | undefined;
  _characteristicQuantity?: Element | undefined;

          
        
      
        
          
  /**
 * The specific characteristic (e.g. height, weight, gender, etc.).
 */
  value?: Array<string> | undefined;
  _value?: Element[] | undefined;

        
      
        
          
  /**
 * Specific amount of the drug in the packaged product.  For example, when
 * specifying a product that has the same strength (For example, Insulin glargine
 * 100 unit per mL solution for injection), this attribute provides additional
 * clarification of the package amount (For example, 3 mL, 10mL, etc.).
 * This is the quantity of medication in a package.  To specify the strength of the
 * medication, the Ingredient.strength attribute is used.
 */
  amount?: Quantity | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * Associated or related medications.  For example, if the medication is a branded
 * product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if
 * this is a generic medication (e.g. Rosuvastatin), this would link to a branded
 * product (e.g. Crestor).
 */
  associatedMedication?: Array<Reference> | undefined;
  _associatedMedication?: Element[] | undefined;

        
      
        
          
  /**
 * A code that specifies this medication, or a textual description if no code is
 * available. Usage note: This could be a standard medication code such as a code
 * from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary
 * code, optionally with translations to other code systems.
 * Depending on the context of use, the code that was actually selected by the user
 * (prescriber, dispenser, etc.) will have the coding.userSelected set to true.  As
 * described in the coding datatype: "A coding may be marked as a "userSelected" if
 * a user selected the particular coded value in a user interface (e.g. the user
 * selects an item in a pick-list). If a user selected coding exists, it is the
 * preferred choice for performing translations etc. Other codes can only be
 * literal translations to alternative code systems, or codes at a lower level of
 * granularity (e.g. a generic code for a vendor-specific primary one).
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Potential clinical issue with or between medication(s) (for example, drug-drug
 * interaction, drug-disease contraindication, drug-allergy interaction, etc.).
 */
  contraindication?: Array<Reference> | undefined;
  _contraindication?: Element[] | undefined;

        
      
        
          
  /**
 * The price of the medication.
 */
  cost?: Array<BackboneElement> | undefined;
  _cost?: Element[] | undefined;

        
      
        
          
  /**
 * The price of the medication.
 */
  cost: Money;
  _cost?: Element | undefined;

        
      
        
          
  /**
 * The source or owner that assigns the price to the medication.
 */
  source?: string | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * The category of the cost information.  For example, manufacturers' cost, patient
 * cost, claim reimbursement cost, actual acquisition cost.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Describes the form of the item.  Powder; tablets; capsule.
 * When Medication is referenced from MedicationRequest, this is the ordered form.
 * When Medication is referenced within MedicationDispense, this is the dispensed
 * form.  When Medication is referenced within MedicationAdministration, this is
 * administered form.
 */
  doseForm?: CodeableConcept | undefined;
  _doseForm?: Element | undefined;

        
      
        
          
  /**
 * Specifies descriptive properties of the medicine, such as color, shape,
 * imprints, etc.
 */
  drugCharacteristic?: Array<BackboneElement> | undefined;
  _drugCharacteristic?: Element[] | undefined;

        
      
        
          
  /**
 * A code specifying which characteristic of the medicine is being described (for
 * example, colour, shape, imprint).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * Description of the characteristic.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * Description of the characteristic.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * Description of the characteristic.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Description of the characteristic.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
        
      
        
          
  /**
 * Identifies a particular constituent of interest in the product.
 */
  ingredient?: Array<BackboneElement> | undefined;
  _ingredient?: Element[] | undefined;

        
      
        
          
  /**
 * Indication of whether this ingredient affects the therapeutic action of the
 * drug.
 */
  isActive?: boolean | undefined;
  _isActive?: Element | undefined;

        
      
        
          
            
  /**
 * The actual ingredient - either a substance (simple ingredient) or another
 * medication.
 */
  itemCodeableConcept?: CodeableConcept | undefined;
  _itemCodeableConcept?: Element | undefined;

          
            
  /**
 * The actual ingredient - either a substance (simple ingredient) or another
 * medication.
 */
  itemReference?: Reference | undefined;
  _itemReference?: Element | undefined;

          
        
      
        
          
  /**
 * Specifies how many (or how much) of the items there are in this Medication.  For
 * example, 250 mg per tablet.  This is expressed as a ratio where the numerator is
 * 250mg and the denominator is 1 tablet.
 */
  strength?: Ratio | undefined;
  _strength?: Element | undefined;

        
      
        
          
  /**
 * The intended or approved route of administration.
 */
  intendedRoute?: Array<CodeableConcept> | undefined;
  _intendedRoute?: Element[] | undefined;

        
      
        
          
  /**
 * The time course of drug absorption, distribution, metabolism and excretion of a
 * medication from the body.
 */
  kinetics?: Array<BackboneElement> | undefined;
  _kinetics?: Element[] | undefined;

        
      
        
          
  /**
 * The drug concentration measured at certain discrete points in time.
 */
  areaUnderCurve?: Array<Quantity> | undefined;
  _areaUnderCurve?: Element[] | undefined;

        
      
        
          
  /**
 * The time required for any specified property (e.g., the concentration of a
 * substance in the body) to decrease by half.
 */
  halfLifePeriod?: Duration | undefined;
  _halfLifePeriod?: Element | undefined;

        
      
        
          
  /**
 * The median lethal dose of a drug.
 */
  lethalDose50?: Array<Quantity> | undefined;
  _lethalDose50?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the details of the manufacturer of the medication product.  This is
 * not intended to represent the distributor of a medication product.
 */
  manufacturer?: Reference | undefined;
  _manufacturer?: Element | undefined;

        
      
        
          
  /**
 * Categorization of the medication within a formulary or classification system.
 */
  medicineClassification?: Array<BackboneElement> | undefined;
  _medicineClassification?: Element[] | undefined;

        
      
        
          
  /**
 * Specific category assigned to the medication (e.g. anti-infective,
 * anti-hypertensive, antibiotic, etc.).
 */
  classification?: Array<CodeableConcept> | undefined;
  _classification?: Element[] | undefined;

        
      
        
          
  /**
 * The type of category for the medication (for example, therapeutic
 * classification, therapeutic sub-classification).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The program under which the medication is reviewed.
 */
  monitoringProgram?: Array<BackboneElement> | undefined;
  _monitoringProgram?: Element[] | undefined;

        
      
        
          
  /**
 * Name of the reviewing program.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Type of program under which the medication is monitored.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Associated documentation about the medication.
 */
  monograph?: Array<BackboneElement> | undefined;
  _monograph?: Element[] | undefined;

        
      
        
          
  /**
 * Associated documentation about the medication.
 */
  source?: Reference | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * The category of documentation about the medication. (e.g. professional
 * monograph, patient education monograph).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Information that only applies to packages (not products).
 */
  packaging?: BackboneElement | undefined;
  _packaging?: Element | undefined;

        
      
        
          
  /**
 * The number of product units the package would contain if fully loaded.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * A code that defines the specific type of packaging that the medication can be
 * found in (e.g. blister sleeve, tube, bottle).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The instructions for preparing the medication.
 */
  preparationInstruction?: string | undefined;
  _preparationInstruction?: Element | undefined;

        
      
        
          
  /**
 * Category of the medication or product (e.g. branded product, therapeutic moeity,
 * generic product, innovator product, etc.).
 */
  productType?: Array<CodeableConcept> | undefined;
  _productType?: Element[] | undefined;

        
      
        
          
  /**
 * Regulatory information about a medication.
 */
  regulatory?: Array<BackboneElement> | undefined;
  _regulatory?: Element[] | undefined;

        
      
        
          
  /**
 * The maximum number of units of the medication that can be dispensed in a period.
 */
  maxDispense?: BackboneElement | undefined;
  _maxDispense?: Element | undefined;

        
      
        
          
  /**
 * The period that applies to the maximum number of units.
 */
  period?: Duration | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The maximum number of units of the medication that can be dispensed.
 */
  quantity: Quantity;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The authority that is specifying the regulations.
 */
  regulatoryAuthority: Reference;
  _regulatoryAuthority?: Element | undefined;

        
      
        
          
  /**
 * Specifies the schedule of a medication in jurisdiction.
 */
  schedule?: Array<BackboneElement> | undefined;
  _schedule?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies the specific drug schedule.
 */
  schedule: CodeableConcept;
  _schedule?: Element | undefined;

        
      
        
          
  /**
 * Specifies if changes are allowed when dispensing a medication from a regulatory
 * perspective.
 */
  substitution?: Array<BackboneElement> | undefined;
  _substitution?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies if regulation allows for changes in the medication when dispensing.
 */
  allowed: boolean;
  _allowed?: Element | undefined;

        
      
        
          
  /**
 * Specifies the type of substitution allowed.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Associated or related knowledge about a medication.
 */
  relatedMedicationKnowledge?: Array<BackboneElement> | undefined;
  _relatedMedicationKnowledge?: Element[] | undefined;

        
      
        
          
  /**
 * Associated documentation about the associated medication knowledge.
 */
  reference: Array<Reference>;
  _reference?: Element[] | undefined;

        
      
        
          
  /**
 * The category of the associated medication knowledge reference.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate if the medication is in active use.  The status refers to the
 * validity about the information of the medication and not to its medicinal
 * properties.
 * This status is intended to identify if the medication in a local system is in
 * active use within a drug database or inventory.  For example, a pharmacy system
 * may create a new drug file record for a compounded product "ABC Hospital Special
 * Cream" with an active status.  At some point in the future, it may be determined
 * that the drug record was created with an error and the status is changed to
 * "entered in error".   This status is not intended to specify if a medication is
 * part of a particular formulary.  It is possible that the drug record may be
 * referenced by multiple formularies or catalogues and each of those entries would
 * have a separate status.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Additional names for a medication, for example, the name(s) given to a
 * medication in different countries.  For example, acetaminophen and paracetamol
 * or salbutamol and albuterol.
 */
  synonym?: Array<string> | undefined;
  _synonym?: Element[] | undefined;

        
      
    }

  


  
    /**
 * MedicationRequest
 * 
 * An order or request for both supply of the medication and the instructions for
 * administration of the medication to a patient. The resource is called
 * "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to
 * generalize the use across inpatient and outpatient settings, including care
 * plans, etc., and to harmonize with workflow patterns.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MedicationRequest.html}
 */
    export interface MedicationRequest extends DomainResource {
      
      readonly resourceType: "MedicationRequest";
      

      
        
          
  /**
 * The date (and perhaps time) when the prescription was initially written or
 * authored on.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * A plan or request that is fulfilled in whole or in part by this medication
 * request.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the type of medication request (for example, where the medication is
 * expected to be consumed or administered (i.e. inpatient or outpatient)).
 * The category can be used to include where the medication is expected to be
 * consumed or other types of requests.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The description of the overall patte3rn of the administration of the medication
 * to the patient.
 * This attribute should not be confused with the protocol of the medication.
 */
  courseOfTherapyType?: CodeableConcept | undefined;
  _courseOfTherapyType?: Element | undefined;

        
      
        
          
  /**
 * Indicates an actual or potential clinical issue with or between one or more
 * active or proposed clinical actions for a patient; e.g. Drug-drug interaction,
 * duplicate therapy, dosage alert etc.
 * This element can include a detected issue that has been identified either by a
 * decision support system or by a clinician and may include information on the
 * steps that were taken to address the issue.
 */
  detectedIssue?: Array<Reference> | undefined;
  _detectedIssue?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the specific details for the dispense or medication supply part of a
 * medication request (also known as a Medication Prescription or Medication
 * Order).  Note that this information is not always sent with the order.  There
 * may be in some settings (e.g. hospitals) institutional or system support for
 * completing the dispense details in the pharmacy department.
 */
  dispenseRequest?: BackboneElement | undefined;
  _dispenseRequest?: Element | undefined;

        
      
        
          
  /**
 * The minimum period of time that must occur between dispenses of the medication.
 */
  dispenseInterval?: Duration | undefined;
  _dispenseInterval?: Element | undefined;

        
      
        
          
  /**
 * Identifies the period time over which the supplied product is expected to be
 * used, or the length of time the dispense is expected to last.
 * In some situations, this attribute may be used instead of quantity to identify
 * the amount supplied by how long it is expected to last, rather than the physical
 * quantity issued, e.g. 90 days supply of medication (based on an ordered dosage).
 * When possible, it is always better to specify quantity, as this tends to be more
 * precise. expectedSupplyDuration will always be an estimate that can be
 * influenced by external factors.
 */
  expectedSupplyDuration?: Duration | undefined;
  _expectedSupplyDuration?: Element | undefined;

        
      
        
          
  /**
 * Indicates the quantity or duration for the first dispense of the medication.
 * If populating this element, either the quantity or the duration must be
 * included.
 */
  initialFill?: BackboneElement | undefined;
  _initialFill?: Element | undefined;

        
      
        
          
  /**
 * The length of time that the first dispense is expected to last.
 */
  duration?: Duration | undefined;
  _duration?: Element | undefined;

        
      
        
          
  /**
 * The amount or quantity to provide as part of the first dispense.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * An integer indicating the number of times, in addition to the original dispense,
 * (aka refills or repeats) that the patient can receive the prescribed medication.
 * Usage Notes: This integer does not include the original order dispense. This
 * means that if an order indicates dispense 30 tablets plus "3 repeats", then the
 * order can be dispensed a total of 4 times and the patient can receive a total of
 * 120 tablets.  A prescriber may explicitly say that zero refills are permitted
 * after the initial dispense.
 * If displaying "number of authorized fills", add 1 to this number.
 */
  numberOfRepeatsAllowed?: unsignedInt | undefined;
  _numberOfRepeatsAllowed?: Element | undefined;

        
      
        
          
  /**
 * Indicates the intended dispensing Organization specified by the prescriber.
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * The amount that is to be dispensed for one fill.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * This indicates the validity period of a prescription (stale dating the
 * Prescription).
 * It reflects the prescribers' perspective for the validity of the prescription.
 * Dispenses must not be made against the prescription outside of this period. The
 * lower-bound of the Dispensing Window signifies the earliest date that the
 * prescription can be filled for the first time. If an upper-bound is not
 * specified then the Prescription is open-ended or will default to a stale-date
 * based on regulations.
 */
  validityPeriod?: Period | undefined;
  _validityPeriod?: Element | undefined;

        
      
        
          
  /**
 * If true indicates that the provider is asking for the medication request not to
 * occur.
 * If do not perform is not specified, the request is a positive request e.g. "do
 * perform".
 */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;

        
      
        
          
  /**
 * Indicates how the medication is to be used by the patient.
 * There are examples where a medication request may include the option of an oral
 * dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg
 * orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine)
 * 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two
 * medication requests would be created that could be grouped together.  The
 * decision on which dose and route of administration to use is based on the
 * patient's condition at the time the dose is needed.
 */
  dosageInstruction?: Array<Dosage> | undefined;
  _dosageInstruction?: Element[] | undefined;

        
      
        
          
  /**
 * The Encounter during which this [x] was created or to which the creation of this
 * record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter."    If there is a
 * need to link to episodes of care they will be handled with an extension.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Links to Provenance records for past versions of this resource or fulfilling
 * request or event resources that identify key state transitions or updates that
 * are likely to be relevant to a user looking at the current version of the
 * resource.
 * This might not include provenances for all versions of the request – only those
 * deemed “relevant” or important. This SHALL NOT include the provenance associated
 * with this current version of the resource. (If that provenance is deemed to be a
 * “relevant” change, it will need to be added as part of a later update. Until
 * then, it can be queried directly as the provenance that points to this version
 * using _revinclude All Provenances should have some historical version of this
 * Request as their subject.).
 */
  eventHistory?: Array<Reference> | undefined;
  _eventHistory?: Element[] | undefined;

        
      
        
          
  /**
 * A shared identifier common to all requests that were authorized more or less
 * simultaneously by a single author, representing the identifier of the
 * requisition or prescription.
 */
  groupIdentifier?: Identifier | undefined;
  _groupIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Identifiers associated with this medication request that are defined by business
 * processes and/or used to refer to it when a direct URL reference to the resource
 * itself is not appropriate. They are business identifiers assigned to this
 * resource by the performer or other systems and remain constant as the resource
 * is updated and propagates from server to server.
 * This is a business identifier, not a resource identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a protocol, guideline, orderset, or other definition that is
 * adhered to in whole or in part by this MedicationRequest.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this
 * MedicationRequest.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * Insurance plans, coverage extensions, pre-authorizations and/or
 * pre-determinations that may be required for delivering the requested service.
 */
  insurance?: Array<Reference> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the request is a proposal, plan, or an original order.
 * It is expected that the type of requester will be restricted for different
 * stages of a MedicationRequest.  For example, Proposals can be created by a
 * patient, relatedPerson, Practitioner or Device.  Plans can be created by
 * Practitioners, Patients, RelatedPersons and Devices.  Original orders can be
 * created by a Practitioner only.An instance-order is an instantiation of a
 * request or order and may be used to populate Medication Administration
 * Record.This element is labeled as a modifier because the intent alters when
 * and how the resource is actually applicable.
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
            
  /**
 * Identifies the medication being requested. This is a link to a resource that
 * represents the medication which may be the details of the medication or simply
 * an attribute carrying a code that identifies the medication from a known list of
 * medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the Medication resource is
 * recommended.  For example, if you require form or lot number or if the
 * medication is compounded or extemporaneously prepared, then you must reference
 * the Medication resource.
 */
  medicationCodeableConcept?: CodeableConcept | undefined;
  _medicationCodeableConcept?: Element | undefined;

          
            
  /**
 * Identifies the medication being requested. This is a link to a resource that
 * represents the medication which may be the details of the medication or simply
 * an attribute carrying a code that identifies the medication from a known list of
 * medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the Medication resource is
 * recommended.  For example, if you require form or lot number or if the
 * medication is compounded or extemporaneously prepared, then you must reference
 * the Medication resource.
 */
  medicationReference?: Reference | undefined;
  _medicationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Extra information about the prescription that could not be conveyed by the other
 * attributes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The specified desired performer of the medication treatment (e.g. the performer
 * of the medication administration).
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * Indicates the type of performer of the administration of the medication.
 * If specified without indicating a performer, this indicates that the performer
 * must be of the specified type. If specified with a performer then it indicates
 * the requirements of the performer if the designated performer is not available.
 */
  performerType?: CodeableConcept | undefined;
  _performerType?: Element | undefined;

        
      
        
          
  /**
 * Indicates how quickly the Medication Request should be addressed with respect to
 * other requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * A link to a resource representing an earlier order related order or
 * prescription.
 */
  priorPrescription?: Reference | undefined;
  _priorPrescription?: Element | undefined;

        
      
        
          
  /**
 * The reason or the indication for ordering or not ordering the medication.
 * This could be a diagnosis code. If a full condition record exists or additional
 * detail is needed, use reasonReference.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Condition or observation that supports why the medication was ordered.
 * This is a reference to a condition or observation that is the reason for the
 * medication order.  If only a code exists, use reasonCode.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The person who entered the order on behalf of another individual for example in
 * the case of a verbal or a telephone order.
 */
  recorder?: Reference | undefined;
  _recorder?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates if this record was captured as a secondary 'reported' record rather
 * than as an original primary source-of-truth record.  It may also indicate the
 * source of the report.
 */
  reportedBoolean?: boolean | undefined;
  _reportedBoolean?: Element | undefined;

          
            
  /**
 * Indicates if this record was captured as a secondary 'reported' record rather
 * than as an original primary source-of-truth record.  It may also indicate the
 * source of the report.
 */
  reportedReference?: Reference | undefined;
  _reportedReference?: Element | undefined;

          
        
      
        
          
  /**
 * The individual, organization, or device that initiated the request and has
 * responsibility for its activation.
 */
  requester?: Reference | undefined;
  _requester?: Element | undefined;

        
      
        
          
  /**
 * A code specifying the current state of the order.  Generally, this will be
 * active or completed state.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the MedicationRequest.
 * This is generally only used for "exception" statuses such as "suspended" or
 * "cancelled". The reason why the MedicationRequest was created at all is captured
 * in reasonCode, not here.
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * A link to a resource representing the person or set of individuals to whom the
 * medication will be given.
 * The subject on a medication request is mandatory.  For the secondary use case
 * where the actual subject is not provided, there still must be an anonymized
 * subject specified.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether or not substitution can or should be part of the dispense. In
 * some cases, substitution must happen, in other cases substitution must not
 * happen. This block explains the prescriber's intent. If nothing is specified
 * substitution may be done.
 */
  substitution?: BackboneElement | undefined;
  _substitution?: Element | undefined;

        
      
        
          
            
  /**
 * True if the prescriber allows a different drug to be dispensed from what was
 * prescribed.
 * This element is labeled as a modifier because whether substitution is allow or
 * not, it cannot be ignored.
 */
  allowedBoolean?: boolean | undefined;
  _allowedBoolean?: Element | undefined;

          
            
  /**
 * True if the prescriber allows a different drug to be dispensed from what was
 * prescribed.
 * This element is labeled as a modifier because whether substitution is allow or
 * not, it cannot be ignored.
 */
  allowedCodeableConcept?: CodeableConcept | undefined;
  _allowedCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates the reason for the substitution, or why substitution must or must not
 * be performed.
 */
  reason?: CodeableConcept | undefined;
  _reason?: Element | undefined;

        
      
        
          
  /**
 * Include additional information (for example, patient height and weight) that
 * supports the ordering of the medication.
 */
  supportingInformation?: Array<Reference> | undefined;
  _supportingInformation?: Element[] | undefined;

        
      
    }

  


  
    /**
 * MedicationStatement
 * 
 * A record of a medication that is being consumed by a patient.   A
 * MedicationStatement may indicate that the patient may be taking the medication
 * now or has taken the medication in the past or will be taking the medication in
 * the future.  The source of this information can be the patient, significant
 * other (such as a family member or spouse), or a clinician.  A common scenario
 * where this information is captured is during the history taking process during a
 * patient visit or stay.   The medication information may come from sources such
 * as the patient's memory, from a prescription bottle,  or from a list of
 * medications the patient, clinician or other party maintains. 

The primary
 * difference between a medication statement and a medication administration is
 * that the medication administration has complete administration information and
 * is based on actual administration information from the person who administered
 * the medication.  A medication statement is often, if not always, less specific.
 * There is no required date/time when the medication was administered, in fact we
 * only know that a source has reported the patient is taking this medication,
 * where details such as time, quantity, or rate or even medication product may be
 * incomplete or missing or less precise.  As stated earlier, the medication
 * statement information may come from the patient's memory, from a prescription
 * bottle or from a list of medications the patient, clinician or other party
 * maintains.  Medication administration is more formal and is not missing detailed
 * information.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MedicationStatement.html}
 */
    export interface MedicationStatement extends DomainResource {
      
      readonly resourceType: "MedicationStatement";
      

      
        
          
  /**
 * A plan, proposal or order that is fulfilled in whole or in part by this event.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates where the medication is expected to be consumed or administered.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * The encounter or episode of care that establishes the context for this
 * MedicationStatement.
 */
  context?: Reference | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * The date when the medication statement was asserted by the information source.
 */
  dateAsserted?: string | undefined;
  _dateAsserted?: Element | undefined;

        
      
        
          
  /**
 * Allows linking the MedicationStatement to the underlying MedicationRequest, or
 * to other information that supports or is used to derive the MedicationStatement.
 * Likely references would be to MedicationRequest, MedicationDispense, Claim,
 * Observation or QuestionnaireAnswers.  The most common use cases for deriving a
 * MedicationStatement comes from creating a MedicationStatement from a
 * MedicationRequest or from a lab observation or a claim.  it should be noted that
 * the amount of information that is available varies from the type resource that
 * you derive the MedicationStatement from.
 */
  derivedFrom?: Array<Reference> | undefined;
  _derivedFrom?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates how the medication is/was or should be taken by the patient.
 * The dates included in the dosage on a Medication Statement reflect the dates for
 * a given dose.  For example, "from November 1, 2016 to November 3, 2016, take one
 * tablet daily and from November 4, 2016 to November 7, 2016, take two tablets
 * daily."  It is expected that this specificity may only be populated where the
 * patient brings in their labeled container or where the Medication Statement is
 * derived from a MedicationRequest.
 */
  dosage?: Array<Dosage> | undefined;
  _dosage?: Element[] | undefined;

        
      
        
          
            
  /**
 * The interval of time during which it is being asserted that the patient
 * is/was/will be taking the medication (or was not taking, when the
 * MedicationStatement.taken element is No).
 * This attribute reflects the period over which the patient consumed the
 * medication and is expected to be populated on the majority of Medication
 * Statements. If the medication is still being taken at the time the statement is
 * recorded, the "end" date will be omitted.  The date/time attribute supports a
 * variety of dates - year, year/month and exact date.  If something more than this
 * is required, this should be conveyed as text.
 */
  effectiveDateTime?: string | undefined;
  _effectiveDateTime?: Element | undefined;

          
            
  /**
 * The interval of time during which it is being asserted that the patient
 * is/was/will be taking the medication (or was not taking, when the
 * MedicationStatement.taken element is No).
 * This attribute reflects the period over which the patient consumed the
 * medication and is expected to be populated on the majority of Medication
 * Statements. If the medication is still being taken at the time the statement is
 * recorded, the "end" date will be omitted.  The date/time attribute supports a
 * variety of dates - year, year/month and exact date.  If something more than this
 * is required, this should be conveyed as text.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Identifiers associated with this Medication Statement that are defined by
 * business processes and/or used to refer to it when a direct URL reference to the
 * resource itself is not appropriate. They are business identifiers assigned to
 * this resource by the performer or other systems and remain constant as the
 * resource is updated and propagates from server to server.
 * This is a business identifier, not a resource identifier.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The person or organization that provided the information about the taking of
 * this medication. Note: Use derivedFrom when a MedicationStatement is derived
 * from other resources, e.g. Claim or MedicationRequest.
 */
  informationSource?: Reference | undefined;
  _informationSource?: Element | undefined;

        
      
        
          
            
  /**
 * Identifies the medication being administered. This is either a link to a
 * resource representing the details of the medication or a simple attribute
 * carrying a code that identifies the medication from a known list of medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the medication resource is
 * recommended.  For example, if you require form or lot number, then you must
 * reference the Medication resource.
 */
  medicationCodeableConcept?: CodeableConcept | undefined;
  _medicationCodeableConcept?: Element | undefined;

          
            
  /**
 * Identifies the medication being administered. This is either a link to a
 * resource representing the details of the medication or a simple attribute
 * carrying a code that identifies the medication from a known list of medications.
 * If only a code is specified, then it needs to be a code for a specific product.
 * If more information is required, then the use of the medication resource is
 * recommended.  For example, if you require form or lot number, then you must
 * reference the Medication resource.
 */
  medicationReference?: Reference | undefined;
  _medicationReference?: Element | undefined;

          
        
      
        
          
  /**
 * Provides extra information about the medication statement that is not conveyed
 * by the other attributes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * A larger event of which this particular event is a component or step.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * A reason for why the medication is being/was taken.
 * This could be a diagnosis code. If a full condition record exists or additional
 * detail is needed, use reasonForUseReference.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Condition or observation that supports why the medication is being/was taken.
 * This is a reference to a condition that is the reason why the medication is
 * being/was taken.  If only a code exists, use reasonForUseCode.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * A code representing the patient or other source's judgment about the state of
 * the medication used that this statement is about.  Generally, this will be
 * active or completed.
 * MedicationStatement is a statement at a point in time.  The status is only
 * representative at the point when it was asserted.  The value set for
 * MedicationStatement.status contains codes that assert the status of the use of
 * the medication by the patient (for example, stopped or on hold) as well as codes
 * that assert the status of the medication statement itself (for example, entered
 * in error).This element is labeled as a modifier because the status contains
 * codes that mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the MedicationStatement.
 * This is generally only used for "exception" statuses such as "not-taken",
 * "on-hold", "cancelled" or "entered-in-error". The reason for performing the
 * event at all is captured in reasonCode, not here.
 */
  statusReason?: Array<CodeableConcept> | undefined;
  _statusReason?: Element[] | undefined;

        
      
        
          
  /**
 * The person, animal or group who is/was taking the medication.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
    }

  


  
    /**
 * MedicinalProductDefinition
 * 
 * Detailed definition of a medicinal product, typically for uses other than direct
 * patient care (e.g. regulatory use, drug catalogs, to support prescribing,
 * adverse events management etc.).
 * 
 * @see {@link http://hl7.org/fhir/R4B/MedicinalProductDefinition.html}
 */
    export interface MedicinalProductDefinition extends DomainResource {
      
      readonly resourceType: "MedicinalProductDefinition";
      

      
        
          
  /**
 * Whether the Medicinal Product is subject to additional monitoring for regulatory
 * reasons, such as heightened reporting requirements.
 */
  additionalMonitoringIndicator?: CodeableConcept | undefined;
  _additionalMonitoringIndicator?: Element | undefined;

        
      
        
          
  /**
 * Additional information or supporting documentation about the medicinal product.
 */
  attachedDocument?: Array<Reference> | undefined;
  _attachedDocument?: Element[] | undefined;

        
      
        
          
  /**
 * Allows the key product features to be recorded, such as "sugar free", "modified
 * release", "parallel import".
 */
  characteristic?: Array<BackboneElement> | undefined;
  _characteristic?: Element[] | undefined;

        
      
        
          
  /**
 * A code expressing the type of characteristic.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * A value for the characteristic.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
        
      
        
          
  /**
 * Allows the product to be classified by various systems, commonly WHO ATC.
 */
  classification?: Array<CodeableConcept> | undefined;
  _classification?: Element[] | undefined;

        
      
        
          
  /**
 * Clinical trials or studies that this product is involved in.
 */
  clinicalTrial?: Array<Reference> | undefined;
  _clinicalTrial?: Element[] | undefined;

        
      
        
          
  /**
 * A code that this product is known by, usually within some formal terminology,
 * perhaps assigned by a third party (i.e. not the manufacturer or regulator).
 * Products (types of medications) tend to be known by identifiers during
 * development and within regulatory process. However when they are prescribed they
 * tend to be identified by codes. The same product may be have multiple codes,
 * applied to it by multiple organizations.
 */
  code?: Array<Coding> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * The dose form for a single part product, or combined form of a multiple part
 * product. This is one concept that describes all the components. It does not
 * represent the form with components physically mixed, if that might be necessary,
 * for which see (AdministrableProductDefinition.administrableDoseForm).
 */
  combinedPharmaceuticalDoseForm?: CodeableConcept | undefined;
  _combinedPharmaceuticalDoseForm?: Element | undefined;

        
      
        
          
  /**
 * A product specific contact, person (in a role), or an organization.
 */
  contact?: Array<BackboneElement> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A product specific contact, person (in a role), or an organization.
 */
  contact: Reference;
  _contact?: Element | undefined;

        
      
        
          
  /**
 * Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry
 * Information.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Reference to another product, e.g. for linking authorised to investigational
 * product, or a virtual product.
 */
  crossReference?: Array<BackboneElement> | undefined;
  _crossReference?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to another product, e.g. for linking authorised to investigational
 * product.
 */
  product: CodeableReference;
  _product?: Element | undefined;

        
      
        
          
  /**
 * The type of relationship, for instance branded to generic, virtual to actual
 * product, product to development product (investigational), parallel import
 * version.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * General description of this product.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * If this medicine applies to human or veterinary uses.
 */
  domain?: CodeableConcept | undefined;
  _domain?: Element | undefined;

        
      
        
          
  /**
 * Business identifier for this product. Could be an MPID. When in development or
 * being regulated, products are typically referenced by official identifiers,
 * assigned by a manufacturer or regulator, and unique to a product (which, when
 * compared to a product instance being prescribed, is actually a product type).
 * See also MedicinalProductDefinition.code.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Any component of the drug product which is not the chemical entity defined as
 * the drug substance, or an excipient in the drug product. This includes
 * process-related impurities and contaminants, product-related impurities
 * including degradation products.
 */
  impurity?: Array<CodeableReference> | undefined;
  _impurity?: Element[] | undefined;

        
      
        
          
  /**
 * Description of indication(s) for this product, used when structured indications
 * are not required. In cases where structured indications are required, they are
 * captured using the ClinicalUseDefinition resource. An indication is a medical
 * situation for which using the product is appropriate.
 */
  indication?: string | undefined;
  _indication?: Element | undefined;

        
      
        
          
  /**
 * The ingredients of this medicinal product - when not detailed in other
 * resources. This is only needed if the ingredients are not specified by incoming
 * references from the Ingredient resource, or indirectly via incoming
 * AdministrableProductDefinition, PackagedProductDefinition or
 * ManufacturedItemDefinition references. In cases where those levels of detail are
 * not used, the ingredients may be specified directly here as codes.
 */
  ingredient?: Array<CodeableConcept> | undefined;
  _ingredient?: Element[] | undefined;

        
      
        
          
  /**
 * The legal status of supply of the medicinal product as classified by the
 * regulator.
 */
  legalStatusOfSupply?: CodeableConcept | undefined;
  _legalStatusOfSupply?: Element | undefined;

        
      
        
          
  /**
 * Marketing status of the medicinal product, in contrast to marketing
 * authorization. This refers to the product being actually 'on the market' as
 * opposed to being allowed to be on the market (which is an authorization).
 */
  marketingStatus?: Array<MarketingStatus> | undefined;
  _marketingStatus?: Element[] | undefined;

        
      
        
          
  /**
 * A master file for the medicinal product (e.g. Pharmacovigilance System Master
 * File). Drug master files (DMFs) are documents submitted to regulatory agencies
 * to provide confidential detailed information about facilities, processes or
 * articles used in the manufacturing, processing, packaging and storing of drug
 * products.
 */
  masterFile?: Array<Reference> | undefined;
  _masterFile?: Element[] | undefined;

        
      
        
          
  /**
 * The product's name, including full name and possibly coded parts.
 */
  name: Array<BackboneElement>;
  _name?: Element[] | undefined;

        
      
        
          
  /**
 * Country and jurisdiction where the name applies, and associated language.
 */
  countryLanguage?: Array<BackboneElement> | undefined;
  _countryLanguage?: Element[] | undefined;

        
      
        
          
  /**
 * Country code for where this name applies.
 */
  country: CodeableConcept;
  _country?: Element | undefined;

        
      
        
          
  /**
 * Jurisdiction code for where this name applies. A jurisdiction may be a sub- or
 * supra-national entity (e.g. a state or a geographic region).
 */
  jurisdiction?: CodeableConcept | undefined;
  _jurisdiction?: Element | undefined;

        
      
        
          
  /**
 * Language code for this name.
 */
  language: CodeableConcept;
  _language?: Element | undefined;

        
      
        
          
  /**
 * Coding words or phrases of the name.
 */
  namePart?: Array<BackboneElement> | undefined;
  _namePart?: Element[] | undefined;

        
      
        
          
  /**
 * A fragment of a product name.
 */
  part: string;
  _part?: Element | undefined;

        
      
        
          
  /**
 * Identifying type for this part of the name (e.g. strength part).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The full product name.
 */
  productName: string;
  _productName?: Element | undefined;

        
      
        
          
  /**
 * Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A manufacturing or administrative process or step associated with (or performed
 * on) the medicinal product.
 */
  operation?: Array<BackboneElement> | undefined;
  _operation?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies whether this particular business or manufacturing process is
 * considered proprietary or confidential.
 */
  confidentialityIndicator?: CodeableConcept | undefined;
  _confidentialityIndicator?: Element | undefined;

        
      
        
          
  /**
 * Date range of applicability.
 */
  effectiveDate?: Period | undefined;
  _effectiveDate?: Element | undefined;

        
      
        
          
  /**
 * The organization or establishment responsible for (or associated with) the
 * particular process or step, examples include the manufacturer, importer, agent.
 */
  organization?: Array<Reference> | undefined;
  _organization?: Element[] | undefined;

        
      
        
          
  /**
 * The type of manufacturing operation e.g. manufacturing itself, re-packaging. For
 * the authorization of this, a RegulatedAuthorization would point to the same plan
 * or activity referenced here.
 */
  type?: CodeableReference | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Package type for the product. See also the PackagedProductDefinition resource.
 */
  packagedMedicinalProduct?: Array<CodeableConcept> | undefined;
  _packagedMedicinalProduct?: Element[] | undefined;

        
      
        
          
  /**
 * If authorised for use in children, or infants, neonates etc.
 */
  pediatricUseIndicator?: CodeableConcept | undefined;
  _pediatricUseIndicator?: Element | undefined;

        
      
        
          
  /**
 * The path by which the product is taken into or makes contact with the body. In
 * some regions this is referred to as the licenced or approved route. See also
 * AdministrableProductDefinition resource. MedicinalProductDefinition.route is the
 * same concept as AdministrableProductDefinition.routeOfAdministration.code, and
 * they cannot be used together.
 */
  route?: Array<CodeableConcept> | undefined;
  _route?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the Medicinal Product is subject to special measures for regulatory
 * reasons, such as a requirement to conduct post-authorisation studies.
 */
  specialMeasures?: Array<CodeableConcept> | undefined;
  _specialMeasures?: Element[] | undefined;

        
      
        
          
  /**
 * The status within the lifecycle of this product record. A high-level status,
 * this is not intended to duplicate details carried elsewhere such as legal
 * status, or authorization status.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The date at which the given status became applicable.
 */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;

        
      
        
          
  /**
 * Regulatory type, e.g. Investigational or Authorized.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A business identifier relating to a specific version of the product, this is
 * commonly used to support revisions to an existing product.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * MessageDefinition
 * 
 * Defines the characteristics of a message that can be shared between systems,
 * including the type of event that initiates the message, the content to be
 * transmitted and what response(s), if any, are permitted.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MessageDefinition.html}
 */
    export interface MessageDefinition extends DomainResource {
      
      readonly resourceType: "MessageDefinition";
      

      
        
          
  /**
 * Indicates what types of messages may be sent as an application-level response to
 * this message.
 * This indicates an application level response to "close" a transaction implicit
 * in a particular request message.  To define a complete workflow scenario, look
 * to the [[PlanDefinition]] resource which allows the definition of complex
 * orchestrations, conditionality, etc.
 */
  allowedResponse?: Array<BackboneElement> | undefined;
  _allowedResponse?: Element[] | undefined;

        
      
        
          
  /**
 * A reference to the message definition that must be adhered to by this supported
 * response.
 */
  message: string;
  _message?: Element | undefined;

        
      
        
          
  /**
 * Provides a description of the circumstances in which this response should be
 * used (as opposed to one of the alternative responses).
 */
  situation?: string | undefined;
  _situation?: Element | undefined;

        
      
        
          
  /**
 * The MessageDefinition that is the basis for the contents of this resource.
 */
  base?: string | undefined;
  _base?: Element | undefined;

        
      
        
          
  /**
 * The impact of the content of the message.
 */
  category?: string | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the message definition and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the message definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the message definition was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the message definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the message definition. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date: string;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the message definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the message
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the message definition as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the message definition is presumed
 * to be the predominant language in the place the message definition was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
            
  /**
 * Event code or link to the EventDefinition.
 */
  eventCoding?: Coding | undefined;
  _eventCoding?: Element | undefined;

          
            
  /**
 * Event code or link to the EventDefinition.
 */
  eventUri?: string | undefined;
  _eventUri?: Element | undefined;

          
        
      
        
          
  /**
 * A Boolean value to indicate that this message definition is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of message definitions that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * Identifies the resource (or resources) that are being addressed by the event.
 * For example, the Encounter for an admit message or two Account records for a
 * merge.
 */
  focus?: Array<BackboneElement> | undefined;
  _focus?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of resource that must be the focus for this message.
 * Multiple focuses addressing different resources may occasionally occur.  E.g. to
 * link or unlink a resource from a particular account or encounter, etc.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Identifies the maximum number of resources of this type that must be pointed to
 * by a message in order for it to be valid against this MessageDefinition.
 */
  max?: string | undefined;
  _max?: Element | undefined;

        
      
        
          
  /**
 * Identifies the minimum number of resources of this type that must be pointed to
 * by a message in order for it to be valid against this MessageDefinition.
 */
  min: unsignedInt;
  _min?: Element | undefined;

        
      
        
          
  /**
 * A profile that reflects constraints for the focal resource (and potentially for
 * related resources).
 * This should be present for most message definitions.  However, if the message
 * focus is only a single resource and there is no need to include referenced
 * resources or otherwise enforce the presence of particular elements, it can be
 * omitted.
 */
  profile?: string | undefined;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * Canonical reference to a GraphDefinition. If a URL is provided, it is the
 * canonical reference to a [GraphDefinition](graphdefinition.html) that it
 * controls what resources are to be added to the bundle when building the
 * document. The GraphDefinition can also specify profiles that apply to the
 * various resources.
 */
  graph?: Array<string> | undefined;
  _graph?: Element[] | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this message definition when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this message definition outside of
 * FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the message definition is intended to be
 * used.
 * It may be possible for the message definition to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the message definition. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Identifies a protocol or workflow that this MessageDefinition represents a step
 * in.
 * It should be possible to use MessageDefinition to describe a message to be used
 * by certain steps in a particular protocol as part of a PlanDefinition or
 * ActivityDefinition.
 */
  parent?: Array<string> | undefined;
  _parent?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the message
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the message definition is the organization or individual primarily responsible
 * for the maintenance and upkeep of the message definition. This is not
 * necessarily the same individual or organization that developed and initially
 * authored the content. The publisher is the primary point of contact for
 * questions or issues with the message definition. This item SHOULD be populated
 * unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this message definition is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the message definition. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this message definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * A MessageDefinition that is superseded by this definition.
 */
  replaces?: Array<string> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
  /**
 * Declare at a message definition level whether a response is required or only
 * upon error or success, or never.
 * This enables the capability currently available through MSH-16 (Application
 * Level acknowledgement) in HL7 Version 2 to declare at a message instance level
 * whether a response is required or only upon error or success, or never.
 */
  responseRequired?: string | undefined;
  _responseRequired?: Element | undefined;

        
      
        
          
  /**
 * The status of this message definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of message definitions that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the message definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * The business identifier that is used to reference the MessageDefinition and *is*
 * expected to be consistent from server to server.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate message definition
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the message definition
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the message definition author and is not expected to
 * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different message definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the message
 * definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * MessageHeader
 * 
 * The header for a message exchange that is either requesting or responding to an
 * action.  The reference(s) that are the subject of the action as well as other
 * information related to the action are typically transmitted in a bundle in which
 * the MessageHeader resource instance is the first resource in the bundle.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MessageHeader.html}
 */
    export interface MessageHeader extends DomainResource {
      
      readonly resourceType: "MessageHeader";
      

      
        
          
  /**
 * The logical author of the message - the person or device that decided the
 * described event should happen. When there is more than one candidate, pick the
 * most proximal to the MessageHeader. Can provide other authors in extensions.
 * Usually only for the request but can be used in a response.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * Permanent link to the MessageDefinition for this message.
 */
  definition?: string | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * The destination application which the message is intended for.
 * There SHOULD be at least one destination, but in some circumstances, the source
 * system is unaware of any particular destination system.
 */
  destination?: Array<BackboneElement> | undefined;
  _destination?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates where the message should be routed to.
 * The id may be a non-resolvable URI for systems that do not use standard
 * network-based addresses.
 */
  endpoint: string;
  _endpoint?: Element | undefined;

        
      
        
          
  /**
 * Human-readable name for the target system.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Allows data conveyed by a message to be addressed to a particular person or
 * department when routing to a specific application isn't sufficient.
 */
  receiver?: Reference | undefined;
  _receiver?: Element | undefined;

        
      
        
          
  /**
 * Identifies the target end system in situations where the initial message
 * transmission is to an intermediary system.
 */
  target?: Reference | undefined;
  _target?: Element | undefined;

        
      
        
          
  /**
 * The person or device that performed the data entry leading to this message. When
 * there is more than one candidate, pick the most proximal to the message. Can
 * provide other enterers in extensions.
 * Usually only for the request but can be used in a response.
 */
  enterer?: Reference | undefined;
  _enterer?: Element | undefined;

        
      
        
          
            
  /**
 * Code that identifies the event this message represents and connects it with its
 * definition. Events defined as part of the FHIR specification have the system
 * value "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri
 * to the EventDefinition.
 * The time of the event will be found in the focus resource. The time of the
 * message will be found in
 * [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
 */
  eventCoding?: Coding | undefined;
  _eventCoding?: Element | undefined;

          
            
  /**
 * Code that identifies the event this message represents and connects it with its
 * definition. Events defined as part of the FHIR specification have the system
 * value "http://terminology.hl7.org/CodeSystem/message-events".  Alternatively uri
 * to the EventDefinition.
 * The time of the event will be found in the focus resource. The time of the
 * message will be found in
 * [Bundle.timestamp](bundle-definitions.html#Bundle.timestamp).
 */
  eventUri?: string | undefined;
  _eventUri?: Element | undefined;

          
        
      
        
          
  /**
 * The actual data of the message - a reference to the root/focus class of the
 * event.
 * The data is defined where the transaction type is defined. The transaction data
 * is always included in the bundle that is the full message.  Only the root
 * resource is specified.  The resources it references should be contained in the
 * bundle but are not also listed here.  Multiple repetitions are allowed to cater
 * for merges and other situations with multiple focal targets.
 */
  focus?: Array<Reference> | undefined;
  _focus?: Element[] | undefined;

        
      
        
          
  /**
 * Coded indication of the cause for the event - indicates  a reason for the
 * occurrence of the event that is a focus of this message.
 */
  reason?: CodeableConcept | undefined;
  _reason?: Element | undefined;

        
      
        
          
  /**
 * Information about the message that this message is a response to.  Only present
 * if this message is a response.
 */
  response?: BackboneElement | undefined;
  _response?: Element | undefined;

        
      
        
          
  /**
 * Code that identifies the type of response to the message - whether it was
 * successful or not, and whether it should be resent or not.
 * This is a generic response to the request message. Specific data for the
 * response will be found in MessageHeader.focus.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Full details of any issues found in the message.
 * This SHALL be contained in the bundle. If any of the issues are errors, the
 * response code SHALL be an error.
 */
  details?: Reference | undefined;
  _details?: Element | undefined;

        
      
        
          
  /**
 * The MessageHeader.id of the message to which this message is a response.
 */
  identifier: id;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The person or organization that accepts overall responsibility for the contents
 * of the message. The implication is that the message event happened under the
 * policies of the responsible party.
 * Usually only for the request but can be used in a response.
 */
  responsible?: Reference | undefined;
  _responsible?: Element | undefined;

        
      
        
          
  /**
 * Identifies the sending system to allow the use of a trust relationship.
 * Use case is for where a (trusted) sending system is responsible for multiple
 * organizations, and therefore cannot differentiate based on source endpoint /
 * authentication alone.
 */
  sender?: Reference | undefined;
  _sender?: Element | undefined;

        
      
        
          
  /**
 * The source application from which this message originated.
 */
  source: BackboneElement;
  _source?: Element | undefined;

        
      
        
          
  /**
 * An e-mail, phone, website or other contact point to use to resolve issues with
 * message communications.
 */
  contact?: ContactPoint | undefined;
  _contact?: Element | undefined;

        
      
        
          
  /**
 * Identifies the routing target to send acknowledgements to.
 * The id may be a non-resolvable URI for systems that do not use standard
 * network-based addresses.
 */
  endpoint: string;
  _endpoint?: Element | undefined;

        
      
        
          
  /**
 * Human-readable name for the source system.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * May include configuration or other information useful in debugging.
 */
  software?: string | undefined;
  _software?: Element | undefined;

        
      
        
          
  /**
 * Can convey versions of multiple systems in situations where a message passes
 * through multiple hands.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Meta
 * 
 * Base StructureDefinition for Meta Type: The metadata about a resource. This is
 * content in the resource that is maintained by the infrastructure. Changes to the
 * content might not always be associated with version changes to the resource.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Meta.html}
 */
    export interface Meta extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * When the resource last changed - e.g. when the version changed.
 * This value is always populated except when the resource is first being created.
 * The server / resource manager sets this value; what a client provides is
 * irrelevant. This is equivalent to the HTTP Last-Modified and SHOULD have the
 * same value on a [read](http.html#read) interaction.
 */
  lastUpdated?: string | undefined;
  _lastUpdated?: Element | undefined;

        
      
        
          
  /**
 * A list of profiles (references to
 * [StructureDefinition](structuredefinition.html#) resources) that this resource
 * claims to conform to. The URL is a reference to
 * [StructureDefinition.url](structuredefinition-definitions.html#StructureDefiniti
 * on.url).
 * It is up to the server and/or other infrastructure of policy to determine
 * whether/how these claims are verified and/or updated over time.  The list of
 * profile URLs is a set.
 */
  profile?: Array<string> | undefined;
  _profile?: Element[] | undefined;

        
      
        
          
  /**
 * Security labels applied to this resource. These tags connect specific resources
 * to the overall security policy and infrastructure.
 * The security labels can be updated without changing the stated version of the
 * resource. The list of security labels is a set. Uniqueness is based the
 * system/code, and version and display are ignored.
 */
  security?: Array<Coding> | undefined;
  _security?: Element[] | undefined;

        
      
        
          
  /**
 * A uri that identifies the source system of the resource. This provides a minimal
 * amount of [Provenance](provenance.html#) information that can be used to track
 * or differentiate the source of information in the resource. The source may
 * identify another FHIR server, document, message, database, etc.
 * In the provenance resource, this corresponds to Provenance.entity.what[x]. The
 * exact use of the source (and the implied Provenance.entity.role) is left to
 * implementer discretion. Only one nominated source is allowed; for additional
 * provenance details, a full Provenance resource should be used. 

This element
 * can be used to indicate where the current master source of a resource that has a
 * canonical URL if the resource is no longer hosted at the canonical URL.
 */
  source?: string | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * Tags applied to this resource. Tags are intended to be used to identify and
 * relate resources to process and workflow, and applications are not required to
 * consider the tags when interpreting the meaning of a resource.
 * The tags can be updated without changing the stated version of the resource. The
 * list of tags is a set. Uniqueness is based the system/code, and version and
 * display are ignored.
 */
  tag?: Array<Coding> | undefined;
  _tag?: Element[] | undefined;

        
      
        
          
  /**
 * The version specific identifier, as it appears in the version portion of the
 * URL. This value changes when the resource is created, updated, or deleted.
 * The server assigns this value, and ignores what the client specifies, except in
 * the case that the server is imposing version integrity on updates/deletes.
 */
  versionId?: id | undefined;
  _versionId?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  
    /**
 * MolecularSequence
 * 
 * Raw data describing a biological sequence.
 * 
 * @see {@link http://hl7.org/fhir/R4B/MolecularSequence.html}
 */
    export interface MolecularSequence extends DomainResource {
      
      readonly resourceType: "MolecularSequence";
      

      
        
          
  /**
 * Whether the sequence is numbered starting at 0 (0-based numbering or
 * coordinates, inclusive start, exclusive end) or starting at 1 (1-based
 * numbering, inclusive start and inclusive end).
 */
  coordinateSystem: number;
  _coordinateSystem?: Element | undefined;

        
      
        
          
  /**
 * The method for sequencing, for example, chip information.
 */
  device?: Reference | undefined;
  _device?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier for this particular sequence instance. This is a
 * FHIR-defined id.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Sequence that was observed. It is the result marked by referenceSeq along with
 * variant records on referenceSeq. This shall start from referenceSeq.windowStart
 * and end by referenceSeq.windowEnd.
 */
  observedSeq?: string | undefined;
  _observedSeq?: Element | undefined;

        
      
        
          
  /**
 * The patient whose sequencing results are described by this resource.
 */
  patient?: Reference | undefined;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The organization or lab that should be responsible for this result.
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * Pointer to next atomic sequence which at most contains one variant.
 */
  pointer?: Array<Reference> | undefined;
  _pointer?: Element[] | undefined;

        
      
        
          
  /**
 * An experimental feature attribute that defines the quality of the feature in a
 * quantitative way, such as a phred quality score
 * ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:000168
 * 6)).
 */
  quality?: Array<BackboneElement> | undefined;
  _quality?: Element[] | undefined;

        
      
        
          
  /**
 * End position of the sequence. If the coordinate system is 0-based then end is
 * exclusive and does not include the last position. If the coordinate system is
 * 1-base, then end is inclusive and includes the last position.
 */
  end?: number | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * Harmonic mean of Recall and Precision, computed as: 2 * precision * recall /
 * (precision + recall).
 */
  fScore?: number | undefined;
  _fScore?: Element | undefined;

        
      
        
          
  /**
 * The number of false positives where the non-REF alleles in the Truth and Query
 * Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or
 * similar).
 */
  gtFP?: number | undefined;
  _gtFP?: Element | undefined;

        
      
        
          
  /**
 * Which method is used to get sequence quality.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * QUERY.TP / (QUERY.TP + QUERY.FP).
 */
  precision?: number | undefined;
  _precision?: Element | undefined;

        
      
        
          
  /**
 * False positives, i.e. the number of sites in the Query Call Set for which there
 * is no path through the Truth Call Set that is consistent with this site. Sites
 * with correct variant but incorrect genotype are counted here.
 */
  queryFP?: number | undefined;
  _queryFP?: Element | undefined;

        
      
        
          
  /**
 * True positives, from the perspective of the query data, i.e. the number of sites
 * in the Query Call Set for which there are paths through the Truth Call Set that
 * are consistent with all of the alleles at this site, and for which there is an
 * accurate genotype call for the event.
 */
  queryTP?: number | undefined;
  _queryTP?: Element | undefined;

        
      
        
          
  /**
 * TRUTH.TP / (TRUTH.TP + TRUTH.FN).
 */
  recall?: number | undefined;
  _recall?: Element | undefined;

        
      
        
          
  /**
 * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity
 * tradeoff.
 */
  roc?: BackboneElement | undefined;
  _roc?: Element | undefined;

        
      
        
          
  /**
 * Calculated fScore if the GQ score threshold was set to "score" field value.
 */
  fMeasure?: Array<number> | undefined;
  _fMeasure?: Element[] | undefined;

        
      
        
          
  /**
 * The number of false negatives if the GQ score threshold was set to "score" field
 * value.
 */
  numFN?: Array<number> | undefined;
  _numFN?: Element[] | undefined;

        
      
        
          
  /**
 * The number of false positives if the GQ score threshold was set to "score" field
 * value.
 */
  numFP?: Array<number> | undefined;
  _numFP?: Element[] | undefined;

        
      
        
          
  /**
 * The number of true positives if the GQ score threshold was set to "score" field
 * value.
 */
  numTP?: Array<number> | undefined;
  _numTP?: Element[] | undefined;

        
      
        
          
  /**
 * Calculated precision if the GQ score threshold was set to "score" field value.
 */
  precision?: Array<number> | undefined;
  _precision?: Element[] | undefined;

        
      
        
          
  /**
 * Invidual data point representing the GQ (genotype quality) score threshold.
 */
  score?: Array<number> | undefined;
  _score?: Element[] | undefined;

        
      
        
          
  /**
 * Calculated sensitivity if the GQ score threshold was set to "score" field value.
 */
  sensitivity?: Array<number> | undefined;
  _sensitivity?: Element[] | undefined;

        
      
        
          
  /**
 * The score of an experimentally derived feature such as a p-value
 * ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:000168
 * 5)).
 */
  score?: Quantity | undefined;
  _score?: Element | undefined;

        
      
        
          
  /**
 * Gold standard sequence used for comparing against.
 */
  standardSequence?: CodeableConcept | undefined;
  _standardSequence?: Element | undefined;

        
      
        
          
  /**
 * Start position of the sequence. If the coordinate system is either 0-based or
 * 1-based, then start position is inclusive.
 */
  start?: number | undefined;
  _start?: Element | undefined;

        
      
        
          
  /**
 * False negatives, i.e. the number of sites in the Truth Call Set for which there
 * is no path through the Query Call Set that is consistent with all of the alleles
 * at this site, or sites for which there is an inaccurate genotype call for the
 * event. Sites with correct variant but incorrect genotype are counted here.
 */
  truthFN?: number | undefined;
  _truthFN?: Element | undefined;

        
      
        
          
  /**
 * True positives, from the perspective of the truth data, i.e. the number of sites
 * in the Truth Call Set for which there are paths through the Query Call Set that
 * are consistent with all of the alleles at this site, and for which there is an
 * accurate genotype call for the event.
 */
  truthTP?: number | undefined;
  _truthTP?: Element | undefined;

        
      
        
          
  /**
 * INDEL / SNP / Undefined variant.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The number of copies of the sequence of interest. (RNASeq).
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Coverage (read depth or depth) is the average number of reads representing a
 * given nucleotide in the reconstructed sequence.
 */
  readCoverage?: number | undefined;
  _readCoverage?: Element | undefined;

        
      
        
          
  /**
 * A sequence that is used as a reference to describe variants that are present in
 * a sequence analyzed.
 */
  referenceSeq?: BackboneElement | undefined;
  _referenceSeq?: Element | undefined;

        
      
        
          
  /**
 * Structural unit composed of a nucleic acid molecule which controls its own
 * replication through the interaction of specific proteins at one or more origins
 * of replication
 * ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:000034
 * 0)).
 */
  chromosome?: CodeableConcept | undefined;
  _chromosome?: Element | undefined;

        
      
        
          
  /**
 * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh
 * 37'.  Version number must be included if a versioned release of a primary build
 * was used.
 */
  genomeBuild?: string | undefined;
  _genomeBuild?: Element | undefined;

        
      
        
          
  /**
 * A relative reference to a DNA strand based on gene orientation. The strand that
 * contains the open reading frame of the gene is the "sense" strand, and the
 * opposite complementary strand is the "antisense" strand.
 */
  orientation?: string | undefined;
  _orientation?: Element | undefined;

        
      
        
          
  /**
 * Reference identifier of reference sequence submitted to NCBI. It must match the
 * type in the MolecularSequence.type field. For example, the prefix, “NG_”
 * identifies reference sequence for genes, “NM_” for messenger RNA transcripts,
 * and “NP_” for amino acid sequences.
 */
  referenceSeqId?: CodeableConcept | undefined;
  _referenceSeqId?: Element | undefined;

        
      
        
          
  /**
 * A pointer to another MolecularSequence entity as reference sequence.
 */
  referenceSeqPointer?: Reference | undefined;
  _referenceSeqPointer?: Element | undefined;

        
      
        
          
  /**
 * A string like "ACGT".
 */
  referenceSeqString?: string | undefined;
  _referenceSeqString?: Element | undefined;

        
      
        
          
  /**
 * An absolute reference to a strand. The Watson strand is the strand whose 5'-end
 * is on the short arm of the chromosome, and the Crick strand as the one whose
 * 5'-end is on the long arm.
 */
  strand?: string | undefined;
  _strand?: Element | undefined;

        
      
        
          
  /**
 * End position of the window on the reference sequence. If the coordinate system
 * is 0-based then end is exclusive and does not include the last position. If the
 * coordinate system is 1-base, then end is inclusive and includes the last
 * position.
 */
  windowEnd?: number | undefined;
  _windowEnd?: Element | undefined;

        
      
        
          
  /**
 * Start position of the window on the reference sequence. If the coordinate system
 * is either 0-based or 1-based, then start position is inclusive.
 */
  windowStart?: number | undefined;
  _windowStart?: Element | undefined;

        
      
        
          
  /**
 * Configurations of the external repository. The repository shall store target's
 * observedSeq or records related with target's observedSeq.
 */
  repository?: Array<BackboneElement> | undefined;
  _repository?: Element[] | undefined;

        
      
        
          
  /**
 * Id of the variant in this external repository. The server will understand how to
 * use this id to call for more info about datasets in external repository.
 */
  datasetId?: string | undefined;
  _datasetId?: Element | undefined;

        
      
        
          
  /**
 * URI of an external repository which contains further details about the genetics
 * data.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Id of the read in this external repository.
 */
  readsetId?: string | undefined;
  _readsetId?: Element | undefined;

        
      
        
          
  /**
 * Click and see / RESTful API / Need login to see / RESTful API with
 * authentication / Other ways to see resource.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * URI of an external repository which contains further details about the genetics
 * data.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * Id of the variantset in this external repository. The server will understand how
 * to use this id to call for more info about variantsets in external repository.
 */
  variantsetId?: string | undefined;
  _variantsetId?: Element | undefined;

        
      
        
          
  /**
 * Specimen used for sequencing.
 */
  specimen?: Reference | undefined;
  _specimen?: Element | undefined;

        
      
        
          
  /**
 * Information about chromosome structure variation.
 */
  structureVariant?: Array<BackboneElement> | undefined;
  _structureVariant?: Element[] | undefined;

        
      
        
          
  /**
 * Used to indicate if the outer and inner start-end values have the same meaning.
 */
  exact?: boolean | undefined;
  _exact?: Element | undefined;

        
      
        
          
  /**
 * Structural variant inner.
 */
  inner?: BackboneElement | undefined;
  _inner?: Element | undefined;

        
      
        
          
  /**
 * Structural variant inner end. If the coordinate system is 0-based then end is
 * exclusive and does not include the last position. If the coordinate system is
 * 1-base, then end is inclusive and includes the last position.
 */
  end?: number | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * Structural variant inner start. If the coordinate system is either 0-based or
 * 1-based, then start position is inclusive.
 */
  start?: number | undefined;
  _start?: Element | undefined;

        
      
        
          
  /**
 * Length of the variant chromosome.
 */
  length?: number | undefined;
  _length?: Element | undefined;

        
      
        
          
  /**
 * Structural variant outer.
 */
  outer?: BackboneElement | undefined;
  _outer?: Element | undefined;

        
      
        
          
  /**
 * Structural variant outer end. If the coordinate system is 0-based then end is
 * exclusive and does not include the last position. If the coordinate system is
 * 1-base, then end is inclusive and includes the last position.
 */
  end?: number | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * Structural variant outer start. If the coordinate system is either 0-based or
 * 1-based, then start position is inclusive.
 */
  start?: number | undefined;
  _start?: Element | undefined;

        
      
        
          
  /**
 * Information about chromosome structure variation DNA change type.
 */
  variantType?: CodeableConcept | undefined;
  _variantType?: Element | undefined;

        
      
        
          
  /**
 * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The definition of variant here originates from Sequence ontology
 * ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_o
 * f)). This element can represent amino acid or nucleic sequence change(including
 * insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment
 * variation with the assist of CIGAR string.
 */
  variant?: Array<BackboneElement> | undefined;
  _variant?: Element[] | undefined;

        
      
        
          
  /**
 * Extended CIGAR string for aligning the sequence with reference bases. See
 * detailed documentation
 * [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault
 * /Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
 */
  cigar?: string | undefined;
  _cigar?: Element | undefined;

        
      
        
          
  /**
 * End position of the variant on the reference sequence. If the coordinate system
 * is 0-based then end is exclusive and does not include the last position. If the
 * coordinate system is 1-base, then end is inclusive and includes the last
 * position.
 */
  end?: number | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * An allele is one of a set of coexisting sequence variants of a gene
 * ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:000102
 * 3)).  Nucleotide(s)/amino acids from start position of sequence to stop position
 * of sequence on the positive (+) strand of the observed  sequence. When the
 * sequence  type is DNA, it should be the sequence on the positive (+) strand.
 * This will lay in the range between variant.start and variant.end.
 */
  observedAllele?: string | undefined;
  _observedAllele?: Element | undefined;

        
      
        
          
  /**
 * An allele is one of a set of coexisting sequence variants of a gene
 * ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:000102
 * 3)). Nucleotide(s)/amino acids from start position of sequence to stop position
 * of sequence on the positive (+) strand of the reference sequence. When the
 * sequence  type is DNA, it should be the sequence on the positive (+) strand.
 * This will lay in the range between variant.start and variant.end.
 */
  referenceAllele?: string | undefined;
  _referenceAllele?: Element | undefined;

        
      
        
          
  /**
 * Start position of the variant on the  reference sequence. If the coordinate
 * system is either 0-based or 1-based, then start position is inclusive.
 */
  start?: number | undefined;
  _start?: Element | undefined;

        
      
        
          
  /**
 * A pointer to an Observation containing variant information.
 */
  variantPointer?: Reference | undefined;
  _variantPointer?: Element | undefined;

        
      
    }

  


  
    /**
 * Money
 * 
 * Base StructureDefinition for Money Type: An amount of economic utility in some
 * recognized currency.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Money.html}
 */
    export interface Money extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * ISO 4217 Currency Code.
 */
  currency?: string | undefined;
  _currency?: Element | undefined;

        
      
        
          
  /**
 * Numerical value (with implicit precision).
 * Monetary values have their own rules for handling precision (refer to standard
 * accounting text books).
 */
  value?: number | undefined;
  _value?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  
    /**
 * NamingSystem
 * 
 * A curated namespace that issues unique symbols within that namespace for the
 * identification of concepts, people, devices, etc.  Represents a "System" used
 * within the Identifier and Coding data types.
 * 
 * @see {@link http://hl7.org/fhir/R4B/NamingSystem.html}
 */
    export interface NamingSystem extends DomainResource {
      
      readonly resourceType: "NamingSystem";
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the naming system was published. The date
 * must change when the business version changes and it must change if the status
 * code changes. In addition, it should change when the substantive content of the
 * naming system changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the naming system. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date: string;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the naming system from a consumer's
 * perspective. Details about what the namespace identifies including scope,
 * granularity, version labeling, etc.
 * This description can be used to capture details such as why the naming system
 * was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the naming system as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the naming system is presumed to be
 * the predominant language in the place the naming system was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the naming system is intended to be used.
 * It may be possible for the naming system to be used in jurisdictions other than
 * those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the purpose for the naming system - what kinds of things does it make
 * unique?
 */
  kind: string;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the naming system. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing
 * friendly.The"symbolic name" for an OID would be captured as an extension.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the naming system.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the naming system is the organization or individual primarily responsible for
 * the maintenance and upkeep of the naming system. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the naming system. This item SHOULD be populated unless the information is
 * available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization that is responsible for issuing identifiers or
 * codes for this namespace and ensuring their non-collision.
 * This is the primary organization.  Responsibility for some aspects of a
 * namespace may be delegated.
 */
  responsible?: string | undefined;
  _responsible?: Element | undefined;

        
      
        
          
  /**
 * The status of this naming system. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of naming systems that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Categorizes a naming system for easier search by grouping related naming
 * systems.
 * This will most commonly be used for identifier namespaces, but categories could
 * potentially be useful for code systems and authorities as well.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Indicates how the system may be identified when referenced in electronic
 * exchange.
 * Multiple identifiers may exist, either due to duplicate registration, regional
 * rules, needs of different communication technologies, etc.
 */
  uniqueId: Array<BackboneElement>;
  _uniqueId?: Element[] | undefined;

        
      
        
          
  /**
 * Notes about the past or intended usage of this identifier.
 * e.g. "must be used in Germany" or "was initially published in error with this
 * value".
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Identifies the period of time over which this identifier is considered
 * appropriate to refer to the naming system.  Outside of this window, the
 * identifier might be non-deterministic.
 * Within a registry, a given identifier should only be "active" for a single
 * namespace at a time.  (Ideally, an identifier should only ever be associated
 * with a single namespace across all time).
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether this identifier is the "preferred" identifier of this type.
 */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;

        
      
        
          
  /**
 * Identifies the unique identifier scheme used for this particular identifier.
 * Different identifier types may be used in different types of communications
 * (OIDs for v3, URIs for FHIR, etc.).  Other includes RUIDs from v3, standard v2
 * code name strings, etc.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The string that should be sent over the wire to identify the code system or
 * identifier system.
 * If the value is a URI intended for use as FHIR system identifier, the URI should
 * not contain "\" or "?" or "," since this makes escaping very difficult.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * Provides guidance on the use of the namespace, including the handling of
 * formatting characters, use of upper vs. lower case, etc.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate naming system
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
    }

  


  
    /**
 * Narrative
 * 
 * Base StructureDefinition for Narrative Type: A human-readable summary of the
 * resource conveying the essential clinical and business information for the
 * resource.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Narrative.html}
 */
    export interface Narrative extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The actual narrative content, a stripped down version of XHTML.
 * The contents of the html element are an XHTML fragment containing only the basic
 * html formatting elements described in chapters 7-11 and 15 of the HTML 4.0
 * standard, <a> elements (either name or href), images and internally contained
 * stylesheets. The XHTML content SHALL NOT contain a head, a body, external
 * stylesheet references, scripts, forms, base/link/xlink, frames, iframes and
 * objects.
 */
  div: xhtml;
  _div?: Element | undefined;

        
      
        
          
  /**
 * The status of the narrative - whether it's entirely generated (from just the
 * defined data or the extensions too), or whether a human authored it and it may
 * contain additional data.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * NutritionOrder
 * 
 * A request to supply a diet, formula feeding (enteral) or oral nutritional
 * supplement to a patient/resident.
 * 
 * @see {@link http://hl7.org/fhir/R4B/NutritionOrder.html}
 */
    export interface NutritionOrder extends DomainResource {
      
      readonly resourceType: "NutritionOrder";
      

      
        
          
  /**
 * A link to a record of allergies or intolerances  which should be included in the
 * nutrition order.
 * Information on a patient's food allergies and intolerances to inform healthcare
 * personnel about the type of foods that the patient shouldn't receive or consume.
 */
  allergyIntolerance?: Array<Reference> | undefined;
  _allergyIntolerance?: Element[] | undefined;

        
      
        
          
  /**
 * The date and time that this nutrition order was requested.
 */
  dateTime: string;
  _dateTime?: Element | undefined;

        
      
        
          
  /**
 * An encounter that provides additional information about the healthcare context
 * in which this request is made.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Feeding provided through the gastrointestinal tract via a tube, catheter, or
 * stoma that delivers nutrition distal to the oral cavity.
 */
  enteralFormula?: BackboneElement | undefined;
  _enteralFormula?: Element | undefined;

        
      
        
          
  /**
 * The product or brand name of the type of modular component to be added to the
 * formula.
 */
  additiveProductName?: string | undefined;
  _additiveProductName?: Element | undefined;

        
      
        
          
  /**
 * Indicates the type of modular component such as protein, carbohydrate, fat or
 * fiber to be provided in addition to or mixed with the base formula.
 */
  additiveType?: CodeableConcept | undefined;
  _additiveType?: Element | undefined;

        
      
        
          
  /**
 * Formula administration instructions as structured data.  This repeating
 * structure allows for changing the administration rate or volume over time for
 * both bolus and continuous feeding.  An example of this would be an instruction
 * to increase the rate of continuous feeding every 2 hours.
 * See implementation notes below for further discussion on how to order continuous
 * vs bolus enteral feeding using this resource.
 */
  administration?: Array<BackboneElement> | undefined;
  _administration?: Element[] | undefined;

        
      
        
          
  /**
 * The volume of formula to provide to the patient per the specified administration
 * schedule.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
            
  /**
 * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour,
 * according to the specified schedule.
 * Ratio is used when the quantity value in the denominator is not "1", otherwise
 * use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus
 * the Quantity datatype for "50 mL/hr".
 */
  rateQuantity?: Quantity | undefined;
  _rateQuantity?: Element | undefined;

          
            
  /**
 * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour,
 * according to the specified schedule.
 * Ratio is used when the quantity value in the denominator is not "1", otherwise
 * use Quantity. For example, the Ratio datatype is used for "200 mL/4 hrs" versus
 * the Quantity datatype for "50 mL/hr".
 */
  rateRatio?: Ratio | undefined;
  _rateRatio?: Element | undefined;

          
        
      
        
          
  /**
 * The time period and frequency at which the enteral formula should be delivered
 * to the patient.
 */
  schedule?: Timing | undefined;
  _schedule?: Element | undefined;

        
      
        
          
  /**
 * Free text formula administration, feeding instructions or additional
 * instructions or information.
 * Free text dosage instructions can be used for cases where the instructions are
 * too complex to code.
 */
  administrationInstruction?: string | undefined;
  _administrationInstruction?: Element | undefined;

        
      
        
          
  /**
 * The product or brand name of the enteral or infant formula product such as "ACME
 * Adult Standard Formula".
 */
  baseFormulaProductName?: string | undefined;
  _baseFormulaProductName?: Element | undefined;

        
      
        
          
  /**
 * The type of enteral or infant formula such as an adult standard formula with
 * fiber or a soy-based infant formula.
 */
  baseFormulaType?: CodeableConcept | undefined;
  _baseFormulaType?: Element | undefined;

        
      
        
          
  /**
 * The amount of energy (calories) that the formula should provide per specified
 * volume, typically per mL or fluid oz.  For example, an infant may require a
 * formula that provides 24 calories per fluid ounce or an adult may require an
 * enteral formula that provides 1.5 calorie/mL.
 */
  caloricDensity?: Quantity | undefined;
  _caloricDensity?: Element | undefined;

        
      
        
          
  /**
 * The maximum total quantity of formula that may be administered to a subject over
 * the period of time, e.g. 1440 mL over 24 hours.
 */
  maxVolumeToDeliver?: Quantity | undefined;
  _maxVolumeToDeliver?: Element | undefined;

        
      
        
          
  /**
 * The route or physiological path of administration into the patient's
 * gastrointestinal  tract for purposes of providing the formula feeding, e.g.
 * nasogastric tube.
 */
  routeofAdministration?: CodeableConcept | undefined;
  _routeofAdministration?: Element | undefined;

        
      
        
          
  /**
 * This modifier is used to convey Order-specific modifier about the type of oral
 * food or oral fluids that should not be given. These can be derived from patient
 * allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat
 * or  Gluten-Free.  While it should not be necessary to repeat allergy or
 * intolerance information captured in the referenced AllergyIntolerance resource
 * in the excludeFoodModifier, this element may be used to convey additional
 * specificity related to foods that should be eliminated from the patient’s diet
 * for any reason.  This modifier applies to the entire nutrition order inclusive
 * of the oral diet, nutritional supplements and enteral formula feedings.
 * Information on a patient's food allergies, intolerances and preferences to
 * inform healthcare personnel about the type  of foods that the patient shouldn't
 * receive or consume.
 */
  excludeFoodModifier?: Array<CodeableConcept> | undefined;
  _excludeFoodModifier?: Element[] | undefined;

        
      
        
          
  /**
 * This modifier is used to convey order-specific modifiers about the type of food
 * that should be given. These can be derived from patient allergies, intolerances,
 * or preferences such as Halal, Vegan or Kosher. This modifier applies to the
 * entire nutrition order inclusive of the oral diet, nutritional supplements and
 * enteral formula feedings.
 * Information on a patient's food preferences that inform healthcare personnel
 * about the food that the patient should receive or consume.
 */
  foodPreferenceModifier?: Array<CodeableConcept> | undefined;
  _foodPreferenceModifier?: Element[] | undefined;

        
      
        
          
  /**
 * Identifiers assigned to this order by the order sender or by the order receiver.
 * The Identifier.type element can be to indicate filler vs. placer if needed.
 * This is explained in further detail [here](servicerequest.html#notes).
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a protocol, guideline, orderset or other definition that is
 * adhered to in whole or in part by this NutritionOrder.
 */
  instantiates?: Array<string> | undefined;
  _instantiates?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this NutritionOrder.
 * Note: This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this NutritionOrder.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the level of authority/intentionality associated with the NutrionOrder
 * and where the request fits into the workflow chain.
 * When resources map to this element, they are free to define as many codes as
 * necessary to cover their space and will map to "proposal, plan or order".  Can
 * have multiple codes that map to one of these.  E.g. "original order", "encoded
 * order", "reflex order" would all map to "order".  Expectation is that the set of
 * codes is mutually exclusive or a strict all-encompassing hierarchy.
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * Comments made about the {{title}} by the requester, performer, subject or other
 * participants.
 * This element SHALL NOT be used to supply free text instructions for the diet
 * which are represented in the `.oralDiet.instruction`, `supplement.instruction`,
 * or `enteralFormula.administrationInstruction` elements.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Diet given orally in contrast to enteral (tube) feeding.
 */
  oralDiet?: BackboneElement | undefined;
  _oralDiet?: Element | undefined;

        
      
        
          
  /**
 * The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of
 * liquids or fluids served to the patient.
 */
  fluidConsistencyType?: Array<CodeableConcept> | undefined;
  _fluidConsistencyType?: Element[] | undefined;

        
      
        
          
  /**
 * Free text or additional instructions or information pertaining to the oral diet.
 * Free text dosage instructions can be used for cases where the instructions are
 * too complex to code.
 */
  instruction?: string | undefined;
  _instruction?: Element | undefined;

        
      
        
          
  /**
 * Class that defines the quantity and type of nutrient modifications (for example
 * carbohydrate, fiber or sodium) required for the oral diet.
 */
  nutrient?: Array<BackboneElement> | undefined;
  _nutrient?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity of the specified nutrient to include in diet.
 */
  amount?: Quantity | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * The nutrient that is being modified such as carbohydrate or sodium.
 */
  modifier?: CodeableConcept | undefined;
  _modifier?: Element | undefined;

        
      
        
          
  /**
 * The time period and frequency at which the diet should be given.  The diet
 * should be given for the combination of all schedules if more than one schedule
 * is present.
 */
  schedule?: Array<Timing> | undefined;
  _schedule?: Element[] | undefined;

        
      
        
          
  /**
 * Class that describes any texture modifications required for the patient to
 * safely consume various types of solid foods.
 */
  texture?: Array<BackboneElement> | undefined;
  _texture?: Element[] | undefined;

        
      
        
          
  /**
 * The food type(s) (e.g. meats, all foods)  that the texture modification applies
 * to.  This could be all foods types.
 * Coupled with the `texture.modifier`; could be (All Foods).
 */
  foodType?: CodeableConcept | undefined;
  _foodType?: Element | undefined;

        
      
        
          
  /**
 * Any texture modifications (for solid foods) that should be made, e.g. easy to
 * chew, chopped, ground, and pureed.
 * Coupled with the foodType (Meat).
 */
  modifier?: CodeableConcept | undefined;
  _modifier?: Element | undefined;

        
      
        
          
  /**
 * The kind of diet or dietary restriction such as fiber restricted diet or
 * diabetic diet.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * The practitioner that holds legal responsibility for ordering the diet,
 * nutritional supplement, or formula feedings.
 */
  orderer?: Reference | undefined;
  _orderer?: Element | undefined;

        
      
        
          
  /**
 * The person (patient) who needs the nutrition order for an oral diet, nutritional
 * supplement and/or enteral or formula feeding.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The workflow status of the nutrition order/request.
 * Typically the system placing the order sets the status to "requested".
 * Thereafter, the order is maintained by the receiver that updates the status as
 * the request is handled.  This element is labeled as a modifier because the
 * status contains codes that mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Oral nutritional products given in order to add further nutritional value to the
 * patient's diet.
 */
  supplement?: Array<BackboneElement> | undefined;
  _supplement?: Element[] | undefined;

        
      
        
          
  /**
 * Free text or additional instructions or information pertaining to the oral
 * supplement.
 * Free text dosage instructions can be used for cases where the instructions are
 * too complex to code.
 */
  instruction?: string | undefined;
  _instruction?: Element | undefined;

        
      
        
          
  /**
 * The product or brand name of the nutritional supplement such as "Acme Protein
 * Shake".
 */
  productName?: string | undefined;
  _productName?: Element | undefined;

        
      
        
          
  /**
 * The amount of the nutritional supplement to be given.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The time period and frequency at which the supplement(s) should be given.  The
 * supplement should be given for the combination of all schedules if more than one
 * schedule is present.
 */
  schedule?: Array<Timing> | undefined;
  _schedule?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of nutritional supplement product required such as a high protein or
 * pediatric clear liquid supplement.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * NutritionProduct
 * 
 * A food or fluid product that is consumed by patients.
 * 
 * @see {@link http://hl7.org/fhir/R4B/NutritionProduct.html}
 */
    export interface NutritionProduct extends DomainResource {
      
      readonly resourceType: "NutritionProduct";
      

      
        
          
  /**
 * Nutrition products can have different classifications - according to its
 * nutritional properties, preparation methods, etc.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The code assigned to the product, for example a manufacturer number or other
 * terminology.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Ingredients contained in this product.
 */
  ingredient?: Array<BackboneElement> | undefined;
  _ingredient?: Element[] | undefined;

        
      
        
          
  /**
 * The amount of ingredient that is in the product.
 */
  amount?: Array<Ratio> | undefined;
  _amount?: Element[] | undefined;

        
      
        
          
  /**
 * The ingredient contained in the product.
 */
  item: CodeableReference;
  _item?: Element | undefined;

        
      
        
          
  /**
 * Conveys instance-level information about this product item. One or several
 * physical, countable instances or occurrences of the product.
 */
  instance?: BackboneElement | undefined;
  _instance?: Element | undefined;

        
      
        
          
  /**
 * The time after which the product is no longer expected to be in proper
 * condition, or its use is not advised or not allowed.
 */
  expiry?: string | undefined;
  _expiry?: Element | undefined;

        
      
        
          
  /**
 * The identifier for the physical instance, typically a serial number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The identification of the batch or lot of the product.
 */
  lotNumber?: string | undefined;
  _lotNumber?: Element | undefined;

        
      
        
          
  /**
 * The amount of items or instances that the resource considers, for instance when
 * referring to 2 identical units together.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The time after which the product is no longer expected to be in proper
 * condition, or its use is not advised or not allowed.
 */
  useBy?: string | undefined;
  _useBy?: Element | undefined;

        
      
        
          
  /**
 * Allergens that are known or suspected to be a part of this nutrition product.
 */
  knownAllergen?: Array<CodeableReference> | undefined;
  _knownAllergen?: Element[] | undefined;

        
      
        
          
  /**
 * The organisation (manufacturer, representative or legal authorisation holder)
 * that is responsible for the device.
 */
  manufacturer?: Array<Reference> | undefined;
  _manufacturer?: Element[] | undefined;

        
      
        
          
  /**
 * Comments made about the product.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The product's nutritional information expressed by the nutrients.
 * Note: This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  nutrient?: Array<BackboneElement> | undefined;
  _nutrient?: Element[] | undefined;

        
      
        
          
  /**
 * The amount of nutrient expressed in one or more units: X per pack / per serving
 * / per dose.
 */
  amount?: Array<Ratio> | undefined;
  _amount?: Element[] | undefined;

        
      
        
          
  /**
 * The (relevant) nutrients in the product.
 */
  item?: CodeableReference | undefined;
  _item?: Element | undefined;

        
      
        
          
  /**
 * Specifies descriptive properties of the nutrition product.
 */
  productCharacteristic?: Array<BackboneElement> | undefined;
  _productCharacteristic?: Element[] | undefined;

        
      
        
          
  /**
 * A code specifying which characteristic of the product is being described (for
 * example, colour, shape).
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * The actual characteristic value corresponding to the type.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The actual characteristic value corresponding to the type.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The actual characteristic value corresponding to the type.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The actual characteristic value corresponding to the type.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
            
  /**
 * The actual characteristic value corresponding to the type.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * The actual characteristic value corresponding to the type.
 * The description should be provided as a CodeableConcept, SimpleQuantity or an
 * image.  The description can be a string only when these others are not
 * available.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
        
      
        
          
  /**
 * The current state of the product.
 * Unknown does not represent "other" - one of the defined statuses must apply.
 * Unknown is used when the authoring system is not sure what the current status
 * is.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * Observation
 * 
 * Measurements and simple assertions made about a patient, device or other
 * subject.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Observation.html}
 */
    export interface Observation extends DomainResource {
      
      readonly resourceType: "Observation";
      

      
        
          
  /**
 * A plan, proposal or order that is fulfilled in whole or in part by this event.
 * For example, a MedicationRequest may require a patient to have laboratory test
 * performed before  it is dispensed.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the site on the subject's body where the observation was made (i.e.
 * the target site).
 * Only used if not implicit in code found in Observation.code.  In many systems,
 * this may be represented as a related observation instead of an inline component.
 * If the use case requires BodySite to be handled as a separate resource (e.g.
 * to identify and track separately) then use the standard extension[
 * bodySite](extension-bodysite.html).
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
  /**
 * A code that classifies the general type of observation being made.
 * In addition to the required category valueset, this element allows various
 * categorization schemes based on the owner’s definition of the category and
 * effectively multiple categories can be used at once.  The level of granularity
 * is defined by the category concepts in the value set.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Describes what was observed. Sometimes this is called the observation "name".
 * *All* code-value and, if present, component.code-component.value pairs need to
 * be taken into account to correctly understand the meaning of the observation.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Some observations have multiple component observations.  These component
 * observations are expressed as separate code value pairs that share the same
 * attributes.  Examples include systolic and diastolic component observations for
 * blood pressure measurement and multiple component observations for genetics
 * observations.
 * For a discussion on the ways Observations can be assembled in groups together
 * see [Notes](observation.html#notes) below.
 */
  component?: Array<BackboneElement> | undefined;
  _component?: Element[] | undefined;

        
      
        
          
  /**
 * Describes what was observed. Sometimes this is called the observation "code".
 * *All* code-value and  component.code-component.value pairs need to be taken into
 * account to correctly understand the meaning of the observation.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Provides a reason why the expected value in the element
 * Observation.component.value[x] is missing.
 * "Null" or exceptional values can be represented two ways in FHIR Observations.
 * One way is to simply include them in the value set and represent the exceptions
 * in the value.  For example, measurement values for a serology test could be
 * "detected", "not detected", "inconclusive", or  "test not done". 

The alternate
 * way is to use the value element for actual observations and use the explicit
 * dataAbsentReason element to record exceptional values.  For example, the
 * dataAbsentReason code "error" could be used when the measurement was not
 * completed.  Because of these options, use-case agreements are required to
 * interpret general observations for exceptional values.
 */
  dataAbsentReason?: CodeableConcept | undefined;
  _dataAbsentReason?: Element | undefined;

        
      
        
          
  /**
 * A categorical assessment of an observation value.  For example, high, low,
 * normal.
 * Historically used for laboratory results (known as 'abnormal flag' ),  its use
 * extends to other use cases where coded interpretations  are relevant.  Often
 * reported as one or more simple compact codes this element is often placed
 * adjacent to the result value in reports and flow sheets to signal the
 * meaning/normalcy status of the result.
 */
  interpretation?: Array<CodeableConcept> | undefined;
  _interpretation?: Element[] | undefined;

        
      
        
          
  /**
 * Guidance on how to interpret the value by comparison to a normal or recommended
 * range.
 * Most observations only have one generic reference range. Systems MAY choose to
 * restrict to only supplying the relevant reference range based on knowledge about
 * the patient (e.g., specific to the patient's age, gender, weight and other
 * factors), but this might not be possible or appropriate. Whenever more than one
 * reference range is supplied, the differences between them SHOULD be provided in
 * the reference range and/or age properties.
 */
  referenceRange?: Array<undefined> | undefined;
  _referenceRange?: Element[] | undefined;

        
      
        
          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueRatio?: Ratio | undefined;
  _valueRatio?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueSampledData?: SampledData | undefined;
  _valueSampledData?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * Used when observation has a set of component observations. An observation may
 * have both a value (e.g. an  Apgar score)  and component observations (the
 * observations from which the Apgar score was derived). If a value is present, the
 * datatype for this element should be determined by Observation.code. A
 * CodeableConcept with just a text would be used instead of a string if the field
 * was usually coded, or if the type associated with the Observation.code defines a
 * coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Provides a reason why the expected value in the element Observation.value[x] is
 * missing.
 * Null or exceptional values can be represented two ways in FHIR Observations.
 * One way is to simply include them in the value set and represent the exceptions
 * in the value.  For example, measurement values for a serology test could be
 * "detected", "not detected", "inconclusive", or  "specimen unsatisfactory".
 * The alternate way is to use the value element for actual observations and use
 * the explicit dataAbsentReason element to record exceptional values.  For
 * example, the dataAbsentReason code "error" could be used when the measurement
 * was not completed. Note that an observation may only be reported if there are
 * values to report. For example differential cell counts values may be reported
 * only when > 0.  Because of these options, use-case agreements are required to
 * interpret general observations for null or exceptional values.
 */
  dataAbsentReason?: CodeableConcept | undefined;
  _dataAbsentReason?: Element | undefined;

        
      
        
          
  /**
 * The target resource that represents a measurement from which this observation
 * value is derived. For example, a calculated anion gap or a fetal measurement
 * based on an ultrasound image.
 * All the reference choices that are listed in this element can represent clinical
 * observations and other measurements that may be the source for a derived value.
 * The most common reference will be another Observation.  For a discussion on the
 * ways Observations can assembled in groups together, see
 * [Notes](observation.html#obsgrouping) below.
 */
  derivedFrom?: Array<Reference> | undefined;
  _derivedFrom?: Element[] | undefined;

        
      
        
          
  /**
 * The device used to generate the observation data.
 * Note that this is not meant to represent a device involved in the transmission
 * of the result, e.g., a gateway.  Such devices may be documented using the
 * Provenance resource where relevant.
 */
  device?: Reference | undefined;
  _device?: Element | undefined;

        
      
        
          
            
  /**
 * The time or time-period the observed value is asserted as being true. For
 * biological subjects - e.g. human patients - this is usually called the
 * "physiologically relevant time". This is usually either the time of the
 * procedure or of specimen collection, but very often the source of the date/time
 * is not known, only the date/time itself.
 * At least a date should be present unless this observation is a historical
 * report.  For recording imprecise or "fuzzy" times (For example, a blood glucose
 * measurement taken "after breakfast") use the [Timing](datatypes.html#timing)
 * datatype which allow the measurement to be tied to regular life events.
 */
  effectiveDateTime?: string | undefined;
  _effectiveDateTime?: Element | undefined;

          
            
  /**
 * The time or time-period the observed value is asserted as being true. For
 * biological subjects - e.g. human patients - this is usually called the
 * "physiologically relevant time". This is usually either the time of the
 * procedure or of specimen collection, but very often the source of the date/time
 * is not known, only the date/time itself.
 * At least a date should be present unless this observation is a historical
 * report.  For recording imprecise or "fuzzy" times (For example, a blood glucose
 * measurement taken "after breakfast") use the [Timing](datatypes.html#timing)
 * datatype which allow the measurement to be tied to regular life events.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

          
            
  /**
 * The time or time-period the observed value is asserted as being true. For
 * biological subjects - e.g. human patients - this is usually called the
 * "physiologically relevant time". This is usually either the time of the
 * procedure or of specimen collection, but very often the source of the date/time
 * is not known, only the date/time itself.
 * At least a date should be present unless this observation is a historical
 * report.  For recording imprecise or "fuzzy" times (For example, a blood glucose
 * measurement taken "after breakfast") use the [Timing](datatypes.html#timing)
 * datatype which allow the measurement to be tied to regular life events.
 */
  effectiveTiming?: Timing | undefined;
  _effectiveTiming?: Element | undefined;

          
            
  /**
 * The time or time-period the observed value is asserted as being true. For
 * biological subjects - e.g. human patients - this is usually called the
 * "physiologically relevant time". This is usually either the time of the
 * procedure or of specimen collection, but very often the source of the date/time
 * is not known, only the date/time itself.
 * At least a date should be present unless this observation is a historical
 * report.  For recording imprecise or "fuzzy" times (For example, a blood glucose
 * measurement taken "after breakfast") use the [Timing](datatypes.html#timing)
 * datatype which allow the measurement to be tied to regular life events.
 */
  effectiveInstant?: string | undefined;
  _effectiveInstant?: Element | undefined;

          
        
      
        
          
  /**
 * The healthcare event  (e.g. a patient and healthcare provider interaction)
 * during which this observation is made.
 * This will typically be the encounter the event occurred within, but some events
 * may be initiated prior to or after the official completion of an encounter but
 * still be tied to the context of the encounter (e.g. pre-admission laboratory
 * tests).
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * The actual focus of an observation when it is not the patient of record
 * representing something or someone associated with the patient such as a spouse,
 * parent, fetus, or donor. For example, fetus observations in a mother's record.
 * The focus of an observation could also be an existing condition,  an
 * intervention, the subject's diet,  another observation of the subject,  or a
 * body structure such as tumor or implanted device.   An example use case would be
 * using the Observation resource to capture whether the mother is trained to
 * change her child's tracheostomy tube. In this example, the child is the patient
 * of record and the mother is the focus.
 * Typically, an observation is made about the subject - a patient, or group of
 * patients, location, or device - and the distinction between the subject and what
 * is directly measured for an observation is specified in the observation code
 * itself ( e.g., "Blood Glucose") and does not need to be represented separately
 * using this element.  Use `specimen` if a reference to a specimen is required.
 * If a code is required instead of a resource use either  `bodysite` for bodysites
 * or the standard extension [focusCode](extension-observation-focuscode.html).
 */
  focus?: Array<Reference> | undefined;
  _focus?: Element[] | undefined;

        
      
        
          
  /**
 * This observation is a group observation (e.g. a battery, a panel of tests, a set
 * of vital sign measurements) that includes the target as a member of the group.
 * When using this element, an observation will typically have either a value or a
 * set of related resources, although both may be present in some cases.  For a
 * discussion on the ways Observations can assembled in groups together, see
 * [Notes](observation.html#obsgrouping) below.  Note that a system may calculate
 * results from [QuestionnaireResponse](questionnaireresponse.html)  into a final
 * score and represent the score as an Observation.
 */
  hasMember?: Array<Reference> | undefined;
  _hasMember?: Element[] | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this observation.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A categorical assessment of an observation value.  For example, high, low,
 * normal.
 * Historically used for laboratory results (known as 'abnormal flag' ),  its use
 * extends to other use cases where coded interpretations  are relevant.  Often
 * reported as one or more simple compact codes this element is often placed
 * adjacent to the result value in reports and flow sheets to signal the
 * meaning/normalcy status of the result.
 */
  interpretation?: Array<CodeableConcept> | undefined;
  _interpretation?: Element[] | undefined;

        
      
        
          
  /**
 * The date and time this version of the observation was made available to
 * providers, typically after the results have been reviewed and verified.
 * For Observations that don’t require review and verification, it may be the same
 * as the [`lastUpdated` ](resource-definitions.html#Meta.lastUpdated) time of the
 * resource itself.  For Observations that do require review and verification for
 * certain updates, it might not be the same as the `lastUpdated` time of the
 * resource itself due to a non-clinically significant update that doesn’t require
 * the new version to be reviewed and verified again.
 */
  issued?: string | undefined;
  _issued?: Element | undefined;

        
      
        
          
  /**
 * Indicates the mechanism used to perform the observation.
 * Only used if not implicit in code for Observation.code.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * Comments about the observation or the results.
 * May include general statements about the observation, or statements about
 * significant, unexpected or unreliable results values, or information about its
 * source when relevant to its interpretation.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * A larger event of which this particular Observation is a component or step.  For
 * example,  an observation as part of a procedure.
 * To link an Observation to an Encounter use `encounter`.  See the
 * [Notes](observation.html#obsgrouping) below for guidance on referencing another
 * Observation.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Who was responsible for asserting the observed value as "true".
 */
  performer?: Array<Reference> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * Guidance on how to interpret the value by comparison to a normal or recommended
 * range.  Multiple reference ranges are interpreted as an "OR".   In other words,
 * to represent two distinct target populations, two `referenceRange` elements
 * would be used.
 * Most observations only have one generic reference range. Systems MAY choose to
 * restrict to only supplying the relevant reference range based on knowledge about
 * the patient (e.g., specific to the patient's age, gender, weight and other
 * factors), but this might not be possible or appropriate. Whenever more than one
 * reference range is supplied, the differences between them SHOULD be provided in
 * the reference range and/or age properties.
 */
  referenceRange?: Array<BackboneElement> | undefined;
  _referenceRange?: Element[] | undefined;

        
      
        
          
  /**
 * The age at which this reference range is applicable. This is a neonatal age
 * (e.g. number of weeks at term) if the meaning says so.
 */
  age?: Range | undefined;
  _age?: Element | undefined;

        
      
        
          
  /**
 * Codes to indicate the target population this reference range applies to.  For
 * example, a reference range may be based on the normal population or a particular
 * sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target
 * populations.  For example, to represent a target population of African American
 * females, both a code of female and a code for African American would be used.
 * This SHOULD be populated if there is more than one range.  If this element is
 * not present then the normal population is assumed.
 */
  appliesTo?: Array<CodeableConcept> | undefined;
  _appliesTo?: Element[] | undefined;

        
      
        
          
  /**
 * The value of the high bound of the reference range.  The high bound of the
 * reference range endpoint is inclusive of the value (e.g.  reference range is >=5
 * - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g.
 * reference range is >= 2.3).
 */
  high?: Quantity | undefined;
  _high?: Element | undefined;

        
      
        
          
  /**
 * The value of the low bound of the reference range.  The low bound of the
 * reference range endpoint is inclusive of the value (e.g.  reference range is >=5
 * - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g.
 * reference range is <=2.3).
 */
  low?: Quantity | undefined;
  _low?: Element | undefined;

        
      
        
          
  /**
 * Text based reference range in an observation which may be used when a
 * quantitative range is not appropriate for an observation.  An example would be a
 * reference value of "Negative" or a list or table of "normals".
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * Codes to indicate the what part of the targeted reference population it applies
 * to. For example, the normal or therapeutic range.
 * This SHOULD be populated if there is more than one range.  If this element is
 * not present then the normal range is assumed.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The specimen that was used when this observation was made.
 * Should only be used if not implicit in code found in `Observation.code`.
 * Observations are not made on specimens themselves; they are made on a subject,
 * but in many cases by the means of a specimen. Note that although specimens are
 * often involved, they are not always tracked and reported explicitly. Also note
 * that observation resources may be used in contexts that track the specimen
 * explicitly (e.g. Diagnostic Report).
 */
  specimen?: Reference | undefined;
  _specimen?: Element | undefined;

        
      
        
          
  /**
 * The status of the result value.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The patient, or group of patients, location, or device this observation is about
 * and into whose record the observation is placed. If the actual focus of the
 * observation is different from the subject (or a sample of, part, or region of
 * the subject), the `focus` element or the `code` itself specifies the actual
 * focus of the observation.
 * One would expect this element to be a cardinality of 1..1. The only circumstance
 * in which the subject can be missing is when the observation is made by a device
 * that does not know the patient. In this case, the observation SHALL be matched
 * to a patient through some context/channel matching technique, and at this point,
 * the observation should be updated.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueRatio?: Ratio | undefined;
  _valueRatio?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueSampledData?: SampledData | undefined;
  _valueSampledData?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The information determined as a result of making the observation, if the
 * information has a simple value.
 * An observation may have; 1)  a single value here, 2)  both a value and a set of
 * related or component values,  or 3)  only a set of related or component values.
 * If a value is present, the datatype for this element should be determined by
 * Observation.code.  A CodeableConcept with just a text would be used instead of a
 * string if the field was usually coded, or if the type associated with the
 * Observation.code defines a coded value.  For additional guidance, see the [Notes
 * section](observation.html#notes) below.
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * ObservationDefinition
 * 
 * Set of definitional characteristics for a kind of observation or measurement
 * produced or consumed by an orderable health care service.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ObservationDefinition.html}
 */
    export interface ObservationDefinition extends DomainResource {
      
      readonly resourceType: "ObservationDefinition";
      

      
        
          
  /**
 * The set of abnormal coded results for the observation conforming to this
 * ObservationDefinition.
 */
  abnormalCodedValueSet?: Reference | undefined;
  _abnormalCodedValueSet?: Element | undefined;

        
      
        
          
  /**
 * A code that classifies the general type of observation.
 * This element allows various categorization schemes based on the owner’s
 * definition of the category and effectively multiple categories can be used for
 * one instance of ObservationDefinition. The level of granularity is defined by
 * the category concepts in the value set.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * Describes what will be observed. Sometimes this is called the observation
 * "name".
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The set of critical coded results for the observation conforming to this
 * ObservationDefinition.
 */
  criticalCodedValueSet?: Reference | undefined;
  _criticalCodedValueSet?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this ObservationDefinition artifact.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The method or technique used to perform the observation.
 * Only used if not implicit in observation code.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * Multiple results allowed for observations conforming to this
 * ObservationDefinition.
 * An example of observation allowing multiple results is "bacteria identified by
 * culture". Conversely, the measurement of a potassium level allows a single
 * result.
 */
  multipleResultsAllowed?: boolean | undefined;
  _multipleResultsAllowed?: Element | undefined;

        
      
        
          
  /**
 * The set of normal coded results for the observations conforming to this
 * ObservationDefinition.
 */
  normalCodedValueSet?: Reference | undefined;
  _normalCodedValueSet?: Element | undefined;

        
      
        
          
  /**
 * The data types allowed for the value element of the instance observations
 * conforming to this ObservationDefinition.
 */
  permittedDataType?: Array<string> | undefined;
  _permittedDataType?: Element[] | undefined;

        
      
        
          
  /**
 * The preferred name to be used when reporting the results of observations
 * conforming to this ObservationDefinition.
 */
  preferredReportName?: string | undefined;
  _preferredReportName?: Element | undefined;

        
      
        
          
  /**
 * Multiple  ranges of results qualified by different contexts for ordinal or
 * continuous observations conforming to this ObservationDefinition.
 */
  qualifiedInterval?: Array<BackboneElement> | undefined;
  _qualifiedInterval?: Element[] | undefined;

        
      
        
          
  /**
 * The age at which this reference range is applicable. This is a neonatal age
 * (e.g. number of weeks at term) if the meaning says so.
 * Some analytes vary greatly over age.
 */
  age?: Range | undefined;
  _age?: Element | undefined;

        
      
        
          
  /**
 * Codes to indicate the target population this reference range applies to.
 * If this element is not present then the global population is assumed.
 */
  appliesTo?: Array<CodeableConcept> | undefined;
  _appliesTo?: Element[] | undefined;

        
      
        
          
  /**
 * The category of interval of values for continuous or ordinal observations
 * conforming to this ObservationDefinition.
 */
  category?: string | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * Text based condition for which the reference range is valid.
 */
  condition?: string | undefined;
  _condition?: Element | undefined;

        
      
        
          
  /**
 * Codes to indicate the health context the range applies to. For example, the
 * normal or therapeutic range.
 */
  context?: CodeableConcept | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * Sex of the population the range applies to.
 */
  gender?: string | undefined;
  _gender?: Element | undefined;

        
      
        
          
  /**
 * The gestational age to which this reference range is applicable, in the context
 * of pregnancy.
 */
  gestationalAge?: Range | undefined;
  _gestationalAge?: Element | undefined;

        
      
        
          
  /**
 * The low and high values determining the interval. There may be only one of the
 * two.
 */
  range?: Range | undefined;
  _range?: Element | undefined;

        
      
        
          
  /**
 * Characteristics for quantitative results of this observation.
 */
  quantitativeDetails?: BackboneElement | undefined;
  _quantitativeDetails?: Element | undefined;

        
      
        
          
  /**
 * Factor for converting value expressed with SI unit to value expressed with
 * customary unit.
 */
  conversionFactor?: number | undefined;
  _conversionFactor?: Element | undefined;

        
      
        
          
  /**
 * Customary unit used to report quantitative results of observations conforming to
 * this ObservationDefinition.
 */
  customaryUnit?: CodeableConcept | undefined;
  _customaryUnit?: Element | undefined;

        
      
        
          
  /**
 * Number of digits after decimal separator when the results of such observations
 * are of type Quantity.
 */
  decimalPrecision?: number | undefined;
  _decimalPrecision?: Element | undefined;

        
      
        
          
  /**
 * SI unit used to report quantitative results of observations conforming to this
 * ObservationDefinition.
 */
  unit?: CodeableConcept | undefined;
  _unit?: Element | undefined;

        
      
        
          
  /**
 * The set of valid coded results for the observations  conforming to this
 * ObservationDefinition.
 */
  validCodedValueSet?: Reference | undefined;
  _validCodedValueSet?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * OperationDefinition
 * 
 * A formal computable definition of an operation (on the RESTful interface) or a
 * named query (using the search interaction).
 * 
 * @see {@link http://hl7.org/fhir/R4B/OperationDefinition.html}
 */
    export interface OperationDefinition extends DomainResource {
      
      readonly resourceType: "OperationDefinition";
      

      
        
          
  /**
 * Whether the operation affects state. Side effects such as producing audit trail
 * entries do not count as 'affecting  state'.
 * What http methods can be used for the operation depends on the .affectsState
 * value and whether the input parameters are primitive or complex:

1. Servers
 * SHALL support POST method for all operations.

2. Servers SHALL support GET
 * method if all the parameters for the operation are primitive or there are no
 * parameters and the operation has affectsState = false.
 */
  affectsState?: boolean | undefined;
  _affectsState?: Element | undefined;

        
      
        
          
  /**
 * Indicates that this operation definition is a constraining profile on the base.
 * A constrained profile can make optional parameters required or not used and
 * clarify documentation.
 */
  base?: string | undefined;
  _base?: Element | undefined;

        
      
        
          
  /**
 * The name used to invoke the operation.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Additional information about how to use this operation or named query.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the operation definition was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the operation definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the operation definition.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the operation definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the operation
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the operation definition as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the operation definition is
 * presumed to be the predominant language in the place the operation definition
 * was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this operation definition is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of operation definitions that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * Additional validation information for the in parameters - a single profile that
 * covers all the parameters. The profile is a constraint on the parameters
 * resource as a whole.
 * If present the profile shall not conflict with what is specified in the
 * parameters in the operation definition (max/min etc.), though it may provide
 * additional constraints. The constraints expressed in the profile apply whether
 * the operation is invoked by a POST wih parameters or not.
 */
  inputProfile?: string | undefined;
  _inputProfile?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether this operation can be invoked on a particular instance of one
 * of the given types.
 */
  instance: boolean;
  _instance?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the operation definition is intended to be
 * used.
 * It may be possible for the operation definition to be used in jurisdictions
 * other than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * Whether this is an operation or a named query.
 * Named queries are invoked differently, and have different capabilities.
 */
  kind: string;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the operation definition. This name should
 * be usable as an identifier for the module by machine processing applications
 * such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Additional validation information for the out parameters - a single profile that
 * covers all the parameters. The profile is a constraint on the parameters
 * resource.
 * If present the profile shall not conflict with what is specified in the
 * parameters in the operation definition (max/min etc.), though it may provide
 * additional constraints. The constraints expressed in the profile apply whether
 * the operation is invoked by a POST wih parameters or not.
 */
  outputProfile?: string | undefined;
  _outputProfile?: Element | undefined;

        
      
        
          
  /**
 * Defines an appropriate combination of parameters to use when invoking this
 * operation, to help code generators when generating overloaded parameter sets for
 * this operation.
 * The combinations are suggestions as to which sets of parameters to use together,
 * but the combinations are not intended to be authoritative.
 */
  overload?: Array<BackboneElement> | undefined;
  _overload?: Element[] | undefined;

        
      
        
          
  /**
 * Comments to go on overload.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Name of parameter to include in overload.
 */
  parameterName?: Array<string> | undefined;
  _parameterName?: Element[] | undefined;

        
      
        
          
  /**
 * The parameters for the operation/query.
 * Query Definitions only have one output parameter, named "result". This might not
 * be described, but can be to allow a profile to be defined.
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
 */
  binding?: BackboneElement | undefined;
  _binding?: Element | undefined;

        
      
        
          
  /**
 * Indicates the degree of conformance expectations associated with this binding -
 * that is, the degree to which the provided value set must be adhered to in the
 * instances.
 * For further discussion, see [Using Terminologies](terminologies.html).
 */
  strength: string;
  _strength?: Element | undefined;

        
      
        
          
  /**
 * Points to the value set or external definition (e.g. implicit value set) that
 * identifies the set of codes to be used.
 * For value sets with a referenceResource, the display can contain the value set
 * description.  The reference may be version-specific or not.
 */
  valueSet: string;
  _valueSet?: Element | undefined;

        
      
        
          
  /**
 * Describes the meaning or use of this parameter.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * The maximum number of times this element is permitted to appear in the request
 * or response.
 */
  max: string;
  _max?: Element | undefined;

        
      
        
          
  /**
 * The minimum number of times this parameter SHALL appear in the request or
 * response.
 */
  min: number;
  _min?: Element | undefined;

        
      
        
          
  /**
 * The name of used to identify the parameter.
 * This name must be a token (start with a letter in a..z, and only contain
 * letters, numerals, and underscore. Note that for search parameters (type =
 * string, with a search type), the name may be altered by the search modifiers.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The parts of a nested Parameter.
 * Query Definitions only have one output parameter, named "result". This might not
 * be described, but can be to allow a profile to be defined.
 */
  part?: Array<undefined> | undefined;
  _part?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies other resource parameters within the operation invocation that are
 * expected to resolve to this resource.
 * Resolution applies if the referenced parameter exists.
 */
  referencedFrom?: Array<BackboneElement> | undefined;
  _referencedFrom?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the parameter or dot-separated path of parameter names pointing to
 * the resource parameter that is expected to contain a reference to this resource.
 */
  source: string;
  _source?: Element | undefined;

        
      
        
          
  /**
 * The id of the element in the referencing resource that is expected to resolve to
 * this resource.
 */
  sourceId?: string | undefined;
  _sourceId?: Element | undefined;

        
      
        
          
  /**
 * How the parameter is understood as a search parameter. This is only used if the
 * parameter type is 'string'.
 */
  searchType?: string | undefined;
  _searchType?: Element | undefined;

        
      
        
          
  /**
 * Used when the type is "Reference" or "canonical", and identifies a profile
 * structure or implementation Guide that applies to the target of the reference
 * this parameter refers to. If any profiles are specified, then the content must
 * conform to at least one of them. The URL can be a local reference - to a
 * contained StructureDefinition, or a reference to another StructureDefinition or
 * Implementation Guide by a canonical URL. When an implementation guide is
 * specified, the target resource SHALL conform to at least one profile defined in
 * the implementation guide.
 * Often, these profiles are the base definitions from the spec (e.g.
 * http://hl7.org/fhir/StructureDefinition/Patient).
 */
  targetProfile?: Array<string> | undefined;
  _targetProfile?: Element[] | undefined;

        
      
        
          
  /**
 * The type for this parameter.
 * if there is no stated parameter, then the parameter is a multi-part parameter;
 * type and must have at least one part defined.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Whether this is an input or an output parameter.
 * If a parameter name is used for both an input and an output parameter, the
 * parameter should be defined twice.
 */
  use: string;
  _use?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the operation
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the operation definition is the organization or individual primarily responsible
 * for the maintenance and upkeep of the operation definition. This is not
 * necessarily the same individual or organization that developed and initially
 * authored the content. The publisher is the primary point of contact for
 * questions or issues with the operation definition. This item SHOULD be populated
 * unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this operation definition is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the operation definition. Instead,
 * it provides traceability of ''why'' the resource is either needed or ''why'' it
 * is defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this operation definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The types on which this operation can be executed.
 * If the type is an abstract resource ("Resource" or "DomainResource") then the
 * operation can be invoked on any concrete specialization.
 */
  resource?: Array<string> | undefined;
  _resource?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this operation definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of operation definitions that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether this operation or named query can be invoked at the system
 * level (e.g. without needing to choose a resource type for the context).
 */
  system: boolean;
  _system?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the operation definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether this operation or named query can be invoked at the resource
 * type level for any given resource type level (e.g. without needing to choose a
 * specific resource id for the context).
 */
  type: boolean;
  _type?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this operation definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this operation definition
 * is (or will be) published. This URL can be the target of a canonical reference.
 * It SHALL remain the same when the operation definition is stored on different
 * servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate operation
 * definition instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the operation definition
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the operation definition author and is not expected
 * to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different operation definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the operation
 * definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * OperationOutcome
 * 
 * A collection of error, warning, or information messages that result from a
 * system action.
 * 
 * @see {@link http://hl7.org/fhir/R4B/OperationOutcome.html}
 */
    export interface OperationOutcome extends DomainResource {
      
      readonly resourceType: "OperationOutcome";
      

      
        
          
  /**
 * An error, warning, or information message that results from a system action.
 */
  issue: Array<BackboneElement>;
  _issue?: Element[] | undefined;

        
      
        
          
  /**
 * Describes the type of the issue. The system that creates an OperationOutcome
 * SHALL choose the most applicable code from the IssueType value set, and may
 * additional provide its own code for the error in the details element.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Additional details about the error. This may be a text description of the error
 * or a system code that identifies the error.
 * A human readable description of the error issue SHOULD be placed in
 * details.text.
 */
  details?: CodeableConcept | undefined;
  _details?: Element | undefined;

        
      
        
          
  /**
 * Additional diagnostic information about the issue.
 * This may be a description of how a value is erroneous, a stack dump to help
 * trace the issue or other troubleshooting information.
 */
  diagnostics?: string | undefined;
  _diagnostics?: Element | undefined;

        
      
        
          
  /**
 * A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names,
 * repetition indicators and the default child accessor that identifies one of the
 * elements in the resource that caused this issue to be raised.
 * The root of the FHIRPath is the resource or bundle that generated
 * OperationOutcome.  Each FHIRPath SHALL resolve to a single node.
 */
  expression?: Array<string> | undefined;
  _expression?: Element[] | undefined;

        
      
        
          
  /**
 * This element is deprecated because it is XML specific. It is replaced by
 * issue.expression, which is format independent, and simpler to parse. 

For
 * resource issues, this will be a simple XPath limited to element names,
 * repetition indicators and the default child accessor that identifies one of the
 * elements in the resource that caused this issue to be raised.  For HTTP errors,
 * will be "http." + the parameter name.
 * The root of the XPath is the resource or bundle that generated OperationOutcome.
 * Each XPath SHALL resolve to a single node.  This element is deprecated, and is
 * being replaced by expression.
 */
  location?: Array<string> | undefined;
  _location?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates whether the issue indicates a variation from successful processing.
 * This is labeled as "Is Modifier" because applications should not confuse hints
 * and warnings with errors.
 */
  severity: string;
  _severity?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Organization
 * 
 * A formally or informally recognized grouping of people or organizations formed
 * for the purpose of achieving some form of collective action.  Includes
 * companies, institutions, corporations, departments, community groups, healthcare
 * practice groups, payer/insurer, etc.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Organization.html}
 */
    export interface Organization extends DomainResource {
      
      readonly resourceType: "Organization";
      

      
        
          
  /**
 * Whether the organization's record is still in active use.
 * This active flag is not intended to be used to mark an organization as
 * temporarily closed or under construction. Instead the Location(s) within the
 * Organization should have the suspended status. If further details of the reason
 * for the suspension are required, then an extension on this element should be
 * used.

This element is labeled as a modifier because it may be used to mark that
 * the resource was created in error.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * An address for the organization.
 * Organization may have multiple addresses with different uses or applicable
 * periods. The use code 'home' is not to be used.
 */
  address?: Array<Address> | undefined;
  _address?: Element[] | undefined;

        
      
        
          
  /**
 * A list of alternate names that the organization is known as, or was known as in
 * the past.
 * There are no dates associated with the alias/historic names, as this is not
 * intended to track when names were used, but to assist in searching so that older
 * names can still result in identifying the organization.
 */
  alias?: Array<string> | undefined;
  _alias?: Element[] | undefined;

        
      
        
          
  /**
 * Contact for the organization for a certain purpose.
 * Where multiple contacts for the same purpose are provided there is a standard
 * extension that can be used to determine which one is the preferred contact to
 * use.
 */
  contact?: Array<BackboneElement> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * Visiting or postal addresses for the contact.
 */
  address?: Address | undefined;
  _address?: Element | undefined;

        
      
        
          
  /**
 * A name associated with the contact.
 */
  name?: HumanName | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Indicates a purpose for which the contact can be reached.
 */
  purpose?: CodeableConcept | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * A contact detail (e.g. a telephone number or an email address) by which the
 * party may be contacted.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
        
          
  /**
 * Technical endpoints providing access to services operated for the organization.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier for the organization that is used to identify the organization across
 * multiple disparate systems.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A name associated with the organization.
 * If the name of an organization changes, consider putting the old name in the
 * alias column so that it can still be located through searches.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The organization of which this organization forms a part.
 */
  partOf?: Reference | undefined;
  _partOf?: Element | undefined;

        
      
        
          
  /**
 * A contact detail for the organization.
 * The use code 'home' is not to be used. Note that these contacts are not the
 * contact details of people who are employed by or represent the organization, but
 * official contacts for the organization itself.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
        
          
  /**
 * The kind(s) of organization that this is.
 * Organizations can be corporations, wards, sections, clinical teams, government
 * departments, etc. Note that code is generally a classifier of the type of
 * organization; in many applications, codes are used to identity a particular
 * organization (say, ward) as opposed to another of the same type - these are
 * identifiers, not codes

When considering if multiple types are appropriate, you
 * should evaluate if child organizations would be a more appropriate use of the
 * concept, as different types likely are in different sub-areas of the
 * organization. This is most likely to be used where type values have orthogonal
 * values, such as a religious, academic and medical center.

We expect that some
 * jurisdictions will profile this optionality to be a single cardinality.
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
    }

  


  
    /**
 * OrganizationAffiliation
 * 
 * Defines an affiliation/assotiation/relationship between 2 distinct oganizations,
 * that is not a part-of relationship/sub-division relationship.
 * 
 * @see {@link http://hl7.org/fhir/R4B/OrganizationAffiliation.html}
 */
    export interface OrganizationAffiliation extends DomainResource {
      
      readonly resourceType: "OrganizationAffiliation";
      

      
        
          
  /**
 * Whether this organization affiliation record is in active use.
 * If this value is false, you may refer to the period to see when the role was in
 * active use. If there is no period specified, no inference can be made about when
 * it was active.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * Definition of the role the participatingOrganization plays in the association.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * Technical endpoints providing access to services operated for this role.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * Healthcare services provided through the role.
 */
  healthcareService?: Array<Reference> | undefined;
  _healthcareService?: Element[] | undefined;

        
      
        
          
  /**
 * Business identifiers that are specific to this role.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The location(s) at which the role occurs.
 */
  location?: Array<Reference> | undefined;
  _location?: Element[] | undefined;

        
      
        
          
  /**
 * Health insurance provider network in which the participatingOrganization
 * provides the role's services (if defined) at the indicated locations (if
 * defined).
 */
  network?: Array<Reference> | undefined;
  _network?: Element[] | undefined;

        
      
        
          
  /**
 * Organization where the role is available (primary organization/has members).
 */
  organization?: Reference | undefined;
  _organization?: Element | undefined;

        
      
        
          
  /**
 * The Participating Organization provides/performs the role(s) defined by the code
 * to the Primary Organization (e.g. providing services or is a member of).
 */
  participatingOrganization?: Reference | undefined;
  _participatingOrganization?: Element | undefined;

        
      
        
          
  /**
 * The period during which the participatingOrganization is affiliated with the
 * primary organization.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Specific specialty of the participatingOrganization in the context of the role.
 */
  specialty?: Array<CodeableConcept> | undefined;
  _specialty?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details at the participatingOrganization relevant to this Affiliation.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  
    /**
 * PackagedProductDefinition
 * 
 * A medically related item or items, in a container or package.
 * 
 * @see {@link http://hl7.org/fhir/R4B/PackagedProductDefinition.html}
 */
    export interface PackagedProductDefinition extends DomainResource {
      
      readonly resourceType: "PackagedProductDefinition";
      

      
        
          
  /**
 * Allows the key features to be recorded, such as "hospital pack", "nurse
 * prescribable", "calendar pack".
 */
  characteristic?: Array<CodeableConcept> | undefined;
  _characteristic?: Element[] | undefined;

        
      
        
          
  /**
 * A total of the complete count of contained items of a particular type/form,
 * independent of sub-packaging or organization. This can be considered as the pack
 * size. This attribute differs from containedItem.amount in that it can give a
 * single aggregated count of all tablet types in a pack, even when these are
 * different manufactured items. For example a pill pack of 21 tablets plus 7 sugar
 * tablets, can be denoted here as '28 tablets'. This attribute is repeatable so
 * that the different item types in one pack type can be counted (e.g. a count of
 * vials and count of syringes). Each repeat must have different units, so that it
 * is clear what the different sets of counted items are, and it is not intended to
 * allow different counts of similar items (e.g. not '2 tubes and 3 tubes').
 * Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs.
 * 50 pack) - which would be different instances of this resource.
 */
  containedItemQuantity?: Array<Quantity> | undefined;
  _containedItemQuantity?: Element[] | undefined;

        
      
        
          
  /**
 * States whether a drug product is supplied with another item such as a diluent or
 * adjuvant.
 */
  copackagedIndicator?: boolean | undefined;
  _copackagedIndicator?: Element | undefined;

        
      
        
          
  /**
 * Textual description. Note that this is not the name of the package or product.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier for this package as whole. Unique instance identifiers
 * assigned to a package by manufacturers, regulators, drug catalogue custodians or
 * other organizations.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The legal status of supply of the packaged item as classified by the regulator.
 */
  legalStatusOfSupply?: Array<BackboneElement> | undefined;
  _legalStatusOfSupply?: Element[] | undefined;

        
      
        
          
  /**
 * The actual status of supply. Conveys in what situation this package type may be
 * supplied for use.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * The place where the legal status of supply applies. When not specified, this
 * indicates it is unknown in this context.
 */
  jurisdiction?: CodeableConcept | undefined;
  _jurisdiction?: Element | undefined;

        
      
        
          
  /**
 * Manufacturer of this package type. When there are multiple it means these are
 * all possible manufacturers.
 */
  manufacturer?: Array<Reference> | undefined;
  _manufacturer?: Element[] | undefined;

        
      
        
          
  /**
 * Allows specifying that an item is on the market for sale, or that it is not
 * available, and the dates and locations associated.
 */
  marketingStatus?: Array<MarketingStatus> | undefined;
  _marketingStatus?: Element[] | undefined;

        
      
        
          
  /**
 * A name for this package. Typically what it would be listed as in a drug
 * formulary or catalogue, inventory etc.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A packaging item, as a container for medically related items, possibly with
 * other packaging items within, or a packaging component, such as bottle cap
 * (which is not a device or a medication manufactured item).
 */
  package?: BackboneElement | undefined;
  _package?: Element | undefined;

        
      
        
          
  /**
 * A possible alternate material for this part of the packaging, that is allowed to
 * be used instead of the usual material (e.g. different types of plastic for a
 * blister sleeve).
 */
  alternateMaterial?: Array<CodeableConcept> | undefined;
  _alternateMaterial?: Element[] | undefined;

        
      
        
          
  /**
 * The item(s) within the packaging.
 */
  containedItem?: Array<BackboneElement> | undefined;
  _containedItem?: Element[] | undefined;

        
      
        
          
  /**
 * The number of this type of item within this packaging.
 */
  amount?: Quantity | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * The actual item(s) of medication, as manufactured, or a device (typically, but
 * not necessarily, a co-packaged one), or other medically related item (such as
 * food, biologicals, raw materials, medical fluids, gases etc.), as contained in
 * the package. This also allows another whole packaged product to be included,
 * which is solely for the case where a package of other entire packages is wanted
 * - such as a wholesale or distribution pack (for layers within one package, use
 * PackagedProductDefinition.package.package).
 */
  item: CodeableReference;
  _item?: Element | undefined;

        
      
        
          
  /**
 * An identifier that is specific to this particular part of the packaging.
 * Including possibly Data Carrier Identifier (a GS1 barcode).
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Manufacturer of this package Item. When there are multiple it means these are
 * all possible manufacturers.
 */
  manufacturer?: Array<Reference> | undefined;
  _manufacturer?: Element[] | undefined;

        
      
        
          
  /**
 * Material type of the package item.
 */
  material?: Array<CodeableConcept> | undefined;
  _material?: Element[] | undefined;

        
      
        
          
  /**
 * Allows containers (and parts of containers) parwithin containers, still a single
 * packaged product.  See also
 * PackagedProductDefinition.package.containedItem.item(PackagedProductDefinition).
 */
  package?: Array<undefined> | undefined;
  _package?: Element[] | undefined;

        
      
        
          
  /**
 * General characteristics of this item.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * A code expressing the type of characteristic.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * A value for the characteristic.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * A value for the characteristic.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
        
      
        
          
  /**
 * The quantity of this level of packaging in the package that contains it. If
 * specified, the outermost level is always 1.
 */
  quantity?: number | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * Shelf Life and storage information.
 */
  shelfLifeStorage?: Array<BackboneElement> | undefined;
  _shelfLifeStorage?: Element[] | undefined;

        
      
        
          
            
  /**
 * The shelf life time period can be specified using a numerical value for the
 * period of time and its unit of time measurement The unit of measurement shall be
 * specified in accordance with ISO 11240 and the resulting terminology The symbol
 * and the symbol identifier shall be used.
 */
  periodDuration?: Duration | undefined;
  _periodDuration?: Element | undefined;

          
            
  /**
 * The shelf life time period can be specified using a numerical value for the
 * period of time and its unit of time measurement The unit of measurement shall be
 * specified in accordance with ISO 11240 and the resulting terminology The symbol
 * and the symbol identifier shall be used.
 */
  periodString?: string | undefined;
  _periodString?: Element | undefined;

          
        
      
        
          
  /**
 * Special precautions for storage, if any, can be specified using an appropriate
 * controlled vocabulary. The controlled term and the controlled term identifier
 * shall be specified.
 */
  specialPrecautionsForStorage?: Array<CodeableConcept> | undefined;
  _specialPrecautionsForStorage?: Element[] | undefined;

        
      
        
          
  /**
 * This describes the shelf life, taking into account various scenarios such as
 * shelf life of the packaged Medicinal Product itself, shelf life after
 * transformation where necessary and shelf life after the first opening of a
 * bottle, etc. The shelf life type shall be specified using an appropriate
 * controlled vocabulary The controlled term and the controlled term identifier
 * shall be specified.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The physical type of the container of the items.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The product that this is a pack for.
 */
  packageFor?: Array<Reference> | undefined;
  _packageFor?: Element[] | undefined;

        
      
        
          
  /**
 * The status within the lifecycle of this item. A high level status, this is not
 * intended to duplicate details carried elsewhere such as legal status, or
 * authorization or marketing status.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The date at which the given status became applicable.
 */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;

        
      
        
          
  /**
 * A high level category e.g. medicinal product, raw material, shipping/transport
 * container, etc.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * ParameterDefinition
 * 
 * Base StructureDefinition for ParameterDefinition Type: The parameters to the
 * module. This collection specifies both the input and output parameters. Input
 * parameters are provided by the caller as part of the $evaluate operation. Output
 * parameters are included in the GuidanceResponse.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ParameterDefinition.html}
 */
    export interface ParameterDefinition extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A brief discussion of what the parameter is for and how it is used by the
 * module.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * The maximum number of times this element is permitted to appear in the request
 * or response.
 */
  max?: string | undefined;
  _max?: Element | undefined;

        
      
        
          
  /**
 * The minimum number of times this parameter SHALL appear in the request or
 * response.
 */
  min?: number | undefined;
  _min?: Element | undefined;

        
      
        
          
  /**
 * The name of the parameter used to allow access to the value of the parameter in
 * evaluation contexts.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * If specified, this indicates a profile that the input data must conform to, or
 * that the output data will conform to.
 */
  profile?: string | undefined;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * The type of the parameter.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Whether the parameter is input or output for the module.
 */
  use: string;
  _use?: Element | undefined;

        
      
    }

  


  
    /**
 * Parameters
 * 
 * This resource is a non-persisted resource used to pass information into and back
 * from an [operation](operations.html). It has no other use, and there is no
 * RESTful endpoint associated with it.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Parameters.html}
 */
    export interface Parameters extends Resource {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A parameter passed to or received from the operation.
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the parameter (reference to the operation definition).
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A named part of a multi-part parameter.
 * Only one level of nested parameters is allowed.
 */
  part?: Array<undefined> | undefined;
  _part?: Element[] | undefined;

        
      
        
          
  /**
 * If the parameter is a whole resource.
 * When resolving references in resources, the operation definition may specify how
 * references may be resolved between parameters. If a reference cannot be resolved
 * between the parameters, the application should fall back to it's general
 * resource resolution methods.
 */
  resource?: Resource | undefined;
  _resource?: Element | undefined;

        
      
        
          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueCanonical?: string | undefined;
  _valueCanonical?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueCode?: string | undefined;
  _valueCode?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueId?: id | undefined;
  _valueId?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueInstant?: string | undefined;
  _valueInstant?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueMarkdown?: string | undefined;
  _valueMarkdown?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueOid?: oid | undefined;
  _valueOid?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valuePositiveInt?: number | undefined;
  _valuePositiveInt?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueUnsignedInt?: unsignedInt | undefined;
  _valueUnsignedInt?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueUrl?: string | undefined;
  _valueUrl?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueUuid?: uuid | undefined;
  _valueUuid?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueAddress?: Address | undefined;
  _valueAddress?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueAge?: Age | undefined;
  _valueAge?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueAnnotation?: Annotation | undefined;
  _valueAnnotation?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueContactPoint?: ContactPoint | undefined;
  _valueContactPoint?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueCount?: Count | undefined;
  _valueCount?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueDistance?: Distance | undefined;
  _valueDistance?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueDuration?: Duration | undefined;
  _valueDuration?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueHumanName?: HumanName | undefined;
  _valueHumanName?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueIdentifier?: Identifier | undefined;
  _valueIdentifier?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueMoney?: Money | undefined;
  _valueMoney?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueRatio?: Ratio | undefined;
  _valueRatio?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueSampledData?: SampledData | undefined;
  _valueSampledData?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueSignature?: Signature | undefined;
  _valueSignature?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueTiming?: Timing | undefined;
  _valueTiming?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueContactDetail?: ContactDetail | undefined;
  _valueContactDetail?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueContributor?: Contributor | undefined;
  _valueContributor?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueDataRequirement?: DataRequirement | undefined;
  _valueDataRequirement?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueExpression?: Expression | undefined;
  _valueExpression?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueParameterDefinition?: ParameterDefinition | undefined;
  _valueParameterDefinition?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  _valueRelatedArtifact?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  _valueTriggerDefinition?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueUsageContext?: UsageContext | undefined;
  _valueUsageContext?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueDosage?: Dosage | undefined;
  _valueDosage?: Element | undefined;

          
            
  /**
 * Conveys the content if the parameter is a data type.
 */
  valueMeta?: Meta | undefined;
  _valueMeta?: Element | undefined;

          
        
      
    }

  


  


  


  


  


  


  


  
    /**
 * Patient
 * 
 * Demographics and other administrative information about an individual or animal
 * receiving care or other health-related services.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Patient.html}
 */
    export interface Patient extends DomainResource {
      
      readonly resourceType: "Patient";
      

      
        
          
  /**
 * Whether this patient record is in active use. 
Many systems use this property to
 * mark as non-current patients, such as those that have not been seen for a period
 * of time based on an organization's business rules.

It is often used to filter
 * patient lists to exclude inactive patients

Deceased patients may also be marked
 * as inactive for the same reasons, but may be active for some time after death.
 * If a record is inactive, and linked to an active record, then future
 * patient/record updates should occur on the other patient.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * An address for the individual.
 * Patient may have multiple addresses with different uses or applicable periods.
 */
  address?: Array<Address> | undefined;
  _address?: Element[] | undefined;

        
      
        
          
  /**
 * The date of birth for the individual.
 * At least an estimated year should be provided as a guess if the real DOB is
 * unknown  There is a standard extension "patient-birthTime" available that should
 * be used where Time is required (such as in maternity/infant care systems).
 */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;

        
      
        
          
  /**
 * A language which may be used to communicate with the patient about his or her
 * health.
 * If no language is specified, this *implies* that the default local language is
 * spoken.  If you need to convey proficiency for multiple modes, then you need
 * multiple Patient.Communication associations.   For animals, language is not a
 * relevant field, and should be absent from the instance. If the Patient does not
 * speak the default local language, then the Interpreter Required Standard can be
 * used to explicitly declare that an interpreter is required.
 */
  communication?: Array<BackboneElement> | undefined;
  _communication?: Element[] | undefined;

        
      
        
          
  /**
 * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed
 * by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g.
 * "en" for English, or "en-US" for American English versus "en-EN" for England
 * English.
 * The structure aa-BB with this exact casing is one the most widely used notations
 * for locale. However not all systems actually code this but instead have it as
 * free text. Hence CodeableConcept instead of code as the data type.
 */
  language: CodeableConcept;
  _language?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether or not the patient prefers this language (over other languages
 * he masters up a certain level).
 * This language is specifically identified for communicating healthcare
 * information.
 */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;

        
      
        
          
  /**
 * A contact party (e.g. guardian, partner, friend) for the patient.
 * Contact covers all kinds of contact parties: family members, business contacts,
 * guardians, caregivers. Not applicable to register pedigree and family ties
 * beyond use of having contact.
 */
  contact?: Array<BackboneElement> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * Address for the contact person.
 */
  address?: Address | undefined;
  _address?: Element | undefined;

        
      
        
          
  /**
 * Administrative Gender - the gender that the contact person is considered to have
 * for administration and record keeping purposes.
 */
  gender?: string | undefined;
  _gender?: Element | undefined;

        
      
        
          
  /**
 * A name associated with the contact person.
 */
  name?: HumanName | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Organization on behalf of which the contact is acting or for which the contact
 * is working.
 */
  organization?: Reference | undefined;
  _organization?: Element | undefined;

        
      
        
          
  /**
 * The period during which this contact person or organization is valid to be
 * contacted relating to this patient.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The nature of the relationship between the patient and the contact person.
 */
  relationship?: Array<CodeableConcept> | undefined;
  _relationship?: Element[] | undefined;

        
      
        
          
  /**
 * A contact detail for the person, e.g. a telephone number or an email address.
 * Contact may have multiple ways to be contacted with different uses or applicable
 * periods.  May need to have options for contacting the person urgently, and also
 * to help with identification.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
        
          
            
  /**
 * Indicates if the individual is deceased or not.
 * If there's no value in the instance, it means there is no statement on whether
 * or not the individual is deceased. Most systems will interpret the absence of a
 * value as a sign of the person being alive.
 */
  deceasedBoolean?: boolean | undefined;
  _deceasedBoolean?: Element | undefined;

          
            
  /**
 * Indicates if the individual is deceased or not.
 * If there's no value in the instance, it means there is no statement on whether
 * or not the individual is deceased. Most systems will interpret the absence of a
 * value as a sign of the person being alive.
 */
  deceasedDateTime?: string | undefined;
  _deceasedDateTime?: Element | undefined;

          
        
      
        
          
  /**
 * Administrative Gender - the gender that the patient is considered to have for
 * administration and record keeping purposes.
 * The gender might not match the biological sex as determined by genetics or the
 * individual's preferred identification. Note that for both humans and
 * particularly animals, there are other legitimate possibilities than male and
 * female, though the vast majority of systems and contexts only support male and
 * female.  Systems providing decision support or enforcing business rules should
 * ideally do this on the basis of Observations dealing with the specific sex or
 * gender aspect of interest (anatomical, chromosomal, social, etc.)  However,
 * because these observations are infrequently recorded, defaulting to the
 * administrative gender is common practice.  Where such defaulting occurs, rule
 * enforcement should allow for the variation between administrative and
 * biological, chromosomal and other gender aspects.  For example, an alert about a
 * hysterectomy on a male should be handled as a warning or overridable error, not
 * a "hard" error.  See the Patient Gender and Sex section for additional
 * information about communicating patient gender and sex.
 */
  gender?: string | undefined;
  _gender?: Element | undefined;

        
      
        
          
  /**
 * Patient's nominated care provider.
 * This may be the primary care provider (in a GP context), or it may be a patient
 * nominated care manager in a community/disability setting, or even organization
 * that will provide people to perform the care provider roles.  It is not to be
 * used to record Care Teams, these should be in a CareTeam resource that may be
 * linked to the CarePlan or EpisodeOfCare resources.
Multiple GPs may be recorded
 * against the patient for various reasons, such as a student that has his home GP
 * listed along with the GP at university during the school semesters, or a
 * "fly-in/fly-out" worker that has the onsite GP also included with his home GP to
 * remain aware of medical issues.

Jurisdictions may decide that they can profile
 * this down to 1 if desired, or 1 per type.
 */
  generalPractitioner?: Array<Reference> | undefined;
  _generalPractitioner?: Element[] | undefined;

        
      
        
          
  /**
 * An identifier for this patient.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Link to another patient resource that concerns the same actual patient.
 * There is no assumption that linked patient records have mutual links.
 */
  link?: Array<BackboneElement> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * The other patient resource that the link refers to.
 * Referencing a RelatedPerson here removes the need to use a Person record to
 * associate a Patient and RelatedPerson as the same individual.
 */
  other: Reference;
  _other?: Element | undefined;

        
      
        
          
  /**
 * The type of link between this patient resource and another patient resource.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Organization that is the custodian of the patient record.
 * There is only one managing organization for a specific patient record. Other
 * organizations will have their own Patient record, and may use the Link property
 * to join the records together (or a Person resource which can include confidence
 * ratings for the association).
 */
  managingOrganization?: Reference | undefined;
  _managingOrganization?: Element | undefined;

        
      
        
          
  /**
 * This field contains a patient's most recent marital (civil) status.
 */
  maritalStatus?: CodeableConcept | undefined;
  _maritalStatus?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates whether the patient is part of a multiple (boolean) or indicates the
 * actual birth order (integer).
 * Where the valueInteger is provided, the number is the birth number in the
 * sequence. E.g. The middle birth in triplets would be valueInteger=2 and the
 * third born would have valueInteger=3 If a boolean value was provided for this
 * triplets example, then all 3 patient records would have valueBoolean=true (the
 * ordering is not indicated).
 */
  multipleBirthBoolean?: boolean | undefined;
  _multipleBirthBoolean?: Element | undefined;

          
            
  /**
 * Indicates whether the patient is part of a multiple (boolean) or indicates the
 * actual birth order (integer).
 * Where the valueInteger is provided, the number is the birth number in the
 * sequence. E.g. The middle birth in triplets would be valueInteger=2 and the
 * third born would have valueInteger=3 If a boolean value was provided for this
 * triplets example, then all 3 patient records would have valueBoolean=true (the
 * ordering is not indicated).
 */
  multipleBirthInteger?: number | undefined;
  _multipleBirthInteger?: Element | undefined;

          
        
      
        
          
  /**
 * A name associated with the individual.
 * A patient may have multiple names with different uses or applicable periods. For
 * animals, the name is a "HumanName" in the sense that is assigned and used by
 * humans and has the same patterns.
 */
  name?: Array<HumanName> | undefined;
  _name?: Element[] | undefined;

        
      
        
          
  /**
 * Image of the patient.
 * Guidelines:
* Use id photos, not clinical photos.
* Limit dimensions to
 * thumbnail.
* Keep byte count low to ease resource updates.
 */
  photo?: Array<Attachment> | undefined;
  _photo?: Element[] | undefined;

        
      
        
          
  /**
 * A contact detail (e.g. a telephone number or an email address) by which the
 * individual may be contacted.
 * A Patient may have multiple ways to be contacted with different uses or
 * applicable periods.  May need to have options for contacting the person urgently
 * and also to help with identification. The address might not go directly to the
 * individual, but may reach another party that is able to proxy for the patient
 * (i.e. home phone, or pet owner's phone).
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  


  


  
    /**
 * PaymentNotice
 * 
 * This resource provides the status of the payment for goods and services
 * rendered, and the request and response resource references.
 * 
 * @see {@link http://hl7.org/fhir/R4B/PaymentNotice.html}
 */
    export interface PaymentNotice extends DomainResource {
      
      readonly resourceType: "PaymentNotice";
      

      
        
          
  /**
 * The amount sent to the payee.
 */
  amount: Money;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * The date when this resource was created.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this payment notice.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The party who will receive or has received payment that is the subject of this
 * notification.
 */
  payee?: Reference | undefined;
  _payee?: Element | undefined;

        
      
        
          
  /**
 * A reference to the payment which is the subject of this notice.
 */
  payment: Reference;
  _payment?: Element | undefined;

        
      
        
          
  /**
 * The date when the above payment action occurred.
 */
  paymentDate?: string | undefined;
  _paymentDate?: Element | undefined;

        
      
        
          
  /**
 * A code indicating whether payment has been sent or cleared.
 * Typically paid: payment sent, cleared: payment received.
 */
  paymentStatus?: CodeableConcept | undefined;
  _paymentStatus?: Element | undefined;

        
      
        
          
  /**
 * The practitioner who is responsible for the services rendered to the patient.
 */
  provider?: Reference | undefined;
  _provider?: Element | undefined;

        
      
        
          
  /**
 * The party who is notified of the payment status.
 */
  recipient: Reference;
  _recipient?: Element | undefined;

        
      
        
          
  /**
 * Reference of resource for which payment is being made.
 */
  request?: Reference | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * Reference of response to resource for which payment is being made.
 */
  response?: Reference | undefined;
  _response?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  
    /**
 * PaymentReconciliation
 * 
 * This resource provides the details including amount of a payment and allocates
 * the payment items being paid.
 * 
 * @see {@link http://hl7.org/fhir/R4B/PaymentReconciliation.html}
 */
    export interface PaymentReconciliation extends DomainResource {
      
      readonly resourceType: "PaymentReconciliation";
      

      
        
          
  /**
 * The date when the resource was created.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * Distribution of the payment amount for a previously acknowledged payable.
 */
  detail?: Array<BackboneElement> | undefined;
  _detail?: Element[] | undefined;

        
      
        
          
  /**
 * The monetary amount allocated from the total payment to the payable.
 */
  amount?: Money | undefined;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * The date from the response resource containing a commitment to pay.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Unique identifier for the current payment item for the referenced payable.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The party which is receiving the payment.
 */
  payee?: Reference | undefined;
  _payee?: Element | undefined;

        
      
        
          
  /**
 * Unique identifier for the prior payment item for the referenced payable.
 */
  predecessor?: Identifier | undefined;
  _predecessor?: Element | undefined;

        
      
        
          
  /**
 * A resource, such as a Claim, the evaluation of which could lead to payment.
 */
  request?: Reference | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * A resource, such as a ClaimResponse, which contains a commitment to payment.
 */
  response?: Reference | undefined;
  _response?: Element | undefined;

        
      
        
          
  /**
 * A reference to the individual who is responsible for inquiries regarding the
 * response and its payment.
 */
  responsible?: Reference | undefined;
  _responsible?: Element | undefined;

        
      
        
          
  /**
 * The party which submitted the claim or financial transaction.
 */
  submitter?: Reference | undefined;
  _submitter?: Element | undefined;

        
      
        
          
  /**
 * Code to indicate the nature of the payment.
 * For example: payment, adjustment, funds advance, etc.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A human readable description of the status of the request for the
 * reconciliation.
 */
  disposition?: string | undefined;
  _disposition?: Element | undefined;

        
      
        
          
  /**
 * A code for the form to be used for printing the content.
 * May be needed to identify specific jurisdictional forms.
 */
  formCode?: CodeableConcept | undefined;
  _formCode?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this payment reconciliation.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The outcome of a request for a reconciliation.
 * The resource may be used to indicate that: the request has been held (queued)
 * for processing; that it has been processed and errors found (error); that no
 * errors were found and that some of the adjudication has been undertaken
 * (partial) or that all of the adjudication has been undertaken (complete).
 */
  outcome?: string | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * Total payment amount as indicated on the financial instrument.
 */
  paymentAmount: Money;
  _paymentAmount?: Element | undefined;

        
      
        
          
  /**
 * The date of payment as indicated on the financial instrument.
 */
  paymentDate: string;
  _paymentDate?: Element | undefined;

        
      
        
          
  /**
 * Issuer's unique identifier for the payment instrument.
 * For example: EFT number or check number.
 */
  paymentIdentifier?: Identifier | undefined;
  _paymentIdentifier?: Element | undefined;

        
      
        
          
  /**
 * The party who generated the payment.
 * This party is also responsible for the reconciliation.
 */
  paymentIssuer?: Reference | undefined;
  _paymentIssuer?: Element | undefined;

        
      
        
          
  /**
 * The period of time for which payments have been gathered into this bulk payment
 * for settlement.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * A note that describes or explains the processing in a human readable form.
 */
  processNote?: Array<BackboneElement> | undefined;
  _processNote?: Element[] | undefined;

        
      
        
          
  /**
 * The explanation or description associated with the processing.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * The business purpose of the note text.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Original request resource reference.
 */
  request?: Reference | undefined;
  _request?: Element | undefined;

        
      
        
          
  /**
 * The practitioner who is responsible for the services rendered to the patient.
 */
  requestor?: Reference | undefined;
  _requestor?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Period
 * 
 * Base StructureDefinition for Period Type: A time period defined by a start and
 * end date and optionally time.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Period.html}
 */
    export interface Period extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The end of the period. If the end of the period is missing, it means no end was
 * known or planned at the time the instance was created. The start may be in the
 * past, and the end date in the future, which means that period is
 * expected/planned to end at that time.
 * The high value includes any matching date/time. i.e. 2012-02-03T10:00:00 is in a
 * period that has an end value of 2012-02-03.
 */
  end?: string | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * The start of the period. The boundary is inclusive.
 * If the low element is missing, the meaning is that the low boundary is not
 * known.
 */
  start?: string | undefined;
  _start?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Person
 * 
 * Demographics and administrative information about a person independent of a
 * specific health-related context.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Person.html}
 */
    export interface Person extends DomainResource {
      
      readonly resourceType: "Person";
      

      
        
          
  /**
 * Whether this person's record is in active use.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * One or more addresses for the person.
 * Person may have multiple addresses with different uses or applicable periods.
 */
  address?: Array<Address> | undefined;
  _address?: Element[] | undefined;

        
      
        
          
  /**
 * The birth date for the person.
 * At least an estimated year should be provided as a guess if the real DOB is
 * unknown.
 */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;

        
      
        
          
  /**
 * Administrative Gender.
 * The gender might not match the biological sex as determined by genetics, or the
 * individual's preferred identification. Note that for both humans and
 * particularly animals, there are other legitimate possibilities than M and F,
 * though a clear majority of systems and contexts only support M and F.
 */
  gender?: string | undefined;
  _gender?: Element | undefined;

        
      
        
          
  /**
 * Identifier for a person within a particular scope.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Link to a resource that concerns the same actual person.
 */
  link?: Array<BackboneElement> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * Level of assurance that this link is associated with the target resource.
 */
  assurance?: string | undefined;
  _assurance?: Element | undefined;

        
      
        
          
  /**
 * The resource to which this actual person is associated.
 */
  target: Reference;
  _target?: Element | undefined;

        
      
        
          
  /**
 * The organization that is the custodian of the person record.
 */
  managingOrganization?: Reference | undefined;
  _managingOrganization?: Element | undefined;

        
      
        
          
  /**
 * A name associated with the person.
 * Person may have multiple names with different uses or applicable periods.
 */
  name?: Array<HumanName> | undefined;
  _name?: Element[] | undefined;

        
      
        
          
  /**
 * An image that can be displayed as a thumbnail of the person to enhance the
 * identification of the individual.
 */
  photo?: Attachment | undefined;
  _photo?: Element | undefined;

        
      
        
          
  /**
 * A contact detail for the person, e.g. a telephone number or an email address.
 * Person may have multiple ways to be contacted with different uses or applicable
 * periods.  May need to have options for contacting the person urgently and also
 * to help with identification.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  


  


  
    /**
 * PlanDefinition
 * 
 * This resource allows for the definition of various types of plans as a sharable,
 * consumable, and executable artifact. The resource is general enough to support
 * the description of a broad range of clinical and non-clinical artifacts such as
 * clinical decision support rules, order sets, protocols, and drug quality
 * specifications.
 * 
 * @see {@link http://hl7.org/fhir/R4B/PlanDefinition.html}
 */
    export interface PlanDefinition extends DomainResource {
      
      readonly resourceType: "PlanDefinition";
      

      
        
          
  /**
 * An action or group of actions to be taken as part of the plan. For example, in
 * clinical care, an action would be to prescribe a particular indicated
 * medication, or perform a particular test as appropriate. In pharmaceutical
 * quality, an action would be the test that needs to be performed on a drug
 * product as defined in the quality specification.
 * Note that there is overlap between many of the elements defined here and the
 * ActivityDefinition resource. When an ActivityDefinition is referenced (using the
 * definition element), the overlapping elements in the plan override the content
 * of the referenced ActivityDefinition unless otherwise documented in the specific
 * elements. See the PlanDefinition resource for more detailed information.
 */
  action?: Array<BackboneElement> | undefined;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Sub actions that are contained within the action. The behavior of this action
 * determines the functionality of the sub-actions. For example, a selection
 * behavior of at-most-one indicates that of the sub-actions, at most one may be
 * chosen as part of realizing the action definition.
 */
  action?: Array<undefined> | undefined;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Defines whether the action can be selected multiple times.
 */
  cardinalityBehavior?: string | undefined;
  _cardinalityBehavior?: Element | undefined;

        
      
        
          
  /**
 * A code that provides a meaning, grouping, or classification for the action or
 * action group. For example, a section may have a LOINC code for the section of a
 * documentation template. In pharmaceutical quality, an action (Test) such as pH
 * could be classified as a physical property.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * An expression that describes applicability criteria or start/stop conditions for
 * the action.
 * When multiple conditions of the same kind are present, the effects are combined
 * using AND semantics, so the overall condition is true only if all the conditions
 * are true.
 */
  condition?: Array<BackboneElement> | undefined;
  _condition?: Element[] | undefined;

        
      
        
          
  /**
 * An expression that returns true or false, indicating whether the condition is
 * satisfied.
 * The expression may be inlined or may be a reference to a named expression within
 * a logic library referenced by the library element.
 */
  expression?: Expression | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * The kind of condition.
 * Applicability criteria are used to determine immediate applicability when a plan
 * definition is applied to a given context. Start and stop criteria are carried
 * through application and used to describe enter/exit criteria for an action.
 */
  kind: string;
  _kind?: Element | undefined;

        
      
        
          
            
  /**
 * A reference to an ActivityDefinition that describes the action to be taken in
 * detail, or a PlanDefinition that describes a series of actions to be taken.
 * Note that the definition is optional, and if no definition is specified, a
 * dynamicValue with a root ($this) path can be used to define the entire resource
 * dynamically.
 */
  definitionCanonical?: string | undefined;
  _definitionCanonical?: Element | undefined;

          
            
  /**
 * A reference to an ActivityDefinition that describes the action to be taken in
 * detail, or a PlanDefinition that describes a series of actions to be taken.
 * Note that the definition is optional, and if no definition is specified, a
 * dynamicValue with a root ($this) path can be used to define the entire resource
 * dynamically.
 */
  definitionUri?: string | undefined;
  _definitionUri?: Element | undefined;

          
        
      
        
          
  /**
 * A brief description of the action used to provide a summary to display to the
 * user.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Didactic or other informational resources associated with the action that can be
 * provided to the CDS recipient. Information resources can include inline text
 * commentary and links to web resources.
 */
  documentation?: Array<RelatedArtifact> | undefined;
  _documentation?: Element[] | undefined;

        
      
        
          
  /**
 * Customizations that should be applied to the statically defined resource. For
 * example, if the dosage of a medication must be computed based on the patient's
 * weight, a customization would be used to specify an expression that calculated
 * the weight, and the path on the resource that would contain the result.
 * Dynamic values are applied in the order in which they are defined in the
 * PlanDefinition resource. Note that when dynamic values are also specified by a
 * referenced ActivityDefinition, the dynamicValues from the ActivityDefinition are
 * applied first, followed by the dynamicValues specified here. In addition, if
 * both a transform and dynamic values are specific, the dynamic values are applied
 * to the result of the transform.
 */
  dynamicValue?: Array<BackboneElement> | undefined;
  _dynamicValue?: Element[] | undefined;

        
      
        
          
  /**
 * An expression specifying the value of the customized element.
 * The expression may be inlined or may be a reference to a named expression within
 * a logic library referenced by the library element.
 */
  expression?: Expression | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * The path to the element to be customized. This is the path on the resource that
 * will hold the result of the calculation defined by the expression. The specified
 * path SHALL be a FHIRPath resolveable on the specified target type of the
 * ActivityDefinition, and SHALL consist only of identifiers, constant indexers,
 * and a restricted subset of functions. The path is allowed to contain qualifiers
 * (.) to traverse sub-elements, as well as indexers ([x]) to traverse
 * multiple-cardinality sub-elements (see the [Simple FHIRPath
 * Profile](fhirpath.html#simple) for full details).
 * To specify the path to the current action being realized, the %action
 * environment variable is available in this path. For example, to specify the
 * description element of the target action, the path would be %action.description.
 * The path attribute contains a [Simple FHIRPath Subset](fhirpath.html#simple)
 * that allows path traversal, but not calculation.
 */
  path?: string | undefined;
  _path?: Element | undefined;

        
      
        
          
  /**
 * Identifies goals that this action supports. The reference must be to a goal
 * element defined within this plan definition. In pharmaceutical quality, a goal
 * represents acceptance criteria (Goal) for a given action (Test), so the goalId
 * would be the unique id of a defined goal element establishing the acceptance
 * criteria for the action.
 */
  goalId?: Array<id> | undefined;
  _goalId?: Element[] | undefined;

        
      
        
          
  /**
 * Defines the grouping behavior for the action and its children.
 */
  groupingBehavior?: string | undefined;
  _groupingBehavior?: Element | undefined;

        
      
        
          
  /**
 * Defines input data requirements for the action.
 */
  input?: Array<DataRequirement> | undefined;
  _input?: Element[] | undefined;

        
      
        
          
  /**
 * Defines the outputs of the action, if any.
 */
  output?: Array<DataRequirement> | undefined;
  _output?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates who should participate in performing the action described.
 */
  participant?: Array<BackboneElement> | undefined;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * The role the participant should play in performing the described action.
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * The type of participant in the action.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Defines whether the action should usually be preselected.
 */
  precheckBehavior?: string | undefined;
  _precheckBehavior?: Element | undefined;

        
      
        
          
  /**
 * A user-visible prefix for the action.
 */
  prefix?: string | undefined;
  _prefix?: Element | undefined;

        
      
        
          
  /**
 * Indicates how quickly the action should be addressed with respect to other
 * actions.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * A description of why this action is necessary or appropriate.
 * This is different than the clinical evidence documentation, it's an actual
 * business description of the reason for performing the action.
 */
  reason?: Array<CodeableConcept> | undefined;
  _reason?: Element[] | undefined;

        
      
        
          
  /**
 * A relationship to another action such as "before" or "30-60 minutes after start
 * of".
 * When an action depends on multiple actions, the meaning is that all actions are
 * dependencies, rather than that any of the actions are a dependency.
 */
  relatedAction?: Array<BackboneElement> | undefined;
  _relatedAction?: Element[] | undefined;

        
      
        
          
  /**
 * The element id of the related action.
 */
  actionId: id;
  _actionId?: Element | undefined;

        
      
        
          
            
  /**
 * A duration or range of durations to apply to the relationship. For example,
 * 30-60 minutes before.
 */
  offsetDuration?: Duration | undefined;
  _offsetDuration?: Element | undefined;

          
            
  /**
 * A duration or range of durations to apply to the relationship. For example,
 * 30-60 minutes before.
 */
  offsetRange?: Range | undefined;
  _offsetRange?: Element | undefined;

          
        
      
        
          
  /**
 * The relationship of this action to the related action.
 */
  relationship: string;
  _relationship?: Element | undefined;

        
      
        
          
  /**
 * Defines the required behavior for the action.
 */
  requiredBehavior?: string | undefined;
  _requiredBehavior?: Element | undefined;

        
      
        
          
  /**
 * Defines the selection behavior for the action and its children.
 */
  selectionBehavior?: string | undefined;
  _selectionBehavior?: Element | undefined;

        
      
        
          
            
  /**
 * A code, group definition, or canonical reference that describes the intended
 * subject of the action and its children, if any. Canonical references are allowed
 * to support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * The subject of an action overrides the subject at a parent action or on the root
 * of the PlanDefinition if specified.

In addition, because the subject needs to
 * be resolved during realization, use of subjects in actions (or in the
 * ActivityDefinition referenced by the action) resolves based on the set of
 * subjects supplied in context and by type (i.e. the patient subject would resolve
 * to a resource of type Patient).
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * A code, group definition, or canonical reference that describes the intended
 * subject of the action and its children, if any. Canonical references are allowed
 * to support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * The subject of an action overrides the subject at a parent action or on the root
 * of the PlanDefinition if specified.

In addition, because the subject needs to
 * be resolved during realization, use of subjects in actions (or in the
 * ActivityDefinition referenced by the action) resolves based on the set of
 * subjects supplied in context and by type (i.e. the patient subject would resolve
 * to a resource of type Patient).
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
            
  /**
 * A code, group definition, or canonical reference that describes the intended
 * subject of the action and its children, if any. Canonical references are allowed
 * to support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * The subject of an action overrides the subject at a parent action or on the root
 * of the PlanDefinition if specified.

In addition, because the subject needs to
 * be resolved during realization, use of subjects in actions (or in the
 * ActivityDefinition referenced by the action) resolves based on the set of
 * subjects supplied in context and by type (i.e. the patient subject would resolve
 * to a resource of type Patient).
 */
  subjectCanonical?: string | undefined;
  _subjectCanonical?: Element | undefined;

          
        
      
        
          
  /**
 * A text equivalent of the action to be performed. This provides a
 * human-interpretable description of the action when the definition is consumed by
 * a system that might not be capable of interpreting it dynamically.
 */
  textEquivalent?: string | undefined;
  _textEquivalent?: Element | undefined;

        
      
        
          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingDateTime?: string | undefined;
  _timingDateTime?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingAge?: Age | undefined;
  _timingAge?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingPeriod?: Period | undefined;
  _timingPeriod?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingDuration?: Duration | undefined;
  _timingDuration?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingRange?: Range | undefined;
  _timingRange?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingTiming?: Timing | undefined;
  _timingTiming?: Element | undefined;

          
        
      
        
          
  /**
 * The textual description of the action displayed to a user. For example, when the
 * action is a test to be performed, the title would be the title of the test such
 * as Assay by HPLC.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * A reference to a StructureMap resource that defines a transform that can be
 * executed to produce the intent resource using the ActivityDefinition instance as
 * the input.
 * Note that when a referenced ActivityDefinition also defines a transform, the
 * transform specified here generally takes precedence. In addition, if both a
 * transform and dynamic values are specific, the dynamic values are applied to the
 * result of the transform.
 */
  transform?: string | undefined;
  _transform?: Element | undefined;

        
      
        
          
  /**
 * A description of when the action should be triggered.
 */
  trigger?: Array<TriggerDefinition> | undefined;
  _trigger?: Element[] | undefined;

        
      
        
          
  /**
 * The type of action to perform (create, update, remove).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the plan definition and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the plan definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the plan definition was published. The date
 * must change when the business version changes and it must change if the status
 * code changes. In addition, it should change when the substantive content of the
 * plan definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the plan definition. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the plan definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the plan definition
 * was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the plan definition as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the plan definition is presumed to
 * be the predominant language in the place the plan definition was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the plan definition content was or is planned to be in
 * active use.
 * The effective period for a plan definition  determines when the content is
 * applicable for usage and is independent of publication and review dates. For
 * example, a measure intended to be used for the year 2016 might be published in
 * 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this plan definition is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of plan definitions that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A goal describes an expected outcome that activities within the plan are
 * intended to achieve. For example, weight loss, restoring an activity of daily
 * living, obtaining herd immunity via immunization, meeting a process improvement
 * objective, meeting the acceptance criteria for a test as specified by a quality
 * specification, etc.
 */
  goal?: Array<BackboneElement> | undefined;
  _goal?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies problems, conditions, issues, or concerns the goal is intended to
 * address.
 */
  addresses?: Array<CodeableConcept> | undefined;
  _addresses?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a category the goal falls within.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * Human-readable and/or coded description of a specific desired objective of care,
 * such as "control blood pressure" or "negotiate an obstacle course" or "dance
 * with child at wedding".
 * If no code is available, use CodeableConcept.text.
 */
  description: CodeableConcept;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Didactic or other informational resources associated with the goal that provide
 * further supporting information about the goal. Information resources can include
 * inline text commentary and links to web resources.
 */
  documentation?: Array<RelatedArtifact> | undefined;
  _documentation?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the expected level of importance associated with reaching/sustaining
 * the defined goal.
 */
  priority?: CodeableConcept | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * The event after which the goal should begin being pursued.
 */
  start?: CodeableConcept | undefined;
  _start?: Element | undefined;

        
      
        
          
  /**
 * Indicates what should be done and within what timeframe.
 */
  target?: Array<BackboneElement> | undefined;
  _target?: Element[] | undefined;

        
      
        
          
            
  /**
 * The target value of the measure to be achieved to signify fulfillment of the
 * goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT
 * 0.6%, Clear solution, etc. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any value at or below the high value. Similarly, if the high value
 * is missing, it indicates that the goal is achieved at any value at or above the
 * low value.
 */
  detailQuantity?: Quantity | undefined;
  _detailQuantity?: Element | undefined;

          
            
  /**
 * The target value of the measure to be achieved to signify fulfillment of the
 * goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT
 * 0.6%, Clear solution, etc. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any value at or below the high value. Similarly, if the high value
 * is missing, it indicates that the goal is achieved at any value at or above the
 * low value.
 */
  detailRange?: Range | undefined;
  _detailRange?: Element | undefined;

          
            
  /**
 * The target value of the measure to be achieved to signify fulfillment of the
 * goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT
 * 0.6%, Clear solution, etc. Either the high or low or both values of the range
 * can be specified. When a low value is missing, it indicates that the goal is
 * achieved at any value at or below the high value. Similarly, if the high value
 * is missing, it indicates that the goal is achieved at any value at or above the
 * low value.
 */
  detailCodeableConcept?: CodeableConcept | undefined;
  _detailCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates the timeframe after the start of the goal in which the goal should be
 * met.
 */
  due?: Duration | undefined;
  _due?: Element | undefined;

        
      
        
          
  /**
 * The parameter whose value is to be tracked, e.g. body weight, blood pressure, or
 * hemoglobin A1c level.
 */
  measure?: CodeableConcept | undefined;
  _measure?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this plan definition when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this plan definition outside of
 * FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the plan definition is intended to be
 * used.
 * It may be possible for the plan definition to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A reference to a Library resource containing any formal logic used by the plan
 * definition.
 */
  library?: Array<string> | undefined;
  _library?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the plan definition. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the plan definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the plan definition is the organization or individual primarily responsible for
 * the maintenance and upkeep of the plan definition. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the plan definition. This item SHOULD be populated unless the information
 * is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this plan definition is needed and why it has been designed
 * as it has.
 * This element does not describe the usage of the plan definition. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this plan definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Related artifacts such as additional documentation, justification, or
 * bibliographic references.
 * Each related artifact is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this plan definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of plan definitions that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * A code, group definition, or canonical reference that describes  or identifies
 * the intended subject of the plan definition. Canonical references are allowed to
 * support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * Note that the choice of canonical for the subject element was introduced in R4B
 * to support pharmaceutical quality use cases. To ensure as much
 * backwards-compatibility as possible, it is recommended to only use the new
 * canonical type with these use cases.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * A code, group definition, or canonical reference that describes  or identifies
 * the intended subject of the plan definition. Canonical references are allowed to
 * support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * Note that the choice of canonical for the subject element was introduced in R4B
 * to support pharmaceutical quality use cases. To ensure as much
 * backwards-compatibility as possible, it is recommended to only use the new
 * canonical type with these use cases.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
            
  /**
 * A code, group definition, or canonical reference that describes  or identifies
 * the intended subject of the plan definition. Canonical references are allowed to
 * support the definition of protocols for drug and substance quality
 * specifications, and is allowed to reference a MedicinalProductDefinition,
 * SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition,
 * or PackagedProductDefinition resource.
 * Note that the choice of canonical for the subject element was introduced in R4B
 * to support pharmaceutical quality use cases. To ensure as much
 * backwards-compatibility as possible, it is recommended to only use the new
 * canonical type with these use cases.
 */
  subjectCanonical?: string | undefined;
  _subjectCanonical?: Element | undefined;

          
        
      
        
          
  /**
 * An explanatory or alternate title for the plan definition giving additional
 * information about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the plan definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Descriptive topics related to the content of the plan definition. Topics provide
 * a high-level categorization of the definition that can be useful for filtering
 * and searching.
 */
  topic?: Array<CodeableConcept> | undefined;
  _topic?: Element[] | undefined;

        
      
        
          
  /**
 * A high-level category for the plan definition that distinguishes the kinds of
 * systems that would be interested in the plan definition.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this plan definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this plan definition is
 * (or will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the plan definition is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A detailed description of how the plan definition is used from a clinical
 * perspective.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate plan definition
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the plan definition when
 * it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the plan definition author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence. To provide a version consistent with
 * the Decision Support Service specification, use the format Major.Minor.Revision
 * (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the
 * Decision Support Service specification. Note that a version is required for
 * non-experimental active artifacts.
 * There may be different plan definition instances that have the same identifier
 * but different versions.  The version can be appended to the url in a reference
 * to allow a reference to a particular business version of the plan definition
 * with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * Population
 * 
 * Base StructureDefinition for Population Type: A populatioof people with some set
 * of grouping criteria.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Population.html}
 */
    export interface Population extends BackboneElement {
      
      readonly resourceType: string;
      

      
        
          
            
  /**
 * The age of the specific population.
 */
  ageRange?: Range | undefined;
  _ageRange?: Element | undefined;

          
            
  /**
 * The age of the specific population.
 */
  ageCodeableConcept?: CodeableConcept | undefined;
  _ageCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * The gender of the specific population.
 */
  gender?: CodeableConcept | undefined;
  _gender?: Element | undefined;

        
      
        
          
  /**
 * The existing physiological conditions of the specific population to which this
 * applies.
 */
  physiologicalCondition?: CodeableConcept | undefined;
  _physiologicalCondition?: Element | undefined;

        
      
        
          
  /**
 * Race of the specific population.
 */
  race?: CodeableConcept | undefined;
  _race?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Practitioner
 * 
 * A person who is directly or indirectly involved in the provisioning of
 * healthcare.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Practitioner.html}
 */
    export interface Practitioner extends DomainResource {
      
      readonly resourceType: "Practitioner";
      

      
        
          
  /**
 * Whether this practitioner's record is in active use.
 * If the practitioner is not in use by one organization, then it should mark the
 * period on the PractitonerRole with an end date (even if they are active) as they
 * may be active in another role.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * Address(es) of the practitioner that are not role specific (typically home
 * address). Work addresses are not typically entered in this property as they are
 * usually role dependent.
 * The PractitionerRole does not have an address value on it, as it is expected
 * that the location property be used for this purpose (which has an address).
 */
  address?: Array<Address> | undefined;
  _address?: Element[] | undefined;

        
      
        
          
  /**
 * The date of birth for the practitioner.
 */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;

        
      
        
          
  /**
 * A language the practitioner can use in patient communication.
 * The structure aa-BB with this exact casing is one the most widely used notations
 * for locale. However not all systems code this but instead have it as free text.
 * Hence CodeableConcept instead of code as the data type.
 */
  communication?: Array<CodeableConcept> | undefined;
  _communication?: Element[] | undefined;

        
      
        
          
  /**
 * Administrative Gender - the gender that the person is considered to have for
 * administration and record keeping purposes.
 */
  gender?: string | undefined;
  _gender?: Element | undefined;

        
      
        
          
  /**
 * An identifier that applies to this person in this role.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The name(s) associated with the practitioner.
 * The selection of the use property should ensure that there is a single usual
 * name specified, and others use the nickname (alias), old, or other values as
 * appropriate.  In general, select the value to be used in the
 * ResourceReference.display based on this:1. There is more than 1 name2. Use =
 * usual3. Period is current to the date of the usage4. Use = official5. Other
 * order as decided by internal business rules.
 */
  name?: Array<HumanName> | undefined;
  _name?: Element[] | undefined;

        
      
        
          
  /**
 * Image of the person.
 */
  photo?: Array<Attachment> | undefined;
  _photo?: Element[] | undefined;

        
      
        
          
  /**
 * The official certifications, training, and licenses that authorize or otherwise
 * pertain to the provision of care by the practitioner.  For example, a medical
 * license issued by a medical board authorizing the practitioner to practice
 * medicine within a certian locality.
 */
  qualification?: Array<BackboneElement> | undefined;
  _qualification?: Element[] | undefined;

        
      
        
          
  /**
 * Coded representation of the qualification.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * An identifier that applies to this person's qualification in this role.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Organization that regulates and issues the qualification.
 */
  issuer?: Reference | undefined;
  _issuer?: Element | undefined;

        
      
        
          
  /**
 * Period during which the qualification is valid.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * A contact detail for the practitioner, e.g. a telephone number or an email
 * address.
 * Person may have multiple ways to be contacted with different uses or applicable
 * periods.  May need to have options for contacting the person urgently and to
 * help with identification.  These typically will have home numbers, or mobile
 * numbers that are not role specific.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  
    /**
 * PractitionerRole
 * 
 * A specific set of Roles/Locations/specialties/services that a practitioner may
 * perform at an organization for a period of time.
 * 
 * @see {@link http://hl7.org/fhir/R4B/PractitionerRole.html}
 */
    export interface PractitionerRole extends DomainResource {
      
      readonly resourceType: "PractitionerRole";
      

      
        
          
  /**
 * Whether this practitioner role record is in active use.
 * If this value is false, you may refer to the period to see when the role was in
 * active use. If there is no period specified, no inference can be made about when
 * it was active.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * A description of site availability exceptions, e.g. public holiday availability.
 * Succinctly describing all possible exceptions to normal site availability as
 * details in the available Times and not available Times.
 */
  availabilityExceptions?: string | undefined;
  _availabilityExceptions?: Element | undefined;

        
      
        
          
  /**
 * A collection of times the practitioner is available or performing this role at
 * the location and/or healthcareservice.
 * More detailed availability information may be provided in associated
 * Schedule/Slot resources.
 */
  availableTime?: Array<BackboneElement> | undefined;
  _availableTime?: Element[] | undefined;

        
      
        
          
  /**
 * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
 */
  allDay?: boolean | undefined;
  _allDay?: Element | undefined;

        
      
        
          
  /**
 * The closing time of day. Note: If the AllDay flag is set, then this time is
 * ignored.
 * The timezone is expected to be for where this HealthcareService is provided at.
 */
  availableEndTime?: time | undefined;
  _availableEndTime?: Element | undefined;

        
      
        
          
  /**
 * The opening time of day. Note: If the AllDay flag is set, then this time is
 * ignored.
 * The timezone is expected to be for where this HealthcareService is provided at.
 */
  availableStartTime?: time | undefined;
  _availableStartTime?: Element | undefined;

        
      
        
          
  /**
 * Indicates which days of the week are available between the start and end Times.
 */
  daysOfWeek?: Array<string> | undefined;
  _daysOfWeek?: Element[] | undefined;

        
      
        
          
  /**
 * Roles which this practitioner is authorized to perform for the organization.
 * A person may have more than one role.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * Technical endpoints providing access to services operated for the practitioner
 * with this role.
 */
  endpoint?: Array<Reference> | undefined;
  _endpoint?: Element[] | undefined;

        
      
        
          
  /**
 * The list of healthcare services that this worker provides for this role's
 * Organization/Location(s).
 */
  healthcareService?: Array<Reference> | undefined;
  _healthcareService?: Element[] | undefined;

        
      
        
          
  /**
 * Business Identifiers that are specific to a role/location.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The location(s) at which this practitioner provides care.
 */
  location?: Array<Reference> | undefined;
  _location?: Element[] | undefined;

        
      
        
          
  /**
 * The practitioner is not available or performing this role during this period of
 * time due to the provided reason.
 */
  notAvailable?: Array<BackboneElement> | undefined;
  _notAvailable?: Element[] | undefined;

        
      
        
          
  /**
 * The reason that can be presented to the user as to why this time is not
 * available.
 */
  description: string;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Service is not available (seasonally or for a public holiday) from this date.
 */
  during?: Period | undefined;
  _during?: Element | undefined;

        
      
        
          
  /**
 * The organization where the Practitioner performs the roles associated.
 */
  organization?: Reference | undefined;
  _organization?: Element | undefined;

        
      
        
          
  /**
 * The period during which the person is authorized to act as a practitioner in
 * these role(s) for the organization.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Practitioner that is able to provide the defined services for the organization.
 */
  practitioner?: Reference | undefined;
  _practitioner?: Element | undefined;

        
      
        
          
  /**
 * Specific specialty of the practitioner.
 */
  specialty?: Array<CodeableConcept> | undefined;
  _specialty?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details that are specific to the role/location/service.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  
    /**
 * Procedure
 * 
 * An action that is or was performed on or for a patient. This can be a physical
 * intervention like an operation, or less invasive like long term services,
 * counseling, or hypnotherapy.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Procedure.html}
 */
    export interface Procedure extends DomainResource {
      
      readonly resourceType: "Procedure";
      

      
        
          
  /**
 * Individual who is making the procedure statement.
 */
  asserter?: Reference | undefined;
  _asserter?: Element | undefined;

        
      
        
          
  /**
 * A reference to a resource that contains details of the request for this
 * procedure.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Detailed and structured anatomical location information. Multiple locations are
 * allowed - e.g. multiple punch biopsies of a lesion.
 * If the use case requires attributes from the BodySite resource (e.g. to identify
 * and track separately) then use the standard extension
 * [procedure-targetbodystructure](extension-procedure-targetbodystructure.html).
 */
  bodySite?: Array<CodeableConcept> | undefined;
  _bodySite?: Element[] | undefined;

        
      
        
          
  /**
 * A code that classifies the procedure for searching, sorting and display purposes
 * (e.g. "Surgical Procedure").
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * The specific procedure that is performed. Use text if the exact nature of the
 * procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Any complications that occurred during the procedure, or in the immediate
 * post-performance period. These are generally tracked separately from the notes,
 * which will typically describe the procedure itself rather than any 'post
 * procedure' issues.
 * If complications are only expressed by the narrative text, they can be captured
 * using the CodeableConcept.text.
 */
  complication?: Array<CodeableConcept> | undefined;
  _complication?: Element[] | undefined;

        
      
        
          
  /**
 * Any complications that occurred during the procedure, or in the immediate
 * post-performance period.
 */
  complicationDetail?: Array<Reference> | undefined;
  _complicationDetail?: Element[] | undefined;

        
      
        
          
  /**
 * The Encounter during which this Procedure was created or performed or to which
 * the creation of this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * A device that is implanted, removed or otherwise manipulated (calibration,
 * battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a
 * focal portion of the Procedure.
 */
  focalDevice?: Array<BackboneElement> | undefined;
  _focalDevice?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of change that happened to the device during the procedure.
 */
  action?: CodeableConcept | undefined;
  _action?: Element | undefined;

        
      
        
          
  /**
 * The device that was manipulated (changed) during the procedure.
 */
  manipulated: Reference;
  _manipulated?: Element | undefined;

        
      
        
          
  /**
 * If the procedure required specific follow up - e.g. removal of sutures. The
 * follow up may be represented as a simple note or could potentially be more
 * complex, in which case the CarePlan resource can be used.
 */
  followUp?: Array<CodeableConcept> | undefined;
  _followUp?: Element[] | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this procedure by the performer or other
 * systems which remain constant as the resource is updated and is propagated from
 * server to server.
 * This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and Person resource instances might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, order set or other
 * definition that is adhered to in whole or in part by this Procedure.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, order set or
 * other definition that is adhered to in whole or in part by this Procedure.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * The location where the procedure actually happened.  E.g. a newborn at home, a
 * tracheostomy at a restaurant.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Any other notes and comments about the procedure.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * The outcome of the procedure - did it resolve the reasons for the procedure
 * being performed?
 * If outcome contains narrative text only, it can be captured using the
 * CodeableConcept.text.
 */
  outcome?: CodeableConcept | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * A larger event of which this particular procedure is a component or step.
 * The MedicationAdministration resource has a partOf reference to Procedure, but
 * this is not a circular reference.   For example, the anesthesia
 * MedicationAdministration is part of the surgical Procedure
 * (MedicationAdministration.partOf = Procedure).  For example, the procedure to
 * insert the IV port for an IV medication administration is part of the medication
 * administration (Procedure.partOf = MedicationAdministration).
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
            
  /**
 * Estimated or actual date, date-time, period, or age when the procedure was
 * performed.  Allows a period to support complex procedures that span more than
 * one date, and also allows for the length of the procedure to be captured.
 * Age is generally used when the patient reports an age at which the procedure was
 * performed. Range is generally used when the patient reports an age range when
 * the procedure was performed, such as sometime between 20-25 years old.  dateTime
 * supports a range of precision due to some procedures being reported as past
 * procedures that might not have millisecond precision while other procedures
 * performed and documented during the encounter might have more precise UTC
 * timestamps with timezone.
 */
  performedDateTime?: string | undefined;
  _performedDateTime?: Element | undefined;

          
            
  /**
 * Estimated or actual date, date-time, period, or age when the procedure was
 * performed.  Allows a period to support complex procedures that span more than
 * one date, and also allows for the length of the procedure to be captured.
 * Age is generally used when the patient reports an age at which the procedure was
 * performed. Range is generally used when the patient reports an age range when
 * the procedure was performed, such as sometime between 20-25 years old.  dateTime
 * supports a range of precision due to some procedures being reported as past
 * procedures that might not have millisecond precision while other procedures
 * performed and documented during the encounter might have more precise UTC
 * timestamps with timezone.
 */
  performedPeriod?: Period | undefined;
  _performedPeriod?: Element | undefined;

          
            
  /**
 * Estimated or actual date, date-time, period, or age when the procedure was
 * performed.  Allows a period to support complex procedures that span more than
 * one date, and also allows for the length of the procedure to be captured.
 * Age is generally used when the patient reports an age at which the procedure was
 * performed. Range is generally used when the patient reports an age range when
 * the procedure was performed, such as sometime between 20-25 years old.  dateTime
 * supports a range of precision due to some procedures being reported as past
 * procedures that might not have millisecond precision while other procedures
 * performed and documented during the encounter might have more precise UTC
 * timestamps with timezone.
 */
  performedString?: string | undefined;
  _performedString?: Element | undefined;

          
            
  /**
 * Estimated or actual date, date-time, period, or age when the procedure was
 * performed.  Allows a period to support complex procedures that span more than
 * one date, and also allows for the length of the procedure to be captured.
 * Age is generally used when the patient reports an age at which the procedure was
 * performed. Range is generally used when the patient reports an age range when
 * the procedure was performed, such as sometime between 20-25 years old.  dateTime
 * supports a range of precision due to some procedures being reported as past
 * procedures that might not have millisecond precision while other procedures
 * performed and documented during the encounter might have more precise UTC
 * timestamps with timezone.
 */
  performedAge?: Age | undefined;
  _performedAge?: Element | undefined;

          
            
  /**
 * Estimated or actual date, date-time, period, or age when the procedure was
 * performed.  Allows a period to support complex procedures that span more than
 * one date, and also allows for the length of the procedure to be captured.
 * Age is generally used when the patient reports an age at which the procedure was
 * performed. Range is generally used when the patient reports an age range when
 * the procedure was performed, such as sometime between 20-25 years old.  dateTime
 * supports a range of precision due to some procedures being reported as past
 * procedures that might not have millisecond precision while other procedures
 * performed and documented during the encounter might have more precise UTC
 * timestamps with timezone.
 */
  performedRange?: Range | undefined;
  _performedRange?: Element | undefined;

          
        
      
        
          
  /**
 * Limited to "real" people rather than equipment.
 */
  performer?: Array<BackboneElement> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * The practitioner who was involved in the procedure.
 */
  actor: Reference;
  _actor?: Element | undefined;

        
      
        
          
  /**
 * Distinguishes the type of involvement of the performer in the procedure. For
 * example, surgeon, anaesthetist, endoscopist.
 */
  function?: CodeableConcept | undefined;
  _function?: Element | undefined;

        
      
        
          
  /**
 * The organization the device or practitioner was acting on behalf of.
 */
  onBehalfOf?: Reference | undefined;
  _onBehalfOf?: Element | undefined;

        
      
        
          
  /**
 * The coded reason why the procedure was performed. This may be a coded entity of
 * some type, or may simply be present as text.
 * Use Procedure.reasonCode when a code sufficiently describes the reason.  Use
 * Procedure.reasonReference when referencing a resource, which allows more
 * information to be conveyed, such as onset date. Procedure.reasonCode and
 * Procedure.reasonReference are not meant to be duplicative.  For a single reason,
 * either Procedure.reasonCode or Procedure.reasonReference can be used.
 * Procedure.reasonCode may be a summary code, or Procedure.reasonReference may be
 * used to reference a very precise definition of the reason using Condition |
 * Observation | Procedure | DiagnosticReport | DocumentReference.  Both
 * Procedure.reasonCode and Procedure.reasonReference can be used if they are
 * describing different reasons for the procedure.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * The justification of why the procedure was performed.
 * It is possible for a procedure to be a reason (such as C-Section) for another
 * procedure (such as an epidural). Other examples include endoscopy for dilatation
 * and biopsy (a combination of diagnostic and therapeutic use). 
Use
 * Procedure.reasonCode when a code sufficiently describes the reason.  Use
 * Procedure.reasonReference when referencing a resource, which allows more
 * information to be conveyed, such as onset date. Procedure.reasonCode and
 * Procedure.reasonReference are not meant to be duplicative.  For a single reason,
 * either Procedure.reasonCode or Procedure.reasonReference can be used.
 * Procedure.reasonCode may be a summary code, or Procedure.reasonReference may be
 * used to reference a very precise definition of the reason using Condition |
 * Observation | Procedure | DiagnosticReport | DocumentReference.  Both
 * Procedure.reasonCode and Procedure.reasonReference can be used if they are
 * describing different reasons for the procedure.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * Individual who recorded the record and takes responsibility for its content.
 */
  recorder?: Reference | undefined;
  _recorder?: Element | undefined;

        
      
        
          
  /**
 * This could be a histology result, pathology report, surgical report, etc.
 * There could potentially be multiple reports - e.g. if this was a procedure which
 * took multiple biopsies resulting in a number of anatomical pathology reports.
 */
  report?: Array<Reference> | undefined;
  _report?: Element[] | undefined;

        
      
        
          
  /**
 * A code specifying the state of the procedure. Generally, this will be the
 * in-progress or completed state.
 * The "unknown" code is not to be used to convey other statuses.  The "unknown"
 * code should be used when one of the statuses applies, but the authoring system
 * doesn't know the current state of the procedure.

This element is labeled as a
 * modifier because the status contains codes that mark the resource as not
 * currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the procedure.
 * This is generally only used for "exception" statuses such as "not-done",
 * "suspended" or "aborted". The reason for performing the event at all is captured
 * in reasonCode, not here.
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * The person, animal or group on which the procedure was performed.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Identifies coded items that were used as part of the procedure.
 * For devices actually implanted or removed, use Procedure.device.
 */
  usedCode?: Array<CodeableConcept> | undefined;
  _usedCode?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies medications, devices and any other substance used as part of the
 * procedure.
 * For devices actually implanted or removed, use Procedure.device.
 */
  usedReference?: Array<Reference> | undefined;
  _usedReference?: Element[] | undefined;

        
      
    }

  


  


  
    /**
 * ProdCharacteristic
 * 
 * Base StructureDefinition for ProdCharacteristic Type: The marketing status
 * describes the date when a medicinal product is actually put on the market or the
 * date as of which it is no longer available.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ProdCharacteristic.html}
 */
    export interface ProdCharacteristic extends BackboneElement {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Where applicable, the color can be specified An appropriate controlled
 * vocabulary shall be used The term and the term identifier shall be used.
 */
  color?: Array<string> | undefined;
  _color?: Element[] | undefined;

        
      
        
          
  /**
 * Where applicable, the depth can be specified using a numerical value and its
 * unit of measurement The unit of measurement shall be specified in accordance
 * with ISO 11240 and the resulting terminology The symbol and the symbol
 * identifier shall be used.
 */
  depth?: Quantity | undefined;
  _depth?: Element | undefined;

        
      
        
          
  /**
 * Where applicable, the external diameter can be specified using a numerical value
 * and its unit of measurement The unit of measurement shall be specified in
 * accordance with ISO 11240 and the resulting terminology The symbol and the
 * symbol identifier shall be used.
 */
  externalDiameter?: Quantity | undefined;
  _externalDiameter?: Element | undefined;

        
      
        
          
  /**
 * Where applicable, the height can be specified using a numerical value and its
 * unit of measurement The unit of measurement shall be specified in accordance
 * with ISO 11240 and the resulting terminology The symbol and the symbol
 * identifier shall be used.
 */
  height?: Quantity | undefined;
  _height?: Element | undefined;

        
      
        
          
  /**
 * Where applicable, the image can be provided The format of the image attachment
 * shall be specified by regional implementations.
 */
  image?: Array<Attachment> | undefined;
  _image?: Element[] | undefined;

        
      
        
          
  /**
 * Where applicable, the imprint can be specified as text.
 */
  imprint?: Array<string> | undefined;
  _imprint?: Element[] | undefined;

        
      
        
          
  /**
 * Where applicable, the nominal volume can be specified using a numerical value
 * and its unit of measurement The unit of measurement shall be specified in
 * accordance with ISO 11240 and the resulting terminology The symbol and the
 * symbol identifier shall be used.
 */
  nominalVolume?: Quantity | undefined;
  _nominalVolume?: Element | undefined;

        
      
        
          
  /**
 * Where applicable, the scoring can be specified An appropriate controlled
 * vocabulary shall be used The term and the term identifier shall be used.
 */
  scoring?: CodeableConcept | undefined;
  _scoring?: Element | undefined;

        
      
        
          
  /**
 * Where applicable, the shape can be specified An appropriate controlled
 * vocabulary shall be used The term and the term identifier shall be used.
 */
  shape?: string | undefined;
  _shape?: Element | undefined;

        
      
        
          
  /**
 * Where applicable, the weight can be specified using a numerical value and its
 * unit of measurement The unit of measurement shall be specified in accordance
 * with ISO 11240 and the resulting terminology The symbol and the symbol
 * identifier shall be used.
 */
  weight?: Quantity | undefined;
  _weight?: Element | undefined;

        
      
        
          
  /**
 * Where applicable, the width can be specified using a numerical value and its
 * unit of measurement The unit of measurement shall be specified in accordance
 * with ISO 11240 and the resulting terminology The symbol and the symbol
 * identifier shall be used.
 */
  width?: Quantity | undefined;
  _width?: Element | undefined;

        
      
    }

  


  
    /**
 * ProductShelfLife
 * 
 * Base StructureDefinition for ProductShelfLife Type: The shelf-life and storage
 * information for a medicinal product item or container can be described using
 * this class.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ProductShelfLife.html}
 */
    export interface ProductShelfLife extends BackboneElement {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Unique identifier for the packaged Medicinal Product.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The shelf life time period can be specified using a numerical value for the
 * period of time and its unit of time measurement The unit of measurement shall be
 * specified in accordance with ISO 11240 and the resulting terminology The symbol
 * and the symbol identifier shall be used.
 */
  period: Quantity;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Special precautions for storage, if any, can be specified using an appropriate
 * controlled vocabulary The controlled term and the controlled term identifier
 * shall be specified.
 */
  specialPrecautionsForStorage?: Array<CodeableConcept> | undefined;
  _specialPrecautionsForStorage?: Element[] | undefined;

        
      
        
          
  /**
 * This describes the shelf life, taking into account various scenarios such as
 * shelf life of the packaged Medicinal Product itself, shelf life after
 * transformation where necessary and shelf life after the first opening of a
 * bottle, etc. The shelf life type shall be specified using an appropriate
 * controlled vocabulary The controlled term and the controlled term identifier
 * shall be specified.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  
    /**
 * Provenance
 * 
 * Provenance of a resource is a record that describes entities and processes
 * involved in producing and delivering or otherwise influencing that resource.
 * Provenance provides a critical foundation for assessing authenticity, enabling
 * trust, and allowing reproducibility. Provenance assertions are a form of
 * contextual metadata and can themselves become important records with their own
 * provenance. Provenance statement indicates clinical significance in terms of
 * confidence in authenticity, reliability, and trustworthiness, integrity, and
 * stage in lifecycle (e.g. Document Completion - has the artifact been legally
 * authenticated), all of which may impact security, privacy, and trust policies.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Provenance.html}
 */
    export interface Provenance extends DomainResource {
      
      readonly resourceType: "Provenance";
      

      
        
          
  /**
 * An activity is something that occurs over a period of time and acts upon or with
 * entities; it may include consuming, processing, transforming, modifying,
 * relocating, using, or generating entities.
 */
  activity?: CodeableConcept | undefined;
  _activity?: Element | undefined;

        
      
        
          
  /**
 * An actor taking a role in an activity  for which it can be assigned some degree
 * of responsibility for the activity taking place.
 * Several agents may be associated (i.e. has some responsibility for an activity)
 * with an activity and vice-versa.
 */
  agent: Array<BackboneElement>;
  _agent?: Element[] | undefined;

        
      
        
          
  /**
 * The individual, device, or organization for whom the change was made.
 * onBehalfOfIdentity should be used when the agent is not a Resource type.
 */
  onBehalfOf?: Reference | undefined;
  _onBehalfOf?: Element | undefined;

        
      
        
          
  /**
 * The function of the agent with respect to the activity. The security role
 * enabling the agent with respect to the activity.
 * For example: doctor, nurse, clerk, etc.
 */
  role?: Array<CodeableConcept> | undefined;
  _role?: Element[] | undefined;

        
      
        
          
  /**
 * The participation the agent had with respect to the activity.
 * For example: author, performer, enterer, attester, etc.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The individual, device or organization that participated in the event.
 * whoIdentity should be used when the agent is not a Resource type.
 */
  who: Reference;
  _who?: Element | undefined;

        
      
        
          
  /**
 * An entity used in this activity.
 */
  entity?: Array<BackboneElement> | undefined;
  _entity?: Element[] | undefined;

        
      
        
          
  /**
 * The entity is attributed to an agent to express the agent's responsibility for
 * that entity, possibly along with other agents. This description can be
 * understood as shorthand for saying that the agent was responsible for the
 * activity which generated the entity.
 * A usecase where one Provenance.entity.agent is used where the Entity that was
 * used in the creation/updating of the Target, is not in the context of the same
 * custodianship as the Target, and thus the meaning of Provenance.entity.agent is
 * to say that the entity referenced is managed elsewhere and that this Agent
 * provided access to it.  This would be similar to where the Entity being
 * referenced is managed outside FHIR, such as through HL7 v2, v3, or XDS. This
 * might be where the Entity being referenced is managed in another FHIR resource
 * server. Thus it explains the Provenance of that Entity's use in the context of
 * this Provenance activity.
 */
  agent?: Array<undefined> | undefined;
  _agent?: Element[] | undefined;

        
      
        
          
  /**
 * How the entity was used during the activity.
 */
  role: string;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Identity of the  Entity used. May be a logical or physical uri and maybe
 * absolute or relative.
 * whatIdentity should be used for entities that are not a Resource type.
 */
  what: Reference;
  _what?: Element | undefined;

        
      
        
          
  /**
 * Where the activity occurred, if relevant.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
            
  /**
 * The period during which the activity occurred.
 * The period can be a little arbitrary; where possible, the time should correspond
 * to human assessment of the activity time.
 */
  occurredPeriod?: Period | undefined;
  _occurredPeriod?: Element | undefined;

          
            
  /**
 * The period during which the activity occurred.
 * The period can be a little arbitrary; where possible, the time should correspond
 * to human assessment of the activity time.
 */
  occurredDateTime?: string | undefined;
  _occurredDateTime?: Element | undefined;

          
        
      
        
          
  /**
 * Policy or plan the activity was defined by. Typically, a single activity may
 * have multiple applicable policy documents, such as patient consent, guarantor
 * funding, etc.
 * For example: Where an OAuth token authorizes, the unique identifier from the
 * OAuth token is placed into the policy element Where a policy engine (e.g. XACML)
 * holds policy logic, the unique policy identifier is placed into the policy
 * element.
 */
  policy?: Array<string> | undefined;
  _policy?: Element[] | undefined;

        
      
        
          
  /**
 * The reason that the activity was taking place.
 */
  reason?: Array<CodeableConcept> | undefined;
  _reason?: Element[] | undefined;

        
      
        
          
  /**
 * The instant of time at which the activity was recorded.
 * This can be a little different from the time stamp on the resource if there is a
 * delay between recording the event and updating the provenance and target
 * resource.
 */
  recorded: string;
  _recorded?: Element | undefined;

        
      
        
          
  /**
 * A digital signature on the target Reference(s). The signer should match a
 * Provenance.agent. The purpose of the signature is indicated.
 */
  signature?: Array<Signature> | undefined;
  _signature?: Element[] | undefined;

        
      
        
          
  /**
 * The Reference(s) that were generated or updated by  the activity described in
 * this resource. A provenance can point to more than one target if multiple
 * resources were created/updated by the same activity.
 * Target references are usually version specific, but might not be, if a version
 * has not been assigned or if the provenance information is part of the set of
 * resources being maintained (i.e. a document). When using the RESTful API, the
 * identity of the resource might not be known (especially not the version specific
 * one); the client may either submit the resource first, and then the provenance,
 * or it may submit both using a single transaction. See the notes on transaction
 * for further discussion.
 */
  target: Array<Reference>;
  _target?: Element[] | undefined;

        
      
    }

  


  


  


  
    /**
 * Quantity
 * 
 * Base StructureDefinition for Quantity Type: A measured amount (or an amount that
 * can potentially be measured). Note that measured amounts include amounts that
 * are not precisely quantified, including amounts involving arbitrary units and
 * floating currencies.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Quantity.html}
 */
    export interface Quantity extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A computer processable form of the unit in some unit representation system.
 * The preferred system is UCUM, but SNOMED CT can also be used (for customary
 * units) or ISO 4217 for currency.  The context of use may additionally require a
 * code from a particular system.
 */
  code?: string | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * How the value should be understood and represented - whether the actual value is
 * greater or less than the stated value due to measurement issues; e.g. if the
 * comparator is "<" , then the real value is < stated value.
 */
  comparator?: string | undefined;
  _comparator?: Element | undefined;

        
      
        
          
  /**
 * The identification of the system that provides the coded form of the unit.
 */
  system?: string | undefined;
  _system?: Element | undefined;

        
      
        
          
  /**
 * A human-readable form of the unit.
 */
  unit?: string | undefined;
  _unit?: Element | undefined;

        
      
        
          
  /**
 * The value of the measured amount. The value includes an implicit precision in
 * the presentation of the value.
 * The implicit precision in the value should always be honored. Monetary values
 * have their own rules for handling precision (refer to standard accounting text
 * books).
 */
  value?: number | undefined;
  _value?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Questionnaire
 * 
 * A structured set of questions intended to guide the collection of answers from
 * end-users. Questionnaires provide detailed control over order, presentation,
 * phraseology and grouping to allow coherent, consistent data collection.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Questionnaire.html}
 */
    export interface Questionnaire extends DomainResource {
      
      readonly resourceType: "Questionnaire";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An identifier for this question or group of questions in a particular
 * terminology such as LOINC.
 */
  code?: Array<Coding> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the questionnaire and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the questionnaire.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the questionnaire was published. The date
 * must change when the business version changes and it must change if the status
 * code changes. In addition, it should change when the substantive content of the
 * questionnaire changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the questionnaire. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * The URL of a Questionnaire that this Questionnaire is based on.
 */
  derivedFrom?: Array<string> | undefined;
  _derivedFrom?: Element[] | undefined;

        
      
        
          
  /**
 * A free text natural language description of the questionnaire from a consumer's
 * perspective.
 * This description can be used to capture details such as why the questionnaire
 * was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the questionnaire as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the questionnaire is presumed to be
 * the predominant language in the place the questionnaire was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The period during which the questionnaire content was or is planned to be in
 * active use.
 * The effective period for a questionnaire  determines when the content is
 * applicable for usage and is independent of publication and review dates. For
 * example, a measure intended to be used for the year 2016 might be published in
 * 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this questionnaire is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of questionnaires that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this questionnaire when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this questionnaire outside of FHIR,
 * where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A particular question, question grouping or display text that is part of the
 * questionnaire.
 * The content of the questionnaire is constructed from an ordered, hierarchical
 * collection of items.
 */
  item?: Array<BackboneElement> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * One of the permitted answers for a "choice" or "open-choice" question.
 * This element can be used when the value set machinery of answerValueSet is
 * deemed too cumbersome or when there's a need to capture possible answers that
 * are not codes.
 */
  answerOption?: Array<BackboneElement> | undefined;
  _answerOption?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates whether the answer value is selected when the list of possible answers
 * is initially shown.
 * Use this instead of initial[v] if answerValueSet is present.
 */
  initialSelected?: boolean | undefined;
  _initialSelected?: Element | undefined;

        
      
        
          
            
  /**
 * A potential answer that's allowed as the answer to this question.
 * The data type of the value must agree with the item.type.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * A potential answer that's allowed as the answer to this question.
 * The data type of the value must agree with the item.type.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * A potential answer that's allowed as the answer to this question.
 * The data type of the value must agree with the item.type.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * A potential answer that's allowed as the answer to this question.
 * The data type of the value must agree with the item.type.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * A potential answer that's allowed as the answer to this question.
 * The data type of the value must agree with the item.type.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * A potential answer that's allowed as the answer to this question.
 * The data type of the value must agree with the item.type.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
        
          
  /**
 * A reference to a value set containing a list of codes representing permitted
 * answers for a "choice" or "open-choice" question.
 * LOINC defines many useful value sets for questionnaire responses. See [LOINC
 * Answer Lists](loinc.html#alist). The value may come from the ElementDefinition
 * referred to by .definition.
 */
  answerValueSet?: string | undefined;
  _answerValueSet?: Element | undefined;

        
      
        
          
  /**
 * A terminology code that corresponds to this group or question (e.g. a code from
 * LOINC, which defines many questions and answers).
 * The value may come from the ElementDefinition referred to by .definition.
 */
  code?: Array<Coding> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * This element is a URI that refers to an
 * [ElementDefinition](elementdefinition.html) that provides information about this
 * item, including information that might otherwise be included in the instance of
 * the Questionnaire resource. A detailed description of the construction of the
 * URI is shown in Comments, below. If this element is present then the following
 * element values MAY be derived from the Element Definition if the corresponding
 * elements of this Questionnaire resource instance have no value:

* code
 * (ElementDefinition.code) 
* type (ElementDefinition.type) 
* required
 * (ElementDefinition.min) 
* repeats (ElementDefinition.max) 
* maxLength
 * (ElementDefinition.maxLength) 
* answerValueSet (ElementDefinition.binding)
*
 * options (ElementDefinition.binding).
 * The uri refers to an ElementDefinition in a
 * [StructureDefinition](structuredefinition.html#) and always starts with the
 * [canonical URL](references.html#canonical) for the target resource. When
 * referring to a StructureDefinition, a fragment identifier is used to specify the
 * element definition by its id [Element.id](element-definitions.html#Element.id).
 * E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x].
 * In the absence of a fragment identifier, the first/root element definition in
 * the target is the matching element definition.
 */
  definition?: string | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * Controls how multiple enableWhen values are interpreted -  whether all or any
 * must be true.
 * This element must be specified if more than one enableWhen value is provided.
 */
  enableBehavior?: string | undefined;
  _enableBehavior?: Element | undefined;

        
      
        
          
  /**
 * A constraint indicating that this item should only be enabled (displayed/allow
 * answers to be captured) when the specified condition is true.
 * If multiple repetitions of this extension are present, the item should be
 * enabled when the condition for *any* of the repetitions is true.  I.e. treat
 * "enableWhen"s as being joined by an "or" clause.  This element is a modifier
 * because if enableWhen is present for an item, "required" is ignored unless one
 * of the enableWhen conditions is met. When an item is disabled, all of its
 * descendants are disabled, regardless of what their own enableWhen logic might
 * evaluate to.
 */
  enableWhen?: Array<BackboneElement> | undefined;
  _enableWhen?: Element[] | undefined;

        
      
        
          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerBoolean?: boolean | undefined;
  _answerBoolean?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerDecimal?: number | undefined;
  _answerDecimal?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerInteger?: number | undefined;
  _answerInteger?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerDate?: string | undefined;
  _answerDate?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerDateTime?: string | undefined;
  _answerDateTime?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerTime?: time | undefined;
  _answerTime?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerString?: string | undefined;
  _answerString?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerCoding?: Coding | undefined;
  _answerCoding?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerQuantity?: Quantity | undefined;
  _answerQuantity?: Element | undefined;

          
            
  /**
 * A value that the referenced question is tested using the specified operator in
 * order for the item to be enabled.
 */
  answerReference?: Reference | undefined;
  _answerReference?: Element | undefined;

          
        
      
        
          
  /**
 * Specifies the criteria by which the question is enabled.
 */
  operator: string;
  _operator?: Element | undefined;

        
      
        
          
  /**
 * The linkId for the question whose answer (or lack of answer) governs whether
 * this item is enabled.
 * If multiple question occurrences are present for the same question (same
 * linkId), then this refers to the nearest question occurrence reachable by
 * tracing first the "ancestor" axis and then the "preceding" axis and then the
 * "following" axis.
 */
  question: string;
  _question?: Element | undefined;

        
      
        
          
  /**
 * One or more values that should be pre-populated in the answer when initially
 * rendering the questionnaire for user input.
 * The user is allowed to change the value and override the default (unless marked
 * as read-only). If the user doesn't change the value, then this initial value
 * will be persisted when the QuestionnaireResponse is initially created.  Note
 * that initial values can influence results.  The data type of initial[x] must
 * agree with the item.type, and only repeating items can have more then one
 * initial value.
 */
  initial?: Array<BackboneElement> | undefined;
  _initial?: Element[] | undefined;

        
      
        
          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The actual value to for an initial answer.
 * The type of the initial value must be consistent with the type of the item.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
        
          
  /**
 * Text, questions and other groups to be nested beneath a question or group.
 * There is no specified limit to the depth of nesting.  However, Questionnaire
 * authors are encouraged to consider the impact on the user and user interface of
 * overly deep nesting.
 */
  item?: Array<undefined> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * An identifier that is unique within the Questionnaire allowing linkage to the
 * equivalent item in a QuestionnaireResponse resource.
 * This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended
 * to have any meaning.  GUIDs or sequential numbers are appropriate here.
 */
  linkId: string;
  _linkId?: Element | undefined;

        
      
        
          
  /**
 * The maximum number of characters that are permitted in the answer to be
 * considered a "valid" QuestionnaireResponse.
 * For base64binary, reflects the number of characters representing the encoded
 * data, not the number of bytes of the binary data. The value may come from the
 * ElementDefinition referred to by .definition.
 */
  maxLength?: number | undefined;
  _maxLength?: Element | undefined;

        
      
        
          
  /**
 * A short label for a particular group, question or set of display text within the
 * questionnaire used for reference by the individual completing the questionnaire.
 * These are generally unique within a questionnaire, though this is not
 * guaranteed. Some questionnaires may have multiple questions with the same label
 * with logic to control which gets exposed.  Typically, these won't be used for
 * "display" items, though such use is not prohibited.  Systems SHOULD NOT generate
 * their own prefixes if prefixes are defined for any items within a Questionnaire.
 */
  prefix?: string | undefined;
  _prefix?: Element | undefined;

        
      
        
          
  /**
 * An indication, when true, that the value cannot be changed by a human respondent
 * to the Questionnaire.
 * The value of readOnly elements can be established by asserting  extensions for
 * defaultValues, linkages that support pre-population and/or extensions that
 * support calculation based on other answers.
 */
  readOnly?: boolean | undefined;
  _readOnly?: Element | undefined;

        
      
        
          
  /**
 * An indication, if true, that the item may occur multiple times in the response,
 * collecting multiple answers for questions or multiple sets of answers for
 * groups.
 * If a question is marked as repeats=true, then multiple answers can be provided
 * for the question in the corresponding QuestionnaireResponse.  When rendering the
 * questionnaire, it is up to the rendering software whether to render the question
 * text for each answer repetition (i.e. "repeat the question") or to simply allow
 * entry/selection of multiple answers for the question (repeat the answers).
 * Which is most appropriate visually may depend on the type of answer as well as
 * whether there are nested items.

The resulting QuestionnaireResponse will be
 * populated the same way regardless of rendering - one 'question' item with
 * multiple answer values.

 The value may come from the ElementDefinition referred
 * to by .definition.
 */
  repeats?: boolean | undefined;
  _repeats?: Element | undefined;

        
      
        
          
  /**
 * An indication, if true, that the item must be present in a "completed"
 * QuestionnaireResponse.  If false, the item may be skipped when answering the
 * questionnaire.
 * Questionnaire.item.required only has meaning for elements that are conditionally
 * enabled with enableWhen if the condition evaluates to true.  If an item that
 * contains other items is marked as required, that does not automatically make the
 * contained elements required (though required groups must contain at least one
 * child element). The value may come from the ElementDefinition referred to by
 * .definition.
 */
  required?: boolean | undefined;
  _required?: Element | undefined;

        
      
        
          
  /**
 * The name of a section, the text of a question or text content for a display
 * item.
 * When using this element to represent the name of a section, use group type item
 * and also make sure to limit the text element to a short string suitable for
 * display as a section heading.  Group item instructions should be included as a
 * display type item within the group.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * The type of questionnaire item this is - whether text for display, a grouping of
 * other items or a particular type of data to be captured (string, integer, coded
 * choice, etc.).
 * Additional constraints on the type of answer can be conveyed by extensions. The
 * value may come from the ElementDefinition referred to by .definition.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the questionnaire is intended to be used.
 * It may be possible for the questionnaire to be used in jurisdictions other than
 * those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the questionnaire. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the questionnaire.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the questionnaire is the organization or individual primarily responsible for
 * the maintenance and upkeep of the questionnaire. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the questionnaire. This item SHOULD be populated unless the information is
 * available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this questionnaire is needed and why it has been designed as
 * it has.
 * This element does not describe the usage of the questionnaire. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this questionnaire.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The status of this questionnaire. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of questionnaires that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The types of subjects that can be the subject of responses created for the
 * questionnaire.
 * If none are specified, then the subject is unlimited.
 */
  subjectType?: Array<string> | undefined;
  _subjectType?: Element[] | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the questionnaire.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this questionnaire when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this questionnaire is (or
 * will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the questionnaire is stored on different servers.
 * The name of the referenced questionnaire can be conveyed using the
 * http://hl7.org/fhir/StructureDefinition/display extension.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate questionnaire
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the questionnaire when
 * it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the questionnaire author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different questionnaire instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the questionnaire with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * QuestionnaireResponse
 * 
 * A structured set of questions and their answers. The questions are ordered and
 * grouped into coherent subsets, corresponding to the structure of the grouping of
 * the questionnaire being responded to.
 * 
 * @see {@link http://hl7.org/fhir/R4B/QuestionnaireResponse.html}
 */
    export interface QuestionnaireResponse extends DomainResource {
      
      readonly resourceType: "QuestionnaireResponse";
      

      
        
          
  /**
 * Person who received the answers to the questions in the QuestionnaireResponse
 * and recorded them in the system.
 * Mapping a subject's answers to multiple choice options and determining what to
 * put in the textual answer is a matter of interpretation.  Authoring by device
 * would indicate that some portion of the questionnaire had been auto-populated.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * The date and/or time that this set of answers were last changed.
 * May be different from the lastUpdateTime of the resource itself, because that
 * reflects when the data was known to the server, not when the data was
 * captured.

This element is optional to allow for systems that might not know the
 * value, however it SHOULD be populated if possible.
 */
  authored?: string | undefined;
  _authored?: Element | undefined;

        
      
        
          
  /**
 * The order, proposal or plan that is fulfilled in whole or in part by this
 * QuestionnaireResponse.  For example, a ServiceRequest seeking an intake
 * assessment or a decision support recommendation to assess for post-partum
 * depression.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * The Encounter during which this questionnaire response was created or to which
 * the creation of this record is tightly associated.
 * This will typically be the encounter the event occurred within, but some
 * activities may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter. A questionnaire
 * that was initiated during an encounter but not fully completed during the
 * encounter would still generally be associated with the encounter.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * A business identifier assigned to a particular completed (or partially
 * completed) questionnaire.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * A group or question item from the original questionnaire for which answers are
 * provided.
 * Groups cannot have answers and therefore must nest directly within item. When
 * dealing with questions, nesting must occur within each answer because some
 * questions may have multiple answers (and the nesting occurs for each answer).
 */
  item?: Array<BackboneElement> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * The respondent's answer(s) to the question.
 * The value is nested because we cannot have a repeating structure that has
 * variable type.
 */
  answer?: Array<BackboneElement> | undefined;
  _answer?: Element[] | undefined;

        
      
        
          
  /**
 * Nested groups and/or questions found within this particular answer.
 */
  item?: Array<undefined> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The answer (or one of the answers) provided by the respondent to the question.
 * More complex structures (Attachment, Resource and Quantity) will typically be
 * limited to electronic forms that can expose an appropriate user interface to
 * capture the components and enforce the constraints of a complex data type.
 * Additional complex types can be introduced through extensions. Must match the
 * datatype specified by Questionnaire.item.type in the corresponding
 * Questionnaire.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
        
          
  /**
 * A reference to an [ElementDefinition](elementdefinition.html) that provides the
 * details for the item.
 * The ElementDefinition must be in a
 * [StructureDefinition](structuredefinition.html#), and must have a fragment
 * identifier that identifies the specific data element by its id (Element.id).
 * E.g.
 * http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x].

There
 * is no need for this element if the item pointed to by the linkId has a
 * definition listed.
 */
  definition?: string | undefined;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * Questions or sub-groups nested beneath a question or group.
 */
  item?: Array<undefined> | undefined;
  _item?: Element[] | undefined;

        
      
        
          
  /**
 * The item from the Questionnaire that corresponds to this item in the
 * QuestionnaireResponse resource.
 */
  linkId: string;
  _linkId?: Element | undefined;

        
      
        
          
  /**
 * Text that is displayed above the contents of the group or as the text of the
 * question being answered.
 */
  text?: string | undefined;
  _text?: Element | undefined;

        
      
        
          
  /**
 * A procedure or observation that this questionnaire was performed as part of the
 * execution of.  For example, the surgery a checklist was executed as part of.
 * Composition of questionnaire responses will be handled by the parent
 * questionnaire having answers that reference the child questionnaire.  For
 * relationships to referrals, and other types of requests, use basedOn.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * The Questionnaire that defines and organizes the questions for which answers are
 * being provided.
 * If a QuestionnaireResponse references a Questionnaire, then the
 * QuestionnaireResponse structure must be consistent with the Questionnaire (i.e.
 * questions must be organized into the same groups, nested questions must still be
 * nested, etc.).
 */
  questionnaire?: string | undefined;
  _questionnaire?: Element | undefined;

        
      
        
          
  /**
 * The person who answered the questions about the subject.
 * If not specified, no inference can be made about who provided the data.
 */
  source?: Reference | undefined;
  _source?: Element | undefined;

        
      
        
          
  /**
 * The position of the questionnaire response within its overall lifecycle.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The subject of the questionnaire response.  This could be a patient,
 * organization, practitioner, device, etc.  This is who/what the answers apply to,
 * but is not necessarily the source of information.
 * If the Questionnaire declared a subjectType, the resource pointed to by this
 * element must be an instance of one of the listed types.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
    }

  


  
    /**
 * Range
 * 
 * Base StructureDefinition for Range Type: A set of ordered Quantities defined by
 * a low and high limit.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Range.html}
 */
    export interface Range extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The high limit. The boundary is inclusive.
 * If the high element is missing, the high boundary is not known.
 */
  high?: Quantity | undefined;
  _high?: Element | undefined;

        
      
        
          
  /**
 * The low limit. The boundary is inclusive.
 * If the low element is missing, the low boundary is not known.
 */
  low?: Quantity | undefined;
  _low?: Element | undefined;

        
      
    }

  


  
    /**
 * Ratio
 * 
 * Base StructureDefinition for Ratio Type: A relationship of two Quantity values -
 * expressed as a numerator and a denominator.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Ratio.html}
 */
    export interface Ratio extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The value of the denominator.
 */
  denominator?: Quantity | undefined;
  _denominator?: Element | undefined;

        
      
        
          
  /**
 * The value of the numerator.
 */
  numerator?: Quantity | undefined;
  _numerator?: Element | undefined;

        
      
    }

  


  
    /**
 * RatioRange
 * 
 * Base StructureDefinition for RatioRange Type: A range of ratios expressed as a
 * low and high numerator and a denominator.
 * 
 * @see {@link http://hl7.org/fhir/R4B/RatioRange.html}
 */
    export interface RatioRange extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The value of the denominator.
 */
  denominator?: Quantity | undefined;
  _denominator?: Element | undefined;

        
      
        
          
  /**
 * The value of the high limit numerator.
 * If the high element is missing, the high boundary is not known.
 */
  highNumerator?: Quantity | undefined;
  _highNumerator?: Element | undefined;

        
      
        
          
  /**
 * The value of the low limit numerator.
 * If the low element is missing, the low boundary is not known.
 */
  lowNumerator?: Quantity | undefined;
  _lowNumerator?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * Reference
 * 
 * Base StructureDefinition for Reference Type: A reference from one resource to
 * another.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Reference.html}
 */
    export interface Reference extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * Plain text narrative that identifies the resource in addition to the resource
 * reference.
 * This is generally not the same as the Resource.text of the referenced resource.
 * The purpose is to identify what's being referenced, not to fully describe it.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * An identifier for the target resource. This is used when there is no way to
 * reference the other resource directly, either because the entity it represents
 * is not available through a FHIR server, or because there is no way for the
 * author of the resource to convert a known identifier to an actual location.
 * There is no requirement that a Reference.identifier point to something that is
 * actually exposed as a FHIR instance, but it SHALL point to a business concept
 * that would be expected to be exposed as a FHIR instance, and that instance would
 * need to be of a FHIR resource type allowed by the reference.
 * When an identifier is provided in place of a reference, any system processing
 * the reference will only be able to resolve the identifier to a reference if it
 * understands the business context in which the identifier is used. Sometimes this
 * is global (e.g. a national identifier) but often it is not. For this reason,
 * none of the useful mechanisms described for working with references (e.g.
 * chaining, includes) are possible, nor should servers be expected to be able
 * resolve the reference. Servers may accept an identifier based reference
 * untouched, resolve it, and/or reject it - see
 * CapabilityStatement.rest.resource.referencePolicy. 

When both an identifier and
 * a literal reference are provided, the literal reference is preferred.
 * Applications processing the resource are allowed - but not required - to check
 * that the identifier matches the literal reference

Applications converting a
 * logical reference to a literal reference may choose to leave the logical
 * reference present, or remove it.

Reference is intended to point to a structure
 * that can potentially be expressed as a FHIR resource, though there is no need
 * for it to exist as an actual FHIR resource instance - except in as much as an
 * application wishes to actual find the target of the reference. The content
 * referred to be the identifier must meet the logical constraints implied by any
 * limitations on what resource types are permitted for the reference.  For
 * example, it would not be legitimate to send the identifier for a drug
 * prescription if the type were Reference(Observation|DiagnosticReport).  One of
 * the use-cases for Reference.identifier is the situation where no FHIR
 * representation exists (where the type is Reference (Any).
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * A reference to a location at which the other resource is found. The reference
 * may be a relative reference, in which case it is relative to the service base
 * URL, or an absolute URL that resolves to the location where the resource is
 * found. The reference may be version specific or not. If the reference is not to
 * a FHIR RESTful server, then it should be assumed to be version specific.
 * Internal fragment references (start with '#') refer to contained resources.
 * Using absolute URLs provides a stable scalable approach suitable for a cloud/web
 * context, while using relative/logical references provides a flexible approach
 * suitable for use when trading across closed eco-system boundaries.   Absolute
 * URLs do not need to point to a FHIR RESTful server, though this is the preferred
 * approach. If the URL conforms to the structure "/[type]/[id]" then it should be
 * assumed that the reference is to a FHIR RESTful server.
 */
  reference?: string | undefined;
  _reference?: Element | undefined;

        
      
        
          
  /**
 * The expected type of the target of the reference. If both Reference.type and
 * Reference.reference are populated and Reference.reference is a FHIR URL, both
 * SHALL be consistent.

The type is the Canonical URL of Resource Definition that
 * is the type this reference refers to. References are URLs that are relative to
 * http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to
 * http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed
 * for logical models (and can only be used in references in logical models, not
 * resources).
 * This element is used to indicate the type of  the target of the reference. This
 * may be used which ever of the other elements are populated (or not). In some
 * cases, the type of the target may be determined by inspection of the reference
 * (e.g. a RESTful URL) or by resolving the target of the reference; if both the
 * type and a reference is provided, the reference SHALL resolve to a resource of
 * the same type as that specified.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  
    /**
 * RegulatedAuthorization
 * 
 * Regulatory approval, clearance or licencing related to a regulated product,
 * treatment, facility or activity that is cited in a guidance, regulation, rule or
 * legislative act. An example is Market Authorization relating to a Medicinal
 * Product.
 * 
 * @see {@link http://hl7.org/fhir/R4B/RegulatedAuthorization.html}
 */
    export interface RegulatedAuthorization extends DomainResource {
      
      readonly resourceType: "RegulatedAuthorization";
      

      
        
          
  /**
 * The legal or regulatory framework against which this authorization is granted,
 * or other reasons for it.
 */
  basis?: Array<CodeableConcept> | undefined;
  _basis?: Element[] | undefined;

        
      
        
          
  /**
 * The case or regulatory procedure for granting or amending a regulated
 * authorization. An authorization is granted in response to
 * submissions/applications by those seeking authorization. A case is the
 * administrative process that deals with the application(s) that relate to this
 * and assesses them. Note: This area is subject to ongoing review and the
 * workgroup is seeking implementer feedback on its use (see link at bottom of
 * page).
 */
  case?: BackboneElement | undefined;
  _case?: Element | undefined;

        
      
        
          
  /**
 * A regulatory submission from an organization to a regulator, as part of an
 * assessing case. Multiple applications may occur over time, with more or
 * different information to support or modify the submission or the authorization.
 * The applications can be considered as steps within the longer running case or
 * procedure for this authorization process.
 */
  application?: Array<undefined> | undefined;
  _application?: Element[] | undefined;

        
      
        
          
            
  /**
 * Relevant date for this case.
 */
  datePeriod?: Period | undefined;
  _datePeriod?: Element | undefined;

          
            
  /**
 * Relevant date for this case.
 */
  dateDateTime?: string | undefined;
  _dateDateTime?: Element | undefined;

          
        
      
        
          
  /**
 * Identifier by which this case can be referenced.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The status associated with the case.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The defining type of case.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * General textual supporting information.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The organization that has been granted this authorization, by some authoritative
 * body (the 'regulator').
 */
  holder?: Reference | undefined;
  _holder?: Element | undefined;

        
      
        
          
  /**
 * Business identifier for the authorization, typically assigned by the authorizing
 * body.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Condition for which the use of the regulated product applies.
 */
  indication?: CodeableReference | undefined;
  _indication?: Element | undefined;

        
      
        
          
  /**
 * The intended use of the product, e.g. prevention, treatment, diagnosis.
 */
  intendedUse?: CodeableConcept | undefined;
  _intendedUse?: Element | undefined;

        
      
        
          
  /**
 * The territory (e.g., country, jurisdiction etc.) in which the authorization has
 * been granted.
 */
  region?: Array<CodeableConcept> | undefined;
  _region?: Element[] | undefined;

        
      
        
          
  /**
 * The regulatory authority or authorizing body granting the authorization. For
 * example, European Medicines Agency (EMA), Food and Drug Administration (FDA),
 * Health Canada (HC), etc.
 */
  regulator?: Reference | undefined;
  _regulator?: Element | undefined;

        
      
        
          
  /**
 * The status that is authorised e.g. approved. Intermediate states and actions can
 * be tracked with cases and applications.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The date at which the current status was assigned.
 */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;

        
      
        
          
  /**
 * The product type, treatment, facility or activity that is being authorized.
 */
  subject?: Array<Reference> | undefined;
  _subject?: Element[] | undefined;

        
      
        
          
  /**
 * Overall type of this authorization, for example drug marketing approval, orphan
 * drug designation.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The time period in which the regulatory approval, clearance or licencing is in
 * effect. As an example, a Marketing Authorization includes the date of
 * authorization and/or an expiration date.
 */
  validityPeriod?: Period | undefined;
  _validityPeriod?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * RelatedArtifact
 * 
 * Base StructureDefinition for RelatedArtifact Type: Related artifacts such as
 * additional documentation, justification, or bibliographic references.
 * 
 * @see {@link http://hl7.org/fhir/R4B/RelatedArtifact.html}
 */
    export interface RelatedArtifact extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A bibliographic citation for the related artifact. This text SHOULD be formatted
 * according to an accepted citation format.
 * Additional structured information about citations should be captured as
 * extensions.
 */
  citation?: string | undefined;
  _citation?: Element | undefined;

        
      
        
          
  /**
 * A brief description of the document or knowledge resource being referenced,
 * suitable for display to a consumer.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * The document being referenced, represented as an attachment. This is exclusive
 * with the resource element.
 */
  document?: Attachment | undefined;
  _document?: Element | undefined;

        
      
        
          
  /**
 * A short label that can be used to reference the citation from elsewhere in the
 * containing artifact, such as a footnote index.
 */
  label?: string | undefined;
  _label?: Element | undefined;

        
      
        
          
  /**
 * The related resource, such as a library, value set, profile, or other knowledge
 * resource.
 * If the type is predecessor, this is a reference to the succeeding knowledge
 * resource. If the type is successor, this is a reference to the prior knowledge
 * resource.
 */
  resource?: string | undefined;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * The type of relationship to the related artifact.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A url for the artifact that can be followed to access the actual content.
 * If a document or resource element is present, this element SHALL NOT be provided
 * (use the url or reference in the Attachment or resource reference).
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
    }

  


  


  
    /**
 * RelatedPerson
 * 
 * Information about a person that is involved in the care for a patient, but who
 * is not the target of healthcare, nor has a formal responsibility in the care
 * process.
 * 
 * @see {@link http://hl7.org/fhir/R4B/RelatedPerson.html}
 */
    export interface RelatedPerson extends DomainResource {
      
      readonly resourceType: "RelatedPerson";
      

      
        
          
  /**
 * Whether this related person record is in active use.
 * This element is labeled as a modifier because it may be used to mark that the
 * resource was created in error.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * Address where the related person can be contacted or visited.
 */
  address?: Array<Address> | undefined;
  _address?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the related person was born.
 */
  birthDate?: string | undefined;
  _birthDate?: Element | undefined;

        
      
        
          
  /**
 * A language which may be used to communicate with about the patient's health.
 * If no language is specified, this *implies* that the default local language is
 * spoken.  If you need to convey proficiency for multiple modes, then you need
 * multiple RelatedPerson.Communication associations.   If the RelatedPerson does
 * not speak the default local language, then the Interpreter Required Standard can
 * be used to explicitly declare that an interpreter is required.
 */
  communication?: Array<BackboneElement> | undefined;
  _communication?: Element[] | undefined;

        
      
        
          
  /**
 * The ISO-639-1 alpha 2 code in lower case for the language, optionally followed
 * by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g.
 * "en" for English, or "en-US" for American English versus "en-EN" for England
 * English.
 * The structure aa-BB with this exact casing is one the most widely used notations
 * for locale. However not all systems actually code this but instead have it as
 * free text. Hence CodeableConcept instead of code as the data type.
 */
  language: CodeableConcept;
  _language?: Element | undefined;

        
      
        
          
  /**
 * Indicates whether or not the patient prefers this language (over other languages
 * he masters up a certain level).
 * This language is specifically identified for communicating healthcare
 * information.
 */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;

        
      
        
          
  /**
 * Administrative Gender - the gender that the person is considered to have for
 * administration and record keeping purposes.
 */
  gender?: string | undefined;
  _gender?: Element | undefined;

        
      
        
          
  /**
 * Identifier for a person within a particular scope.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A name associated with the person.
 */
  name?: Array<HumanName> | undefined;
  _name?: Element[] | undefined;

        
      
        
          
  /**
 * The patient this person is related to.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The period of time during which this relationship is or was active. If there are
 * no dates defined, then the interval is unknown.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * Image of the person.
 */
  photo?: Array<Attachment> | undefined;
  _photo?: Element[] | undefined;

        
      
        
          
  /**
 * The nature of the relationship between a patient and the related person.
 */
  relationship?: Array<CodeableConcept> | undefined;
  _relationship?: Element[] | undefined;

        
      
        
          
  /**
 * A contact detail for the person, e.g. a telephone number or an email address.
 * Person may have multiple ways to be contacted with different uses or applicable
 * periods.  May need to have options for contacting the person urgently, and also
 * to help with identification.
 */
  telecom?: Array<ContactPoint> | undefined;
  _telecom?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * Request
 * 
 * Logical Model: A pattern to be followed by resources that represent a specific
 * proposal, plan and/or order for some sort of action or service.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Request.html}
 */
    export interface Request {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * For draft {{title}}s, indicates the date of initial creation.  For requests with
 * other statuses, indicates the date of activation.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * A plan, proposal or order that is fulfilled in whole or in part by this
 * {{title}}.
 * [The allowed reference resources may be adjusted as appropriate for the request
 * resource].
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * A code that identifies the specific service or action being asked to be done (or
 * not done).
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * If true indicates that the {{title}} is asking for the specified action to *not*
 * occur.
 * The attributes provided with the request qualify what is not to be done.  For
 * example, if an effectiveTime is provided, the "do not" request only applies
 * within the specified time.  If a performerType is specified then the "do not"
 * request only applies to performers of that type.  Qualifiers include: code,
 * subject, occurrence, perormerType and performer.

In some cases, the
 * Request.code may pre-coordinate prohibition into the requested action.  E.g.
 * "NPO" (nothing by mouth), "DNR" (do not recussitate).  If this happens,
 * doNotPerform SHALL NOT be set to true.  I.e. The resource shall not have double
 * negation. (E.g. "Do not DNR").
 */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;

        
      
        
          
  /**
 * The Encounter during which this {{title}} was created or to which the creation
 * of this record is tightly associated.
 * This will typically be the encounter the request was created during, but some
 * requests may be initiated prior to or after the official completion of an
 * encounter but still be tied to the context of the encounter (e.g. pre-admission
 * lab tests).
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * A shared identifier common to all requests that were authorized more or less
 * simultaneously by a single author, representing the identifier of the
 * requisition, prescription or similar form.
 * Requests are linked either by a "basedOn" relationship (i.e. one request is
 * fulfilling another) or by having a common requisition.  Requests that are part
 * of the same requisition are generally treated independently from the perspective
 * of changing their state or maintaining them after initial creation.
 */
  groupIdentifier?: Identifier | undefined;
  _groupIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this {{title}} by the author and/or other
 * systems.  These identifiers remain constant as the resource is updated and
 * propagates from server to server.
 * The identifier.type element is used to distinguish between the identifiers
 * assigned by the requester/placer and the performer/filler.

Note: This is a
 * business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this {{title}}.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this {{title}}.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * Insurance plans, coverage extensions, pre-authorizations and/or
 * pre-determinations that may be relevant in delivering the requested service.
 */
  insurance?: Array<Reference> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the level of authority/intentionality associated with the {{title}}
 * and where the request fits into the workflow chain.
 * This element is expected to be immutable.  E.g. A "proposal" instance should
 * never change to be a "plan" instance or "order" instance.  Instead, a new
 * instance 'basedOn' the prior instance should be created with the new 'intent'
 * value.

One exception to this is that the granularity of Request.intent is
 * allowed to change.  For example, a Request identified as an "order" might later
 * be clarified to be a "filler-order".  Or, in rarer cases (to meet recipient
 * constraints), the reverse might also occur.

When resources map to this element,
 * they are free to define as many codes as necessary to cover their space and will
 * map to "proposal, plan or order".  Can have multiple codes that map to one of
 * these.  E.g. "original order", "encoded order", "reflex order" would all map to
 * "order".  Expectation is that the set of codes is mutually exclusive or a strict
 * all-encompassing hierarchy.
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * Comments made about the {{title}} by the requester, performer, subject or other
 * participants.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * The date or time(s) at which the activity or service is desired to occur or not
 * occur.
 * [The list of types may be constrained as appropriate for the type of event].
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * The date or time(s) at which the activity or service is desired to occur or not
 * occur.
 * [The list of types may be constrained as appropriate for the type of event].
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * The date or time(s) at which the activity or service is desired to occur or not
 * occur.
 * [The list of types may be constrained as appropriate for the type of event].
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates who or what is being asked to perform (or not perform) the
 * {{request}}.
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * The type of individual that is desired to act upon/ not act upon the
 * {{request}}.
 * If specified without indicating a performer, this indicates that the performer
 * must be (or can't be) of the specified type.  If specified with a performer then
 * it indicates the requirements of the performer if the designated performer is
 * not available.  If doNotPerform is true, then only one of performerType and
 * performer should be present.
 */
  performerType?: CodeableConcept | undefined;
  _performerType?: Element | undefined;

        
      
        
          
  /**
 * Indicates how quickly the {{title}} should be addressed with respect to other
 * requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * Describes why the request is being made in coded or textual form.
 * Textual reasons can be captured using reasonCode.text.  If doNoPerform is true,
 * this will be the reason why the request is being made to not act.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies this request.
 * [Additional resources may be added as appropriate].
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * Links to Provenance records for past versions of this resource or fulfilling
 * request or event resources that identify key state transitions or updates that
 * are likely to be relevant to a user looking at the current version of the
 * resource.
 * This element does not point to the Provenance associated with the *current*
 * version of the resource - as it would be created after this version existed.
 * The Provenance for the current version can be retrieved with a _revinclude.
 * Referenced provenances should adhere to the provenance-relevant-history profile.
 */
  relevantHistory?: Array<Reference> | undefined;
  _relevantHistory?: Element[] | undefined;

        
      
        
          
  /**
 * Completed or terminated request(s) whose function is taken by this new
 * {{title}}.
 * The replacement could be because the initial request was immediately rejected
 * (due to an issue) or because the previous request was completed, but the need
 * for the action described by the request remains ongoing.
 */
  replaces?: Array<Reference> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
            
  /**
 * Indicates if this record was captured as a secondary 'reported' record rather
 * than as an original primary source-of-truth record.  It may also indicate the
 * source of the report.
 */
  reportedBoolean?: boolean | undefined;
  _reportedBoolean?: Element | undefined;

          
            
  /**
 * Indicates if this record was captured as a secondary 'reported' record rather
 * than as an original primary source-of-truth record.  It may also indicate the
 * source of the report.
 */
  reportedReference?: Reference | undefined;
  _reportedReference?: Element | undefined;

          
        
      
        
          
  /**
 * Who initiated the {{request}} and has responsibility for its activation.
 * [Resources may choose to constrain potential requesters, though should consider
 * proposals and plans as well as orders].
 */
  requester?: Reference | undefined;
  _requester?: Element | undefined;

        
      
        
          
  /**
 * The current state of the {{title}}.
 * The status is generally fully in the control of the requester - they determine
 * whether the order is draft or active and, after it has been activated,
 * completed, cancelled or suspended. States relating to the activities of the
 * performer are reflected on either the corresponding [Event](event.html)(s) or
 * using the [Task](task.html) resource.  A nominal state-transition diagram can be
 * found in the [[request.html#statemachine | Request pattern]] documentation
 * Unknown does not represent "other" - one of the defined statuses must apply.
 * Unknown is used when the authoring system is not sure what the current status
 * is.  A status of 'active' when doNotPerform is true means that the request to
 * not perform is currently in force.

A status of completed for a "doNotPerform"
 * request indicates that the period of non-performance is now satisfied and the
 * request no longer holds.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Captures the reason for the current state of the {{title}}.
 * This is generally only used for "exception" statuses such as "suspended" or
 * "cancelled".  The reason why the {{title}} was created at all is captured in
 * reasonCode, not here.  [distinct reason codes for different statuses can be
 * enforced using invariants if they are universal bindings].
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
        
          
  /**
 * The individual or set of individuals the action is to be performed/not performed
 * on or for.
 * [For resources that aren't patient-specific, the set of allowed resources may be
 * extended to include other things.  Group should generally be retained unless
 * there's certainty this resource won't be used for veterinary, research or public
 * health settings where Group may be necessary (e.g. this cage of rats/crate of
 * chickens, group of people in a 5 mile radious of the incident, etc.)].
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Information that may be needed by/relevant to the performer in their execution
 * of this {{title}}.
 */
  supportingInfo?: Array<Reference> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
    }

  


  
    /**
 * RequestGroup
 * 
 * A group of related requests that can be used to capture intended activities that
 * have inter-dependencies such as "give this medication after that one".
 * 
 * @see {@link http://hl7.org/fhir/R4B/RequestGroup.html}
 */
    export interface RequestGroup extends DomainResource {
      
      readonly resourceType: "RequestGroup";
      

      
        
          
  /**
 * The actions, if any, produced by the evaluation of the artifact.
 */
  action?: Array<BackboneElement> | undefined;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Sub actions.
 */
  action?: Array<undefined> | undefined;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Defines whether the action can be selected multiple times.
 */
  cardinalityBehavior?: string | undefined;
  _cardinalityBehavior?: Element | undefined;

        
      
        
          
  /**
 * A code that provides meaning for the action or action group. For example, a
 * section may have a LOINC code for a section of a documentation template.
 */
  code?: Array<CodeableConcept> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * An expression that describes applicability criteria, or start/stop conditions
 * for the action.
 * When multiple conditions of the same kind are present, the effects are combined
 * using AND semantics, so the overall condition is true only if all of the
 * conditions are true.
 */
  condition?: Array<BackboneElement> | undefined;
  _condition?: Element[] | undefined;

        
      
        
          
  /**
 * An expression that returns true or false, indicating whether or not the
 * condition is satisfied.
 * The expression may be inlined, or may be a reference to a named expression
 * within a logic library referenced by the library element.
 */
  expression?: Expression | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * The kind of condition.
 * Applicability criteria are used to determine immediate applicability when a plan
 * definition is applied to a given context. Start and stop criteria are carried
 * through application and used to describe enter/exit criteria for an action.
 */
  kind: string;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * A short description of the action used to provide a summary to display to the
 * user.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Didactic or other informational resources associated with the action that can be
 * provided to the CDS recipient. Information resources can include inline text
 * commentary and links to web resources.
 */
  documentation?: Array<RelatedArtifact> | undefined;
  _documentation?: Element[] | undefined;

        
      
        
          
  /**
 * Defines the grouping behavior for the action and its children.
 */
  groupingBehavior?: string | undefined;
  _groupingBehavior?: Element | undefined;

        
      
        
          
  /**
 * The participant that should perform or be responsible for this action.
 */
  participant?: Array<Reference> | undefined;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * Defines whether the action should usually be preselected.
 */
  precheckBehavior?: string | undefined;
  _precheckBehavior?: Element | undefined;

        
      
        
          
  /**
 * A user-visible prefix for the action.
 */
  prefix?: string | undefined;
  _prefix?: Element | undefined;

        
      
        
          
  /**
 * Indicates how quickly the action should be addressed with respect to other
 * actions.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * A relationship to another action such as "before" or "30-60 minutes after start
 * of".
 */
  relatedAction?: Array<BackboneElement> | undefined;
  _relatedAction?: Element[] | undefined;

        
      
        
          
  /**
 * The element id of the action this is related to.
 */
  actionId: id;
  _actionId?: Element | undefined;

        
      
        
          
            
  /**
 * A duration or range of durations to apply to the relationship. For example,
 * 30-60 minutes before.
 */
  offsetDuration?: Duration | undefined;
  _offsetDuration?: Element | undefined;

          
            
  /**
 * A duration or range of durations to apply to the relationship. For example,
 * 30-60 minutes before.
 */
  offsetRange?: Range | undefined;
  _offsetRange?: Element | undefined;

          
        
      
        
          
  /**
 * The relationship of this action to the related action.
 */
  relationship: string;
  _relationship?: Element | undefined;

        
      
        
          
  /**
 * Defines expectations around whether an action is required.
 */
  requiredBehavior?: string | undefined;
  _requiredBehavior?: Element | undefined;

        
      
        
          
  /**
 * The resource that is the target of the action (e.g. CommunicationRequest).
 * The target resource SHALL be a [Request](request.html) resource with a
 * Request.intent set to "option".
 */
  resource?: Reference | undefined;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * Defines the selection behavior for the action and its children.
 */
  selectionBehavior?: string | undefined;
  _selectionBehavior?: Element | undefined;

        
      
        
          
  /**
 * A text equivalent of the action to be performed. This provides a
 * human-interpretable description of the action when the definition is consumed by
 * a system that might not be capable of interpreting it dynamically.
 */
  textEquivalent?: string | undefined;
  _textEquivalent?: Element | undefined;

        
      
        
          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingDateTime?: string | undefined;
  _timingDateTime?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingAge?: Age | undefined;
  _timingAge?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingPeriod?: Period | undefined;
  _timingPeriod?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingDuration?: Duration | undefined;
  _timingDuration?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingRange?: Range | undefined;
  _timingRange?: Element | undefined;

          
            
  /**
 * An optional value describing when the action should be performed.
 */
  timingTiming?: Timing | undefined;
  _timingTiming?: Element | undefined;

          
        
      
        
          
  /**
 * The title of the action displayed to a user.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * The type of action to perform (create, update, remove).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Provides a reference to the author of the request group.
 */
  author?: Reference | undefined;
  _author?: Element | undefined;

        
      
        
          
  /**
 * Indicates when the request group was created.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * A plan, proposal or order that is fulfilled in whole or in part by this request.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * A code that identifies what the overall request group is.
 * This element can be used to provide a code that captures the meaning of the
 * request group as a whole, as opposed to the code of the action element, which
 * captures the meaning of the individual actions within the request group.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Describes the context of the request group, if any.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * A shared identifier common to all requests that were authorized more or less
 * simultaneously by a single author, representing the identifier of the
 * requisition, prescription or similar form.
 * Requests are linked either by a "basedOn" relationship (i.e. one request is
 * fulfilling another) or by having a common requisition.  Requests that are part
 * of the same requisition are generally treated independently from the perspective
 * of changing their state or maintaining them after initial creation.
 */
  groupIdentifier?: Identifier | undefined;
  _groupIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Allows a service to provide a unique, business identifier for the request.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A canonical URL referencing a FHIR-defined protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this request.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * A URL referencing an externally defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this request.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the level of authority/intentionality associated with the request and
 * where the request fits into the workflow chain.
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * Provides a mechanism to communicate additional information about the response.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates how quickly the request should be addressed with respect to other
 * requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * Describes the reason for the request group in coded or textual form.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource whose existence justifies this request group.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * Completed or terminated request(s) whose function is taken by this new request.
 * The replacement could be because the initial request was immediately rejected
 * (due to an issue) or because the previous request was completed, but the need
 * for the action described by the request remains ongoing.
 */
  replaces?: Array<Reference> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
  /**
 * The current state of the request. For request groups, the status reflects the
 * status of all the requests in the group.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The subject for which the request group was created.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
    }

  


  
    /**
 * ResearchDefinition
 * 
 * The ResearchDefinition resource describes the conditional state (population and
 * any exposures being compared within the population) and outcome (if specified)
 * that the knowledge (evidence, assertion, recommendation) is about.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ResearchDefinition.html}
 */
    export interface ResearchDefinition extends DomainResource {
      
      readonly resourceType: "ResearchDefinition";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable string to clarify or explain concepts about the resource.
 */
  comment?: Array<string> | undefined;
  _comment?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the research definition and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the research definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the research definition was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the research definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the research definition.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the research definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the research
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the research definition as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the research definition is presumed
 * to be the predominant language in the place the research definition was
 * created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the research definition content was or is planned to be
 * in active use.
 * The effective period for a research definition  determines when the content is
 * applicable for usage and is independent of publication and review dates. For
 * example, a measure intended to be used for the year 2016 might be published in
 * 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this research definition is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of research definitions that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A reference to a ResearchElementDefinition resource that defines the exposure
 * for the research.
 */
  exposure?: Reference | undefined;
  _exposure?: Element | undefined;

        
      
        
          
  /**
 * A reference to a ResearchElementDefinition resource that defines the
 * exposureAlternative for the research.
 */
  exposureAlternative?: Reference | undefined;
  _exposureAlternative?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this research definition when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this research definition outside of
 * FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the research definition is intended to be
 * used.
 * It may be possible for the research definition to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A reference to a Library resource containing the formal logic used by the
 * ResearchDefinition.
 */
  library?: Array<string> | undefined;
  _library?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the research definition. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A reference to a ResearchElementDefinition resomece that defines the outcome for
 * the research.
 */
  outcome?: Reference | undefined;
  _outcome?: Element | undefined;

        
      
        
          
  /**
 * A reference to a ResearchElementDefinition resource that defines the population
 * for the research.
 */
  population: Reference;
  _population?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the research
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the research definition is the organization or individual primarily responsible
 * for the maintenance and upkeep of the research definition. This is not
 * necessarily the same individual or organization that developed and initially
 * authored the content. The publisher is the primary point of contact for
 * questions or issues with the research definition. This item SHOULD be populated
 * unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this research definition is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the research definition. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this research definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Related artifacts such as additional documentation, justification, or
 * bibliographic references.
 * Each related artifact is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The short title provides an alternate title for use in informal descriptive
 * contexts where the full, formal title is not necessary.
 */
  shortTitle?: string | undefined;
  _shortTitle?: Element | undefined;

        
      
        
          
  /**
 * The status of this research definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of research definitions that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * The intended subjects for the ResearchDefinition. If this element is not
 * provided, a Patient subject is assumed, but the subject of the
 * ResearchDefinition can be anything.
 * The subject of the ResearchDefinition is critical in interpreting the criteria
 * definitions, as the logic in the ResearchDefinitions is evaluated with respect
 * to a particular subject. This corresponds roughly to the notion of a Compartment
 * in that it limits what content is available based on its relationship to the
 * subject. In CQL, this corresponds to the context declaration.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * The intended subjects for the ResearchDefinition. If this element is not
 * provided, a Patient subject is assumed, but the subject of the
 * ResearchDefinition can be anything.
 * The subject of the ResearchDefinition is critical in interpreting the criteria
 * definitions, as the logic in the ResearchDefinitions is evaluated with respect
 * to a particular subject. This corresponds roughly to the notion of a Compartment
 * in that it limits what content is available based on its relationship to the
 * subject. In CQL, this corresponds to the context declaration.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
        
      
        
          
  /**
 * An explanatory or alternate title for the ResearchDefinition giving additional
 * information about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the research definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Descriptive topics related to the content of the ResearchDefinition. Topics
 * provide a high-level categorization grouping types of ResearchDefinitions that
 * can be useful for filtering and searching.
 */
  topic?: Array<CodeableConcept> | undefined;
  _topic?: Element[] | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this research definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this research definition
 * is (or will be) published. This URL can be the target of a canonical reference.
 * It SHALL remain the same when the research definition is stored on different
 * servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A detailed description, from a clinical perspective, of how the
 * ResearchDefinition is used.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate research
 * definition instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the research definition
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the research definition author and is not expected to
 * be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence. To provide a version consistent with
 * the Decision Support Service specification, use the format Major.Minor.Revision
 * (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the
 * Decision Support Service specification. Note that a version is required for
 * non-experimental active artifacts.
 * There may be different research definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the research
 * definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * ResearchElementDefinition
 * 
 * The ResearchElementDefinition resource describes a "PICO" element that knowledge
 * (evidence, assertion, recommendation) is about.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ResearchElementDefinition.html}
 */
    export interface ResearchElementDefinition extends DomainResource {
      
      readonly resourceType: "ResearchElementDefinition";
      

      
        
          
  /**
 * The date on which the resource content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The 'date' element may be more recent than the approval date because of minor
 * changes or editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * An individiual or organization primarily involved in the creation and
 * maintenance of the content.
 */
  author?: Array<ContactDetail> | undefined;
  _author?: Element[] | undefined;

        
      
        
          
  /**
 * A characteristic that defines the members of the research element. Multiple
 * characteristics are applied with "and" semantics.
 * Characteristics can be defined flexibly to accommodate different use cases for
 * membership criteria, ranging from simple codes, all the way to using an
 * expression language to express the criteria.
 */
  characteristic: Array<BackboneElement>;
  _characteristic?: Element[] | undefined;

        
      
        
          
            
  /**
 * Define members of the research element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionCodeableConcept?: CodeableConcept | undefined;
  _definitionCodeableConcept?: Element | undefined;

          
            
  /**
 * Define members of the research element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionCanonical?: string | undefined;
  _definitionCanonical?: Element | undefined;

          
            
  /**
 * Define members of the research element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionExpression?: Expression | undefined;
  _definitionExpression?: Element | undefined;

          
            
  /**
 * Define members of the research element using Codes (such as condition,
 * medication, or observation), Expressions ( using an expression language such as
 * FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the
 * last year).
 */
  definitionDataRequirement?: DataRequirement | undefined;
  _definitionDataRequirement?: Element | undefined;

          
        
      
        
          
  /**
 * When true, members with this characteristic are excluded from the element.
 */
  exclude?: boolean | undefined;
  _exclude?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates what effective period the study covers.
 */
  participantEffectiveDateTime?: string | undefined;
  _participantEffectiveDateTime?: Element | undefined;

          
            
  /**
 * Indicates what effective period the study covers.
 */
  participantEffectivePeriod?: Period | undefined;
  _participantEffectivePeriod?: Element | undefined;

          
            
  /**
 * Indicates what effective period the study covers.
 */
  participantEffectiveDuration?: Duration | undefined;
  _participantEffectiveDuration?: Element | undefined;

          
            
  /**
 * Indicates what effective period the study covers.
 */
  participantEffectiveTiming?: Timing | undefined;
  _participantEffectiveTiming?: Element | undefined;

          
        
      
        
          
  /**
 * A narrative description of the time period the study covers.
 */
  participantEffectiveDescription?: string | undefined;
  _participantEffectiveDescription?: Element | undefined;

        
      
        
          
  /**
 * Indicates how elements are aggregated within the study effective period.
 */
  participantEffectiveGroupMeasure?: string | undefined;
  _participantEffectiveGroupMeasure?: Element | undefined;

        
      
        
          
  /**
 * Indicates duration from the participant's study entry.
 */
  participantEffectiveTimeFromStart?: Duration | undefined;
  _participantEffectiveTimeFromStart?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates what effective period the study covers.
 */
  studyEffectiveDateTime?: string | undefined;
  _studyEffectiveDateTime?: Element | undefined;

          
            
  /**
 * Indicates what effective period the study covers.
 */
  studyEffectivePeriod?: Period | undefined;
  _studyEffectivePeriod?: Element | undefined;

          
            
  /**
 * Indicates what effective period the study covers.
 */
  studyEffectiveDuration?: Duration | undefined;
  _studyEffectiveDuration?: Element | undefined;

          
            
  /**
 * Indicates what effective period the study covers.
 */
  studyEffectiveTiming?: Timing | undefined;
  _studyEffectiveTiming?: Element | undefined;

          
        
      
        
          
  /**
 * A narrative description of the time period the study covers.
 */
  studyEffectiveDescription?: string | undefined;
  _studyEffectiveDescription?: Element | undefined;

        
      
        
          
  /**
 * Indicates how elements are aggregated within the study effective period.
 */
  studyEffectiveGroupMeasure?: string | undefined;
  _studyEffectiveGroupMeasure?: Element | undefined;

        
      
        
          
  /**
 * Indicates duration from the study initiation.
 */
  studyEffectiveTimeFromStart?: Duration | undefined;
  _studyEffectiveTimeFromStart?: Element | undefined;

        
      
        
          
  /**
 * Specifies the UCUM unit for the outcome.
 */
  unitOfMeasure?: CodeableConcept | undefined;
  _unitOfMeasure?: Element | undefined;

        
      
        
          
  /**
 * Use UsageContext to define the members of the population, such as Age Ranges,
 * Genders, Settings.
 */
  usageContext?: Array<UsageContext> | undefined;
  _usageContext?: Element[] | undefined;

        
      
        
          
  /**
 * A human-readable string to clarify or explain concepts about the resource.
 */
  comment?: Array<string> | undefined;
  _comment?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the research element definition and/or its
 * contents. Copyright statements are generally legal restrictions on the use and
 * publishing of the research element definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the research element definition was
 * published. The date must change when the business version changes and it must
 * change if the status code changes. In addition, it should change when the
 * substantive content of the research element definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the research element definition.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the research element definition from
 * a consumer's perspective.
 * This description can be used to capture details such as why the research element
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the research element definition as conveyed in the 'text'
 * field of the resource itself. This item SHOULD be populated unless the
 * information is available from context (e.g. the language of the research element
 * definition is presumed to be the predominant language in the place the research
 * element definition was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for internal coherence of
 * the content.
 */
  editor?: Array<ContactDetail> | undefined;
  _editor?: Element[] | undefined;

        
      
        
          
  /**
 * The period during which the research element definition content was or is
 * planned to be in active use.
 * The effective period for a research element definition  determines when the
 * content is applicable for usage and is independent of publication and review
 * dates. For example, a measure intended to be used for the year 2016 might be
 * published in 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * An individual or organization responsible for officially endorsing the content
 * for use in some setting.
 */
  endorser?: Array<ContactDetail> | undefined;
  _endorser?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this research element definition is authored
 * for testing purposes (or education/evaluation/marketing) and is not intended to
 * be used for genuine usage.
 * Allows filtering of research element definitions that are appropriate for use
 * versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this research element definition
 * when it is represented in other formats, or referenced in a specification,
 * model, design or an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this research element definition
 * outside of FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the research element definition is
 * intended to be used.
 * It may be possible for the research element definition to be used in
 * jurisdictions other than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the resource content was last reviewed. Review happens
 * periodically after approval but does not change the original approval date.
 * If specified, this date follows the original approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * A reference to a Library resource containing the formal logic used by the
 * ResearchElementDefinition.
 */
  library?: Array<string> | undefined;
  _library?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the research element definition. This name
 * should be usable as an identifier for the module by machine processing
 * applications such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the research element
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the research element definition is the organization or individual primarily
 * responsible for the maintenance and upkeep of the research element definition.
 * This is not necessarily the same individual or organization that developed and
 * initially authored the content. The publisher is the primary point of contact
 * for questions or issues with the research element definition. This item SHOULD
 * be populated unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this research element definition is needed and why it has
 * been designed as it has.
 * This element does not describe the usage of the research element definition.
 * Instead, it provides traceability of ''why'' the resource is either needed or
 * ''why'' it is defined as it is.  This may be used to point to source materials
 * or specifications that drove the structure of this research element definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Related artifacts such as additional documentation, justification, or
 * bibliographic references.
 * Each related artifact is either an attachment, or a reference to another
 * resource, but not both.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * An individual or organization primarily responsible for review of some aspect of
 * the content.
 */
  reviewer?: Array<ContactDetail> | undefined;
  _reviewer?: Element[] | undefined;

        
      
        
          
  /**
 * The short title provides an alternate title for use in informal descriptive
 * contexts where the full, formal title is not necessary.
 */
  shortTitle?: string | undefined;
  _shortTitle?: Element | undefined;

        
      
        
          
  /**
 * The status of this research element definition. Enables tracking the life-cycle
 * of the content.
 * Allows filtering of research element definitions that are appropriate for use
 * versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
            
  /**
 * The intended subjects for the ResearchElementDefinition. If this element is not
 * provided, a Patient subject is assumed, but the subject of the
 * ResearchElementDefinition can be anything.
 * The subject of the ResearchElementDefinition is critical in interpreting the
 * criteria definitions, as the logic in the ResearchElementDefinitions is
 * evaluated with respect to a particular subject. This corresponds roughly to the
 * notion of a Compartment in that it limits what content is available based on its
 * relationship to the subject. In CQL, this corresponds to the context
 * declaration.
 */
  subjectCodeableConcept?: CodeableConcept | undefined;
  _subjectCodeableConcept?: Element | undefined;

          
            
  /**
 * The intended subjects for the ResearchElementDefinition. If this element is not
 * provided, a Patient subject is assumed, but the subject of the
 * ResearchElementDefinition can be anything.
 * The subject of the ResearchElementDefinition is critical in interpreting the
 * criteria definitions, as the logic in the ResearchElementDefinitions is
 * evaluated with respect to a particular subject. This corresponds roughly to the
 * notion of a Compartment in that it limits what content is available based on its
 * relationship to the subject. In CQL, this corresponds to the context
 * declaration.
 */
  subjectReference?: Reference | undefined;
  _subjectReference?: Element | undefined;

          
        
      
        
          
  /**
 * An explanatory or alternate title for the ResearchElementDefinition giving
 * additional information about its content.
 */
  subtitle?: string | undefined;
  _subtitle?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the research element definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Descriptive topics related to the content of the ResearchElementDefinition.
 * Topics provide a high-level categorization grouping types of
 * ResearchElementDefinitions that can be useful for filtering and searching.
 */
  topic?: Array<CodeableConcept> | undefined;
  _topic?: Element[] | undefined;

        
      
        
          
  /**
 * The type of research element, a population, an exposure, or an outcome.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this research element definition when
 * it is referenced in a specification, model, design or an instance; also called
 * its canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this research element
 * definition is (or will be) published. This URL can be the target of a canonical
 * reference. It SHALL remain the same when the research element definition is
 * stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A detailed description, from a clinical perspective, of how the
 * ResearchElementDefinition is used.
 */
  usage?: string | undefined;
  _usage?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate research element
 * definition instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive).
 */
  variableType?: string | undefined;
  _variableType?: Element | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the research element
 * definition when it is referenced in a specification, model, design or instance.
 * This is an arbitrary value managed by the research element definition author and
 * is not expected to be globally unique. For example, it might be a timestamp
 * (e.g. yyyymmdd) if a managed version is not available. There is also no
 * expectation that versions can be placed in a lexicographical sequence. To
 * provide a version consistent with the Decision Support Service specification,
 * use the format Major.Minor.Revision (e.g. 1.0.0). For more information on
 * versioning knowledge assets, refer to the Decision Support Service
 * specification. Note that a version is required for non-experimental active
 * artifacts.
 * There may be different research element definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the research
 * element definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * ResearchStudy
 * 
 * A process where a researcher or organization plans and then executes a series of
 * steps intended to increase the field of healthcare-related knowledge.  This
 * includes studies of safety, efficacy, comparative effectiveness and other
 * information about medications, devices, therapies and other interventional and
 * investigative techniques.  A ResearchStudy involves the gathering of information
 * about human or animal subjects.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ResearchStudy.html}
 */
    export interface ResearchStudy extends DomainResource {
      
      readonly resourceType: "ResearchStudy";
      

      
        
          
  /**
 * Describes an expected sequence of events for one of the participants of a study.
 * E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
 */
  arm?: Array<BackboneElement> | undefined;
  _arm?: Element[] | undefined;

        
      
        
          
  /**
 * A succinct description of the path through the study that would be followed by a
 * subject adhering to this arm.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Unique, human-readable label for this arm of the study.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Categorization of study arm, e.g. experimental, active comparator, placebo
 * comparater.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Codes categorizing the type of study such as investigational vs. observational,
 * type of blinding, type of randomization, safety vs. efficacy, etc.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * The condition that is the focus of the study.  For example, In a study to
 * examine risk factors for Lupus, might have as an inclusion criterion "healthy
 * volunteer", but the target condition code would be a Lupus SNOMED code.
 */
  condition?: Array<CodeableConcept> | undefined;
  _condition?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in learning more about or engaging with the
 * study.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A full description of how the study is being conducted.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Reference to a Group that defines the criteria for and quantity of subjects
 * participating in the study.  E.g. " 200 female Europeans between the ages of 20
 * and 45 with early onset diabetes".
 * The Group referenced should not generally enumerate specific subjects.  Subjects
 * will be linked to the study using the ResearchSubject resource.
 */
  enrollment?: Array<Reference> | undefined;
  _enrollment?: Element[] | undefined;

        
      
        
          
  /**
 * The medication(s), food(s), therapy(ies), device(s) or other concerns or
 * interventions that the study is seeking to gain more information about.
 */
  focus?: Array<CodeableConcept> | undefined;
  _focus?: Element[] | undefined;

        
      
        
          
  /**
 * Identifiers assigned to this research study by the sponsor or other systems.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Key terms to aid in searching for or filtering the study.
 */
  keyword?: Array<CodeableConcept> | undefined;
  _keyword?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates a country, state or other region where the study is taking place.
 */
  location?: Array<CodeableConcept> | undefined;
  _location?: Element[] | undefined;

        
      
        
          
  /**
 * Comments made about the study by the performer, subject or other participants.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * A goal that the study is aiming to achieve in terms of a scientific question to
 * be answered by the analysis of data collected during the study.
 */
  objective?: Array<BackboneElement> | undefined;
  _objective?: Element[] | undefined;

        
      
        
          
  /**
 * Unique, human-readable label for this objective of the study.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The kind of study objective.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A larger research study of which this particular study is a component or step.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the start date and the expected (or actual, depending on status) end
 * date for the study.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The stage in the progression of a therapy from initial experimental use in
 * humans in clinical trials to post-market evaluation.
 */
  phase?: CodeableConcept | undefined;
  _phase?: Element | undefined;

        
      
        
          
  /**
 * The type of study based upon the intent of the study's activities. A
 * classification of the intent of the study.
 */
  primaryPurposeType?: CodeableConcept | undefined;
  _primaryPurposeType?: Element | undefined;

        
      
        
          
  /**
 * A researcher in a study who oversees multiple aspects of the study, such as
 * concept development, protocol writing, protocol submission for IRB approval,
 * participant recruitment, informed consent, data collection, analysis,
 * interpretation and presentation.
 */
  principalInvestigator?: Reference | undefined;
  _principalInvestigator?: Element | undefined;

        
      
        
          
  /**
 * The set of steps expected to be performed as part of the execution of the study.
 */
  protocol?: Array<Reference> | undefined;
  _protocol?: Element[] | undefined;

        
      
        
          
  /**
 * A description and/or code explaining the premature termination of the study.
 */
  reasonStopped?: CodeableConcept | undefined;
  _reasonStopped?: Element | undefined;

        
      
        
          
  /**
 * Citations, references and other related documents.
 */
  relatedArtifact?: Array<RelatedArtifact> | undefined;
  _relatedArtifact?: Element[] | undefined;

        
      
        
          
  /**
 * A facility in which study activities are conducted.
 */
  site?: Array<Reference> | undefined;
  _site?: Element[] | undefined;

        
      
        
          
  /**
 * An organization that initiates the investigation and is legally responsible for
 * the study.
 */
  sponsor?: Reference | undefined;
  _sponsor?: Element | undefined;

        
      
        
          
  /**
 * The current state of the study.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive user-friendly label for the study.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
    }

  


  
    /**
 * ResearchSubject
 * 
 * A physical entity which is the primary unit of operational and/or administrative
 * interest in a study.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ResearchSubject.html}
 */
    export interface ResearchSubject extends DomainResource {
      
      readonly resourceType: "ResearchSubject";
      

      
        
          
  /**
 * The name of the arm in the study the subject actually followed as part of this
 * study.
 */
  actualArm?: string | undefined;
  _actualArm?: Element | undefined;

        
      
        
          
  /**
 * The name of the arm in the study the subject is expected to follow as part of
 * this study.
 */
  assignedArm?: string | undefined;
  _assignedArm?: Element | undefined;

        
      
        
          
  /**
 * A record of the patient's informed agreement to participate in the study.
 */
  consent?: Reference | undefined;
  _consent?: Element | undefined;

        
      
        
          
  /**
 * Identifiers assigned to this research subject for a study.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The record of the person or animal who is involved in the study.
 */
  individual: Reference;
  _individual?: Element | undefined;

        
      
        
          
  /**
 * The dates the subject began and ended their participation in the study.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The current state of the subject.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Reference to the study the subject is participating in.
 */
  study: Reference;
  _study?: Element | undefined;

        
      
    }

  


  


  
    /**
 * Resource
 * 
 * This is the base resource type for everything.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Resource.html}
 */
    export interface Resource {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The logical id of the resource, as used in the URL for the resource. Once
 * assigned, this value never changes.
 * The only time that a resource does not have an id is when it is being submitted
 * to the server using a create operation.
 */
  id?: string | undefined;
  _id?: Element | undefined;

        
      
        
          
  /**
 * A reference to a set of rules that were followed when the resource was
 * constructed, and which must be understood when processing the content. Often,
 * this is a reference to an implementation guide that defines the special rules
 * along with other profiles etc.
 * Asserting this rule set restricts the content to be only understood by a limited
 * set of trading partners. This inherently limits the usefulness of the data in
 * the long term. However, the existing health eco-system is highly fractured, and
 * not yet ready to define, collect, and exchange data in a generally computable
 * sense. Wherever possible, implementers and/or specification writers should avoid
 * using this element. Often, when used, the URL is a reference to an
 * implementation guide that defines these special rules as part of it's narrative
 * along with other profiles, value sets, etc.
 */
  implicitRules?: string | undefined;
  _implicitRules?: Element | undefined;

        
      
        
          
  /**
 * The base language in which the resource is written.
 * Language is provided to support indexing and accessibility (typically, services
 * such as text to speech use the language tag). The html language tag in the
 * narrative applies  to the narrative. The language tag on the resource may be
 * used to specify the language of other presentations generated from the data in
 * the resource. Not all the content has to be in the base language. The
 * Resource.language should not be assumed to apply to the narrative automatically.
 * If a language is specified, it should it also be specified on the div element in
 * the html (see rules in HTML5 for information about the relationship between
 * xml:lang and the html lang attribute).
 */
  language?: string | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * The metadata about the resource. This is content that is maintained by the
 * infrastructure. Changes to the content might not always be associated with
 * version changes to the resource.
 */
  meta?: Meta | undefined;
  _meta?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * RiskAssessment
 * 
 * An assessment of the likely outcome(s) for a patient or other subject as well as
 * the likelihood of each outcome.
 * 
 * @see {@link http://hl7.org/fhir/R4B/RiskAssessment.html}
 */
    export interface RiskAssessment extends DomainResource {
      
      readonly resourceType: "RiskAssessment";
      

      
        
          
  /**
 * A reference to the request that is fulfilled by this risk assessment.
 */
  basedOn?: Reference | undefined;
  _basedOn?: Element | undefined;

        
      
        
          
  /**
 * Indicates the source data considered as part of the assessment (for example,
 * FamilyHistory, Observations, Procedures, Conditions, etc.).
 */
  basis?: Array<Reference> | undefined;
  _basis?: Element[] | undefined;

        
      
        
          
  /**
 * The type of the risk assessment performed.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * For assessments or prognosis specific to a particular condition, indicates the
 * condition being assessed.
 */
  condition?: Reference | undefined;
  _condition?: Element | undefined;

        
      
        
          
  /**
 * The encounter where the assessment was performed.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Business identifier assigned to the risk assessment.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The algorithm, process or mechanism used to evaluate the risk.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * A description of the steps that might be taken to reduce the identified risk(s).
 */
  mitigation?: string | undefined;
  _mitigation?: Element | undefined;

        
      
        
          
  /**
 * Additional comments about the risk assessment.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * The date (and possibly time) the risk assessment was performed.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * The date (and possibly time) the risk assessment was performed.
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * A reference to a resource that this risk assessment is part of, such as a
 * Procedure.
 */
  parent?: Reference | undefined;
  _parent?: Element | undefined;

        
      
        
          
  /**
 * The provider or software application that performed the assessment.
 */
  performer?: Reference | undefined;
  _performer?: Element | undefined;

        
      
        
          
  /**
 * Describes the expected outcome for the subject.
 * Multiple repetitions can be used to identify the same type of outcome in
 * different timeframes as well as different types of outcomes.
 */
  prediction?: Array<BackboneElement> | undefined;
  _prediction?: Element[] | undefined;

        
      
        
          
  /**
 * One of the potential outcomes for the patient (e.g. remission, death,  a
 * particular condition).
 */
  outcome?: CodeableConcept | undefined;
  _outcome?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates how likely the outcome is (in the specified timeframe).
 * If range is used, it represents the lower and upper bounds of certainty; e.g.
 * 40-60%  Decimal values are expressed as percentages as well (max = 100).
 */
  probabilityDecimal?: number | undefined;
  _probabilityDecimal?: Element | undefined;

          
            
  /**
 * Indicates how likely the outcome is (in the specified timeframe).
 * If range is used, it represents the lower and upper bounds of certainty; e.g.
 * 40-60%  Decimal values are expressed as percentages as well (max = 100).
 */
  probabilityRange?: Range | undefined;
  _probabilityRange?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates how likely the outcome is (in the specified timeframe), expressed as a
 * qualitative value (e.g. low, medium, or high).
 */
  qualitativeRisk?: CodeableConcept | undefined;
  _qualitativeRisk?: Element | undefined;

        
      
        
          
  /**
 * Additional information explaining the basis for the prediction.
 */
  rationale?: string | undefined;
  _rationale?: Element | undefined;

        
      
        
          
  /**
 * Indicates the risk for this particular subject (with their specific
 * characteristics) divided by the risk of the population in general.  (Numbers
 * greater than 1 = higher risk than the population, numbers less than 1 = lower
 * risk.).
 */
  relativeRisk?: number | undefined;
  _relativeRisk?: Element | undefined;

        
      
        
          
            
  /**
 * Indicates the period of time or age range of the subject to which the specified
 * probability applies.
 * If not specified, the risk applies "over the subject's lifespan".
 */
  whenPeriod?: Period | undefined;
  _whenPeriod?: Element | undefined;

          
            
  /**
 * Indicates the period of time or age range of the subject to which the specified
 * probability applies.
 * If not specified, the risk applies "over the subject's lifespan".
 */
  whenRange?: Range | undefined;
  _whenRange?: Element | undefined;

          
        
      
        
          
  /**
 * The reason the risk assessment was performed.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Resources supporting the reason the risk assessment was performed.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The status of the RiskAssessment, using the same statuses as an Observation.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The patient or group the risk assessment applies to.
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * SampledData
 * 
 * Base StructureDefinition for SampledData Type: A series of measurements taken by
 * a device, with upper and lower limits. There may be more than one dimension in
 * the data.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SampledData.html}
 */
    export interface SampledData extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A series of data points which are decimal values separated by a single space
 * (character u20). The special values "E" (error), "L" (below detection limit) and
 * "U" (above detection limit) can also be used in place of a decimal value.
 * Data may be missing if it is omitted for summarization purposes. In general,
 * data is required for any actual use of a SampledData.
 */
  data?: string | undefined;
  _data?: Element | undefined;

        
      
        
          
  /**
 * The number of sample points at each time point. If this value is greater than
 * one, then the dimensions will be interlaced - all the sample points for a point
 * in time will be recorded at once.
 * If there is more than one dimension, the code for the type of data will define
 * the meaning of the dimensions (typically ECG data).
 */
  dimensions: number;
  _dimensions?: Element | undefined;

        
      
        
          
  /**
 * A correction factor that is applied to the sampled data points before they are
 * added to the origin.
 */
  factor?: number | undefined;
  _factor?: Element | undefined;

        
      
        
          
  /**
 * The lower limit of detection of the measured points. This is needed if any of
 * the data points have the value "L" (lower than detection limit).
 */
  lowerLimit?: number | undefined;
  _lowerLimit?: Element | undefined;

        
      
        
          
  /**
 * The base quantity that a measured value of zero represents. In addition, this
 * provides the units of the entire measurement series.
 */
  origin: Quantity;
  _origin?: Element | undefined;

        
      
        
          
  /**
 * The length of time between sampling times, measured in milliseconds.
 * This is usually a whole number.
 */
  period: number;
  _period?: Element | undefined;

        
      
        
          
  /**
 * The upper limit of detection of the measured points. This is needed if any of
 * the data points have the value "U" (higher than detection limit).
 */
  upperLimit?: number | undefined;
  _upperLimit?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Schedule
 * 
 * A container for slots of time that may be available for booking appointments.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Schedule.html}
 */
    export interface Schedule extends DomainResource {
      
      readonly resourceType: "Schedule";
      

      
        
          
  /**
 * Whether this schedule record is in active use or should not be used (such as was
 * entered in error).
 * This element is labeled as a modifier because it may be used to mark that the
 * resource was created in error.
 */
  active?: boolean | undefined;
  _active?: Element | undefined;

        
      
        
          
  /**
 * Slots that reference this schedule resource provide the availability details to
 * these referenced resource(s).
 * The capacity to support multiple referenced resource types should be used in
 * cases where the specific resources themselves cannot be scheduled without the
 * other, and thus only make sense to the system exposing them as a group. Common
 * examples of this are where the combination of a practitioner and a room
 * (Location) are always required by a system.
 */
  actor: Array<Reference>;
  _actor?: Element[] | undefined;

        
      
        
          
  /**
 * Comments on the availability to describe any extended information. Such as
 * custom constraints on the slots that may be associated.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * External Ids for this item.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The period of time that the slots that reference this Schedule resource cover
 * (even if none exist). These  cover the amount of time that an organization's
 * planning horizon; the interval for which they are currently accepting
 * appointments. This does not define a "template" for planning outside these
 * dates.
 */
  planningHorizon?: Period | undefined;
  _planningHorizon?: Element | undefined;

        
      
        
          
  /**
 * A broad categorization of the service that is to be performed during this
 * appointment.
 */
  serviceCategory?: Array<CodeableConcept> | undefined;
  _serviceCategory?: Element[] | undefined;

        
      
        
          
  /**
 * The specific service that is to be performed during this appointment.
 */
  serviceType?: Array<CodeableConcept> | undefined;
  _serviceType?: Element[] | undefined;

        
      
        
          
  /**
 * The specialty of a practitioner that would be required to perform the service
 * requested in this appointment.
 */
  specialty?: Array<CodeableConcept> | undefined;
  _specialty?: Element[] | undefined;

        
      
    }

  


  


  


  
    /**
 * SearchParameter
 * 
 * A search parameter that defines a named search item that can be used to
 * search/filter on a resource.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SearchParameter.html}
 */
    export interface SearchParameter extends DomainResource {
      
      readonly resourceType: "SearchParameter";
      

      
        
          
  /**
 * The base resource type(s) that this search parameter can be used against.
 * A search parameter must always apply to at least one resource type. When search
 * parameters apply to more than one resource type, they can be used against any of
 * the listed resource types, or in a cross-type search (see [Cross Resource
 * Search](http.html#xres-search)).
 */
  base: Array<string>;
  _base?: Element[] | undefined;

        
      
        
          
  /**
 * Contains the names of any search parameters which may be chained to the
 * containing search parameter. Chained parameters may be added to search
 * parameters of type reference and specify that resources will only be returned if
 * they contain a reference to a resource which matches the chained parameter
 * value. Values for this field should be drawn from SearchParameter.code for a
 * parameter on the target resource type.
 * Systems are not required to list all the chain names they support, but if they
 * don't list them, clients might not know to use them.
 */
  chain?: Array<string> | undefined;
  _chain?: Element[] | undefined;

        
      
        
          
  /**
 * The code used in the URL or the parameter name in a parameters resource for this
 * search parameter.
 * For maximum compatibility, use only lowercase ASCII characters.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Comparators supported for the search parameter.
 * If no comparators are listed, clients should not expect servers to support any
 * comparators.
 */
  comparator?: Array<string> | undefined;
  _comparator?: Element[] | undefined;

        
      
        
          
  /**
 * Used to define the parts of a composite search parameter.
 */
  component?: Array<BackboneElement> | undefined;
  _component?: Element[] | undefined;

        
      
        
          
  /**
 * The definition of the search parameter that describes this part.
 */
  definition: string;
  _definition?: Element | undefined;

        
      
        
          
  /**
 * A sub-expression that defines how to extract values for this component from the
 * output of the main SearchParameter.expression.
 * This expression overrides the expression in the definition and extracts the
 * index values from the outcome of the composite expression.
 */
  expression: string;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the search parameter was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the search parameter changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the search parameter. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * Where this search parameter is originally defined. If a derivedFrom is provided,
 * then the details in the search parameter must be consistent with the definition
 * from which it is defined. i.e. the parameter should have the same meaning, and
 * (usually) the functionality should be a proper subset of the underlying search
 * parameter.
 * The intent of this is that a server can designate that it provides support for a
 * search parameter defined in the specification itself (e.g.
 * [`value-quantity`](http://hl7.org/fhir/SearchParameter/Observation-value-quantit
 * y), but detail how it is supported by the server.
 */
  derivedFrom?: string | undefined;
  _derivedFrom?: Element | undefined;

        
      
        
          
  /**
 * And how it used.
 * This description can be used to capture details such as why the search parameter
 * was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the search parameter as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the search parameter is presumed to
 * be the predominant language in the place the search parameter was created).
 */
  description: string;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this search parameter is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of search parameters that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A FHIRPath expression that returns a set of elements for the search parameter.
 * Note that the elements returned by the expression are sometimes complex elements
 * where logic is required to determine quite how to handle them; e.g.
 * CodeableConcepts may contain text and/or multiple codings, where the codings
 * themselves contain a code and a system. For composite search parameters, the
 * outcome of the expression must a collection of base elements from which the
 * composites are derived.
 */
  expression?: string | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the search parameter is intended to be
 * used.
 * It may be possible for the search parameter to be used in jurisdictions other
 * than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A modifier supported for the search parameter.
 */
  modifier?: Array<string> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * Whether multiple parameters are allowed - e.g. more than one parameter with the
 * same name. The search matches if all the parameters match.
 */
  multipleAnd?: boolean | undefined;
  _multipleAnd?: Element | undefined;

        
      
        
          
  /**
 * Whether multiple values are allowed for each time the parameter exists. Values
 * are separated by commas, and the parameter matches if any of the values match.
 */
  multipleOr?: boolean | undefined;
  _multipleOr?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the search parameter. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the search parameter.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the search parameter is the organization or individual primarily responsible for
 * the maintenance and upkeep of the search parameter. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the search parameter. This item SHOULD be populated unless the information
 * is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this search parameter is needed and why it has been designed
 * as it has.
 * This element does not describe the usage of the search parameter. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this search parameter.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The status of this search parameter. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of search parameters that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Types of resource (if a resource is referenced).
 */
  target?: Array<string> | undefined;
  _target?: Element[] | undefined;

        
      
        
          
  /**
 * The type of value that a search parameter may contain, and how the content is
 * interpreted.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this search parameter when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this search parameter is
 * (or will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the search parameter is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate search parameter
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the search parameter
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the search parameter author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different search parameter instances that have the same identifier
 * but different versions.  The version can be appended to the url in a reference
 * to allow a reference to a particular business version of the search parameter
 * with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * An XPath expression that returns a set of elements for the search parameter.
 * Note that the elements returned by the XPath are sometimes complex elements
 * where logic is required to determine quite how to handle them; e.g.
 * CodeableConcepts may contain text and/or multiple codings, where the codings
 * themselves contain a code and a system.
 */
  xpath?: string | undefined;
  _xpath?: Element | undefined;

        
      
        
          
  /**
 * How the search parameter relates to the set of elements returned by evaluating
 * the xpath query.
 */
  xpathUsage?: string | undefined;
  _xpathUsage?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * ServiceRequest
 * 
 * A record of a request for service such as diagnostic investigations, treatments,
 * or operations to be performed.
 * 
 * @see {@link http://hl7.org/fhir/R4B/ServiceRequest.html}
 */
    export interface ServiceRequest extends DomainResource {
      
      readonly resourceType: "ServiceRequest";
      

      
        
          
            
  /**
 * If a CodeableConcept is present, it indicates the pre-condition for performing
 * the service.  For example "pain", "on flare-up", etc.
 */
  asNeededBoolean?: boolean | undefined;
  _asNeededBoolean?: Element | undefined;

          
            
  /**
 * If a CodeableConcept is present, it indicates the pre-condition for performing
 * the service.  For example "pain", "on flare-up", etc.
 */
  asNeededCodeableConcept?: CodeableConcept | undefined;
  _asNeededCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * When the request transitioned to being actionable.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * Plan/proposal/order fulfilled by this request.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Anatomic location where the procedure should be performed. This is the target
 * site.
 * Only used if not implicit in the code found in ServiceRequest.code.  If the use
 * case requires BodySite to be handled as a separate resource instead of an inline
 * coded element (e.g. to identify and track separately)  then use the standard
 * extension
 * [procedure-targetBodyStructure](extension-procedure-targetbodystructure.html).
 */
  bodySite?: Array<CodeableConcept> | undefined;
  _bodySite?: Element[] | undefined;

        
      
        
          
  /**
 * A code that classifies the service for searching, sorting and display purposes
 * (e.g. "Surgical Procedure").
 * There may be multiple axis of categorization depending on the context or use
 * case for retrieving or displaying the resource.  The level of granularity is
 * defined by the category concepts in the value set.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * A code that identifies a particular service (i.e., procedure, diagnostic
 * investigation, or panel of investigations) that have been requested.
 * Many laboratory and radiology procedure codes embed the specimen/organ system in
 * the test order name, for example,  serum or serum/plasma glucose, or a chest
 * x-ray. The specimen might not be recorded separately from the test code.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Set this to true if the record is saying that the service/procedure should NOT
 * be performed.
 * In general, only the code and timeframe will be present, though occasional
 * additional qualifiers such as body site or even performer could be included to
 * narrow the scope of the prohibition.  If the ServiceRequest.code and
 * ServiceRequest.doNotPerform both contain negation, that will reinforce
 * prohibition and should not have a double negative interpretation.
 */
  doNotPerform?: boolean | undefined;
  _doNotPerform?: Element | undefined;

        
      
        
          
  /**
 * An encounter that provides additional information about the healthcare context
 * in which this request is made.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Identifiers assigned to this order instance by the orderer and/or the receiver
 * and/or order fulfiller.
 * The identifier.type element is used to distinguish between the identifiers
 * assigned by the orderer (known as the 'Placer' in HL7 v2) and the producer of
 * the observations in response to the order (known as the 'Filler' in HL7 v2).
 * For further discussion and examples see the resource notes section below.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to a FHIR-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this ServiceRequest.
 * Note: This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  instantiatesCanonical?: Array<string> | undefined;
  _instantiatesCanonical?: Element[] | undefined;

        
      
        
          
  /**
 * The URL pointing to an externally maintained protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this ServiceRequest.
 * This might be an HTML page, PDF, etc. or could just be a non-resolvable URI
 * identifier.
 */
  instantiatesUri?: Array<string> | undefined;
  _instantiatesUri?: Element[] | undefined;

        
      
        
          
  /**
 * Insurance plans, coverage extensions, pre-authorizations and/or
 * pre-determinations that may be needed for delivering the requested service.
 */
  insurance?: Array<Reference> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * Whether the request is a proposal, plan, an original order or a reflex order.
 * This element is labeled as a modifier because the intent alters when and how the
 * resource is actually applicable.
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * The preferred location(s) where the procedure should actually happen in coded or
 * free text form. E.g. at home or nursing day care center.
 */
  locationCode?: Array<CodeableConcept> | undefined;
  _locationCode?: Element[] | undefined;

        
      
        
          
  /**
 * A reference to the the preferred location(s) where the procedure should actually
 * happen. E.g. at home or nursing day care center.
 */
  locationReference?: Array<Reference> | undefined;
  _locationReference?: Element[] | undefined;

        
      
        
          
  /**
 * Any other notes and comments made about the service request. For example,
 * internal billing notes.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
            
  /**
 * The date/time at which the requested service should occur.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * The date/time at which the requested service should occur.
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * The date/time at which the requested service should occur.
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * Additional details and instructions about the how the services are to be
 * delivered.   For example, and order for a urinary catheter may have an order
 * detail for an external or indwelling catheter, or an order for a bandage may
 * require additional instructions specifying how the bandage should be applied.
 * For information from the medical record intended to support the delivery of the
 * requested services, use the `supportingInformation` element.
 */
  orderDetail?: Array<CodeableConcept> | undefined;
  _orderDetail?: Element[] | undefined;

        
      
        
          
  /**
 * Instructions in terms that are understood by the patient or consumer.
 */
  patientInstruction?: string | undefined;
  _patientInstruction?: Element | undefined;

        
      
        
          
  /**
 * The desired performer for doing the requested service.  For example, the
 * surgeon, dermatopathologist, endoscopist, etc.
 * If multiple performers are present, it is interpreted as a list of *alternative*
 * performers without any preference regardless of order.  If order of preference
 * is needed use the [request-performerOrder
 * extension](extension-request-performerorder.html).  Use CareTeam to represent a
 * group of performers (for example, Practitioner A *and* Practitioner B).
 */
  performer?: Array<Reference> | undefined;
  _performer?: Element[] | undefined;

        
      
        
          
  /**
 * Desired type of performer for doing the requested service.
 * This is a  role, not  a participation type.  In other words, does not describe
 * the task but describes the capacity.  For example, “compounding pharmacy”,
 * “psychiatrist” or “internal referral”.
 */
  performerType?: CodeableConcept | undefined;
  _performerType?: Element | undefined;

        
      
        
          
  /**
 * Indicates how quickly the ServiceRequest should be addressed with respect to
 * other requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
            
  /**
 * An amount of service being requested which can be a quantity ( for example
 * $1,500 home modification), a ratio ( for example, 20 half day visits per month),
 * or a range (2.0 to 1.8 Gy per fraction).
 */
  quantityQuantity?: Quantity | undefined;
  _quantityQuantity?: Element | undefined;

          
            
  /**
 * An amount of service being requested which can be a quantity ( for example
 * $1,500 home modification), a ratio ( for example, 20 half day visits per month),
 * or a range (2.0 to 1.8 Gy per fraction).
 */
  quantityRatio?: Ratio | undefined;
  _quantityRatio?: Element | undefined;

          
            
  /**
 * An amount of service being requested which can be a quantity ( for example
 * $1,500 home modification), a ratio ( for example, 20 half day visits per month),
 * or a range (2.0 to 1.8 Gy per fraction).
 */
  quantityRange?: Range | undefined;
  _quantityRange?: Element | undefined;

          
        
      
        
          
  /**
 * An explanation or justification for why this service is being requested in coded
 * or textual form.   This is often for billing purposes.  May relate to the
 * resources referred to in `supportingInfo`.
 * This element represents why the referral is being made and may be used to decide
 * how the service will be performed, or even if it will be performed at all.   Use
 * `CodeableConcept.text` element if the data is free (uncoded) text as shown in
 * the [CT Scan example](servicerequest-example-di.html).
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates another resource that provides a justification for why this service is
 * being requested.   May relate to the resources referred to in `supportingInfo`.
 * This element represents why the referral is being made and may be used to decide
 * how the service will be performed, or even if it will be performed at all.    To
 * be as specific as possible,  a reference to  *Observation* or *Condition* should
 * be used if available.  Otherwise when referencing  *DiagnosticReport*  it should
 * contain a finding  in `DiagnosticReport.conclusion` and/or
 * `DiagnosticReport.conclusionCode`.   When using a reference to
 * *DocumentReference*, the target document should contain clear findings language
 * providing the relevant reason for this service request.  Use  the
 * CodeableConcept text element in `ServiceRequest.reasonCode` if the data is free
 * (uncoded) text as shown in the [CT Scan
 * example](servicerequest-example-di.html).
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * Key events in the history of the request.
 * This might not include provenances for all versions of the request – only those
 * deemed “relevant” or important.This SHALL NOT include the Provenance associated
 * with this current version of the resource.  (If that provenance is deemed to be
 * a “relevant” change, it will need to be added as part of a later update.  Until
 * then, it can be queried directly as the Provenance that points to this version
 * using _revincludeAll Provenances should have some historical version of this
 * Request as their subject.
 */
  relevantHistory?: Array<Reference> | undefined;
  _relevantHistory?: Element[] | undefined;

        
      
        
          
  /**
 * The request takes the place of the referenced completed or terminated
 * request(s).
 */
  replaces?: Array<Reference> | undefined;
  _replaces?: Element[] | undefined;

        
      
        
          
  /**
 * The individual who initiated the request and has responsibility for its
 * activation.
 * This not the dispatcher, but rather who is the authorizer.  This element is not
 * intended to handle delegation which would generally be managed through the
 * Provenance resource.
 */
  requester?: Reference | undefined;
  _requester?: Element | undefined;

        
      
        
          
  /**
 * A shared identifier common to all service requests that were authorized more or
 * less simultaneously by a single author, representing the composite or group
 * identifier.
 * Requests are linked either by a "basedOn" relationship (i.e. one request is
 * fulfilling another) or by having a common requisition. Requests that are part of
 * the same requisition are generally treated independently from the perspective of
 * changing their state or maintaining them after initial creation.
 */
  requisition?: Identifier | undefined;
  _requisition?: Element | undefined;

        
      
        
          
  /**
 * One or more specimens that the laboratory procedure will use.
 * Many diagnostic procedures need a specimen, but the request itself is not
 * actually about the specimen. This element is for when the diagnostic is
 * requested on already existing specimens and the request points to the specimen
 * it applies to.    Conversely, if the request is entered first with an unknown
 * specimen, then the [Specimen](specimen.html) resource points to the
 * ServiceRequest.
 */
  specimen?: Array<Reference> | undefined;
  _specimen?: Element[] | undefined;

        
      
        
          
  /**
 * The status of the order.
 * The status is generally fully in the control of the requester - they determine
 * whether the order is draft or active and, after it has been activated, competed,
 * cancelled or suspended. States relating to the activities of the performer are
 * reflected on either the corresponding event (see [Event Pattern](event.html) for
 * general discussion) or using the [Task](task.html) resource.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * On whom or what the service is to be performed. This is usually a human patient,
 * but can also be requested on animals, groups of humans or animals, devices such
 * as dialysis machines, or even locations (typically for environmental scans).
 */
  subject: Reference;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * Additional clinical information about the patient or specimen that may influence
 * the services or their interpretations.     This information includes diagnosis,
 * clinical findings and other observations.  In laboratory ordering these are
 * typically referred to as "ask at order entry questions (AOEs)".  This includes
 * observations explicitly requested by the producer (filler) to provide context or
 * supporting information needed to complete the order. For example,  reporting the
 * amount of inspired oxygen for blood gas measurements.
 * To represent information about how the services are to be delivered use the
 * `instructions` element.
 */
  supportingInfo?: Array<Reference> | undefined;
  _supportingInfo?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  
    /**
 * Signature
 * 
 * Base StructureDefinition for Signature Type: A signature along with supporting
 * context. The signature may be a digital signature that is cryptographic in
 * nature, or some other signature acceptable to the domain. This other signature
 * may be as simple as a graphical image representing a hand-written signature, or
 * a signature ceremony Different signature approaches have different utilities.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Signature.html}
 */
    export interface Signature extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * The base64 encoding of the Signature content. When signature is not recorded
 * electronically this element would be empty.
 * Where the signature type is an XML DigSig, the signed content is a FHIR
 * Resource(s), the signature is of the XML form of the Resource(s) using
 * XML-Signature (XMLDIG) "Detached Signature" form.
 */
  data?: string | undefined;
  _data?: Element | undefined;

        
      
        
          
  /**
 * A reference to an application-usable description of the identity that is
 * represented by the signature.
 * The party that can't sign. For example a child.
 */
  onBehalfOf?: Reference | undefined;
  _onBehalfOf?: Element | undefined;

        
      
        
          
  /**
 * A mime type that indicates the technical format of the signature. Important mime
 * types are application/signature+xml for X ML DigSig, application/jose for JWS,
 * and image/* for a graphical image of a signature, etc.
 */
  sigFormat?: string | undefined;
  _sigFormat?: Element | undefined;

        
      
        
          
  /**
 * A mime type that indicates the technical format of the target resources signed
 * by the signature.
 * "xml", "json" and "ttl" are allowed, which describe the simple encodings
 * described in the specification (and imply appropriate bundle support).
 * Otherwise, mime types are legal here.
 */
  targetFormat?: string | undefined;
  _targetFormat?: Element | undefined;

        
      
        
          
  /**
 * An indication of the reason that the entity signed this document. This may be
 * explicitly included as part of the signature information and can be used when
 * determining accountability for various actions concerning the document.
 * Examples include attesting to: authorship, correct transcription, and witness of
 * specific event. Also known as a &quot;Commitment Type Indication&quot;.
 */
  type: Array<Coding>;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * When the digital signature was signed.
 * This should agree with the information in the signature.
 */
  when: string;
  _when?: Element | undefined;

        
      
        
          
  /**
 * A reference to an application-usable description of the identity that signed
 * (e.g. the signature used their private key).
 * This should agree with the information in the signature.
 */
  who: Reference;
  _who?: Element | undefined;

        
      
    }

  


  


  


  


  
    /**
 * Slot
 * 
 * A slot of time on a schedule that may be available for booking appointments.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Slot.html}
 */
    export interface Slot extends DomainResource {
      
      readonly resourceType: "Slot";
      

      
        
          
  /**
 * The style of appointment or patient that may be booked in the slot (not service
 * type).
 */
  appointmentType?: CodeableConcept | undefined;
  _appointmentType?: Element | undefined;

        
      
        
          
  /**
 * Comments on the slot to describe any extended information. Such as custom
 * constraints on the slot.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * Date/Time that the slot is to conclude.
 */
  end: string;
  _end?: Element | undefined;

        
      
        
          
  /**
 * External Ids for this item.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * This slot has already been overbooked, appointments are unlikely to be accepted
 * for this time.
 */
  overbooked?: boolean | undefined;
  _overbooked?: Element | undefined;

        
      
        
          
  /**
 * The schedule resource that this slot defines an interval of status information.
 */
  schedule: Reference;
  _schedule?: Element | undefined;

        
      
        
          
  /**
 * A broad categorization of the service that is to be performed during this
 * appointment.
 */
  serviceCategory?: Array<CodeableConcept> | undefined;
  _serviceCategory?: Element[] | undefined;

        
      
        
          
  /**
 * The type of appointments that can be booked into this slot (ideally this would
 * be an identifiable service - which is at a location, rather than the location
 * itself). If provided then this overrides the value provided on the availability
 * resource.
 */
  serviceType?: Array<CodeableConcept> | undefined;
  _serviceType?: Element[] | undefined;

        
      
        
          
  /**
 * The specialty of a practitioner that would be required to perform the service
 * requested in this appointment.
 */
  specialty?: Array<CodeableConcept> | undefined;
  _specialty?: Element[] | undefined;

        
      
        
          
  /**
 * Date/Time that the slot is to begin.
 */
  start: string;
  _start?: Element | undefined;

        
      
        
          
  /**
 * busy | free | busy-unavailable | busy-tentative | entered-in-error.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  
    /**
 * Specimen
 * 
 * A sample to be used for analysis.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Specimen.html}
 */
    export interface Specimen extends DomainResource {
      
      readonly resourceType: "Specimen";
      

      
        
          
  /**
 * The identifier assigned by the lab when accessioning specimen(s). This is not
 * necessarily the same as the specimen identifier, depending on local lab
 * procedures.
 */
  accessionIdentifier?: Identifier | undefined;
  _accessionIdentifier?: Element | undefined;

        
      
        
          
  /**
 * Details concerning the specimen collection.
 */
  collection?: BackboneElement | undefined;
  _collection?: Element | undefined;

        
      
        
          
  /**
 * Anatomical location from which the specimen was collected (if subject is a
 * patient). This is the target site.  This element is not used for environmental
 * specimens.
 * If the use case requires  BodySite to be handled as a separate resource instead
 * of an inline coded element (e.g. to identify and track separately)  then use the
 * standard extension [bodySite](extension-bodysite.html).
 */
  bodySite?: CodeableConcept | undefined;
  _bodySite?: Element | undefined;

        
      
        
          
            
  /**
 * Time when specimen was collected from subject - the physiologically relevant
 * time.
 */
  collectedDateTime?: string | undefined;
  _collectedDateTime?: Element | undefined;

          
            
  /**
 * Time when specimen was collected from subject - the physiologically relevant
 * time.
 */
  collectedPeriod?: Period | undefined;
  _collectedPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Person who collected the specimen.
 */
  collector?: Reference | undefined;
  _collector?: Element | undefined;

        
      
        
          
  /**
 * The span of time over which the collection of a specimen occurred.
 */
  duration?: Duration | undefined;
  _duration?: Element | undefined;

        
      
        
          
            
  /**
 * Abstinence or reduction from some or all food, drink, or both, for a period of
 * time prior to sample collection.
 * Representing fasting status using this element is preferred to representing it
 * with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7
 * (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a
 * component observation ` such as `Observation.component code`  = LOINC 49541-6
 * (Fasting status - Reported).
 */
  fastingStatusCodeableConcept?: CodeableConcept | undefined;
  _fastingStatusCodeableConcept?: Element | undefined;

          
            
  /**
 * Abstinence or reduction from some or all food, drink, or both, for a period of
 * time prior to sample collection.
 * Representing fasting status using this element is preferred to representing it
 * with an observation using a 'pre-coordinated code'  such as  LOINC 2005-7
 * (Calcium [Moles/​time] in 2 hour Urine --12 hours fasting), or  using  a
 * component observation ` such as `Observation.component code`  = LOINC 49541-6
 * (Fasting status - Reported).
 */
  fastingStatusDuration?: Duration | undefined;
  _fastingStatusDuration?: Element | undefined;

          
        
      
        
          
  /**
 * A coded value specifying the technique that is used to perform the procedure.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * The quantity of specimen collected; for instance the volume of a blood sample,
 * or the physical measurement of an anatomic pathology sample.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * A mode or state of being that describes the nature of the specimen.
 * Specimen condition is an observation made about the specimen.  It's a
 * point-in-time assessment.  It can be used to assess its quality or
 * appropriateness for a specific test.
 */
  condition?: Array<CodeableConcept> | undefined;
  _condition?: Element[] | undefined;

        
      
        
          
  /**
 * The container holding the specimen.  The recursive nature of containers; i.e.
 * blood in tube in tray in rack is not addressed here.
 */
  container?: Array<BackboneElement> | undefined;
  _container?: Element[] | undefined;

        
      
        
          
            
  /**
 * Introduced substance to preserve, maintain or enhance the specimen. Examples:
 * Formalin, Citrate, EDTA.
 */
  additiveCodeableConcept?: CodeableConcept | undefined;
  _additiveCodeableConcept?: Element | undefined;

          
            
  /**
 * Introduced substance to preserve, maintain or enhance the specimen. Examples:
 * Formalin, Citrate, EDTA.
 */
  additiveReference?: Reference | undefined;
  _additiveReference?: Element | undefined;

          
        
      
        
          
  /**
 * The capacity (volume or other measure) the container may contain.
 */
  capacity?: Quantity | undefined;
  _capacity?: Element | undefined;

        
      
        
          
  /**
 * Textual description of the container.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Id for container. There may be multiple; a manufacturer's bar code, lab assigned
 * identifier, etc. The container ID may differ from the specimen id in some
 * circumstances.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * The quantity of specimen in the container; may be volume, dimensions, or other
 * appropriate measurements, depending on the specimen type.
 */
  specimenQuantity?: Quantity | undefined;
  _specimenQuantity?: Element | undefined;

        
      
        
          
  /**
 * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Id for specimen.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * To communicate any details or issues about the specimen or during the specimen
 * collection. (for example: broken vial, sent with patient, frozen).
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Reference to the parent (source) specimen which is used when the specimen was
 * either derived from or a component of another specimen.
 * The parent specimen could be the source from which the current specimen is
 * derived by some processing step (e.g. an aliquot or isolate or extracted nucleic
 * acids from clinical samples) or one of many specimens that were combined to
 * create a pooled sample.
 */
  parent?: Array<Reference> | undefined;
  _parent?: Element[] | undefined;

        
      
        
          
  /**
 * Details concerning processing and processing steps for the specimen.
 */
  processing?: Array<BackboneElement> | undefined;
  _processing?: Element[] | undefined;

        
      
        
          
  /**
 * Material used in the processing step.
 */
  additive?: Array<Reference> | undefined;
  _additive?: Element[] | undefined;

        
      
        
          
  /**
 * Textual description of procedure.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A coded value specifying the procedure used to process the specimen.
 */
  procedure?: CodeableConcept | undefined;
  _procedure?: Element | undefined;

        
      
        
          
            
  /**
 * A record of the time or period when the specimen processing occurred.  For
 * example the time of sample fixation or the period of time the sample was in
 * formalin.
 */
  timeDateTime?: string | undefined;
  _timeDateTime?: Element | undefined;

          
            
  /**
 * A record of the time or period when the specimen processing occurred.  For
 * example the time of sample fixation or the period of time the sample was in
 * formalin.
 */
  timePeriod?: Period | undefined;
  _timePeriod?: Element | undefined;

          
        
      
        
          
  /**
 * Time when specimen was received for processing or testing.
 */
  receivedTime?: string | undefined;
  _receivedTime?: Element | undefined;

        
      
        
          
  /**
 * Details concerning a service request that required a specimen to be collected.
 * The request may be explicit or implied such with a ServiceRequest that requires
 * a blood draw.
 */
  request?: Array<Reference> | undefined;
  _request?: Element[] | undefined;

        
      
        
          
  /**
 * The availability of the specimen.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Where the specimen came from. This may be from patient(s), from a location
 * (e.g., the source of an environmental sample), or a sampling of a substance or a
 * device.
 */
  subject?: Reference | undefined;
  _subject?: Element | undefined;

        
      
        
          
  /**
 * The kind of material that forms the specimen.
 * The type can change the way that a specimen is handled and drives what kind of
 * analyses can properly be performed on the specimen. It is frequently used in
 * diagnostic work flow decision making systems.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  


  
    /**
 * SpecimenDefinition
 * 
 * A kind of specimen with associated set of requirements.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SpecimenDefinition.html}
 */
    export interface SpecimenDefinition extends DomainResource {
      
      readonly resourceType: "SpecimenDefinition";
      

      
        
          
  /**
 * The action to be performed for collecting the specimen.
 */
  collection?: Array<CodeableConcept> | undefined;
  _collection?: Element[] | undefined;

        
      
        
          
  /**
 * A business identifier associated with the kind of specimen.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * Preparation of the patient for specimen collection.
 */
  patientPreparation?: Array<CodeableConcept> | undefined;
  _patientPreparation?: Element[] | undefined;

        
      
        
          
  /**
 * Time aspect of specimen collection (duration or offset).
 */
  timeAspect?: string | undefined;
  _timeAspect?: Element | undefined;

        
      
        
          
  /**
 * The kind of material to be collected.
 */
  typeCollected?: CodeableConcept | undefined;
  _typeCollected?: Element | undefined;

        
      
        
          
  /**
 * Specimen conditioned in a container as expected by the testing laboratory.
 */
  typeTested?: Array<BackboneElement> | undefined;
  _typeTested?: Element[] | undefined;

        
      
        
          
  /**
 * The specimen's container.
 */
  container?: BackboneElement | undefined;
  _container?: Element | undefined;

        
      
        
          
  /**
 * Substance introduced in the kind of container to preserve, maintain or enhance
 * the specimen. Examples: Formalin, Citrate, EDTA.
 */
  additive?: Array<BackboneElement> | undefined;
  _additive?: Element[] | undefined;

        
      
        
          
            
  /**
 * Substance introduced in the kind of container to preserve, maintain or enhance
 * the specimen. Examples: Formalin, Citrate, EDTA.
 */
  additiveCodeableConcept?: CodeableConcept | undefined;
  _additiveCodeableConcept?: Element | undefined;

          
            
  /**
 * Substance introduced in the kind of container to preserve, maintain or enhance
 * the specimen. Examples: Formalin, Citrate, EDTA.
 */
  additiveReference?: Reference | undefined;
  _additiveReference?: Element | undefined;

          
        
      
        
          
  /**
 * Color of container cap.
 */
  cap?: CodeableConcept | undefined;
  _cap?: Element | undefined;

        
      
        
          
  /**
 * The capacity (volume or other measure) of this kind of container.
 */
  capacity?: Quantity | undefined;
  _capacity?: Element | undefined;

        
      
        
          
  /**
 * The textual description of the kind of container.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The type of material of the container.
 */
  material?: CodeableConcept | undefined;
  _material?: Element | undefined;

        
      
        
          
            
  /**
 * The minimum volume to be conditioned in the container.
 */
  minimumVolumeQuantity?: Quantity | undefined;
  _minimumVolumeQuantity?: Element | undefined;

          
            
  /**
 * The minimum volume to be conditioned in the container.
 */
  minimumVolumeString?: string | undefined;
  _minimumVolumeString?: Element | undefined;

          
        
      
        
          
  /**
 * Special processing that should be applied to the container for this kind of
 * specimen.
 */
  preparation?: string | undefined;
  _preparation?: Element | undefined;

        
      
        
          
  /**
 * The type of container used to contain this kind of specimen.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Set of instructions for preservation/transport of the specimen at a defined
 * temperature interval, prior the testing process.
 */
  handling?: Array<BackboneElement> | undefined;
  _handling?: Element[] | undefined;

        
      
        
          
  /**
 * Additional textual instructions for the preservation or transport of the
 * specimen. For instance, 'Protect from light exposure'.
 */
  instruction?: string | undefined;
  _instruction?: Element | undefined;

        
      
        
          
  /**
 * The maximum time interval of preservation of the specimen with these conditions.
 */
  maxDuration?: Duration | undefined;
  _maxDuration?: Element | undefined;

        
      
        
          
  /**
 * It qualifies the interval of temperature, which characterizes an occurrence of
 * handling. Conditions that are not related to temperature may be handled in the
 * instruction element.
 */
  temperatureQualifier?: CodeableConcept | undefined;
  _temperatureQualifier?: Element | undefined;

        
      
        
          
  /**
 * The temperature interval for this set of handling instructions.
 */
  temperatureRange?: Range | undefined;
  _temperatureRange?: Element | undefined;

        
      
        
          
  /**
 * Primary of secondary specimen.
 */
  isDerived?: boolean | undefined;
  _isDerived?: Element | undefined;

        
      
        
          
  /**
 * The preference for this type of conditioned specimen.
 */
  preference: string;
  _preference?: Element | undefined;

        
      
        
          
  /**
 * Criterion for rejection of the specimen in its container by the laboratory.
 */
  rejectionCriterion?: Array<CodeableConcept> | undefined;
  _rejectionCriterion?: Element[] | undefined;

        
      
        
          
  /**
 * Requirements for delivery and special handling of this kind of conditioned
 * specimen.
 */
  requirement?: string | undefined;
  _requirement?: Element | undefined;

        
      
        
          
  /**
 * The usual time that a specimen of this kind is retained after the ordered tests
 * are completed, for the purpose of additional testing.
 */
  retentionTime?: Duration | undefined;
  _retentionTime?: Element | undefined;

        
      
        
          
  /**
 * The kind of specimen conditioned for testing expected by lab.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  
    /**
 * StructureDefinition
 * 
 * A definition of a FHIR structure. This resource is used to describe the
 * underlying resources, data types defined in FHIR, and also for describing
 * extensions and constraints on resources and data types.
 * 
 * @see {@link http://hl7.org/fhir/R4B/StructureDefinition.html}
 */
    export interface StructureDefinition extends DomainResource {
      
      readonly resourceType: "StructureDefinition";
      

      
        
          
  /**
 * Whether structure this definition describes is abstract or not  - that is,
 * whether the structure is not intended to be instantiated. For Resources and Data
 * types, abstract types will never be exchanged  between systems.
 * Abstract Resources cannot be instantiated - a concrete sub-type must be used.
 * Abstract datatypes and extensions cannot be used in an instance. For logical
 * models, the exact implication of "abstract" will rest with the author, depending
 * how the logical model is used. Flagging a constraint structure as abstract
 * conveys design intent but makes no difference to how the structure definition is
 * handled. Note that inline declared elements that are given the type "Element" in
 * the StructureDefinition, but have children described, are anonymous concrete
 * types that specialize Element.
 */
  abstract: boolean;
  _abstract?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is the base structure from which this type is derived,
 * either by specialization or constraint.
 * If differential constraints are specified in this structure, they are applied to
 * the base in a "differential" fashion. If there is no base, then the differential
 * constraints cannot be provided (snapshot only). Differential structures are
 * useful for the editing perspective, and snapshot structures are suitable for
 * operational use. The FHIR Project provides a number of tools/services to
 * populate snapshots from differential constraints. Logical Models have a base of
 * "Element" or another logical model.
 */
  baseDefinition?: string | undefined;
  _baseDefinition?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * Identifies the types of resource or data type elements to which the extension
 * can be applied.
 */
  context?: Array<BackboneElement> | undefined;
  _context?: Element[] | undefined;

        
      
        
          
  /**
 * An expression that defines where an extension can be used in resources.
 */
  expression: string;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * Defines how to interpret the expression that defines what the context of the
 * extension is.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A set of rules as FHIRPath Invariants about when the extension can be used (e.g.
 * co-occurrence variants for the extension). All the rules must be true.
 * The rules are only evaluated when the extension is present. When evaluating the
 * invariant, the FHIRPath focus is the element that holds the extension, and
 * %extension refers to the extension itself.
 */
  contextInvariant?: Array<string> | undefined;
  _contextInvariant?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the structure definition and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the structure definition.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the structure definition was published. The
 * date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the structure definition changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the structure definition.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * How the type relates to the baseDefinition.
 * If the definition is a specialization, then it adds new elements in the
 * differential, and the snapshot includes the inherited elements.  If the
 * definition is a constraint, then it cannot define new elements, it can only make
 * new rules about existing content (see [Profiling
 * Resources](profiling.html#resources)).
 */
  derivation?: string | undefined;
  _derivation?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the structure definition from a
 * consumer's perspective.
 * This description can be used to capture details such as why the structure
 * definition was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the structure definition as conveyed in the 'text' field of
 * the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the structure definition is
 * presumed to be the predominant language in the place the structure definition
 * was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A differential view is expressed relative to the base StructureDefinition - a
 * statement of differences that it applies.
 */
  differential?: BackboneElement | undefined;
  _differential?: Element | undefined;

        
      
        
          
  /**
 * Captures constraints on each element within the resource.
 */
  element: Array<ElementDefinition>;
  _element?: Element[] | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this structure definition is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of structure definitions that are appropriate for use versus
 * not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * The version of the FHIR specification on which this StructureDefinition is based
 * - this is the formal version of the specification, without the revision number,
 * e.g. [publication].[major].[minor], which is 4.3.0 for this version.
 * A StructureDefinition does not need to specify the target it applies to as
 * StructureDefinitions will often be valid across multiple versions of FHIR. FHIR
 * tooling can determine whether a StructureDefinition is consistent with a
 * particular StructureDefinition if desired.
 */
  fhirVersion?: string | undefined;
  _fhirVersion?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this structure definition when it
 * is represented in other formats, or referenced in a specification, model, design
 * or an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this structure definition outside
 * of FHIR, where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the structure definition is intended to be
 * used.
 * It may be possible for the structure definition to be used in jurisdictions
 * other than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A set of key words or terms from external terminologies that may be used to
 * assist with indexing and searching of templates nby describing the use of this
 * structure definition, or the content it describes.
 */
  keyword?: Array<Coding> | undefined;
  _keyword?: Element[] | undefined;

        
      
        
          
  /**
 * Defines the kind of structure that this definition is describing.
 */
  kind: string;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * An external specification that the content is mapped to.
 */
  mapping?: Array<BackboneElement> | undefined;
  _mapping?: Element[] | undefined;

        
      
        
          
  /**
 * Comments about this mapping, including version notes, issues, scope limitations,
 * and other important notes for usage.
 */
  comment?: string | undefined;
  _comment?: Element | undefined;

        
      
        
          
  /**
 * An Internal id that is used to identify this mapping set when specific mappings
 * are made.
 * The specification is described once, with general comments, and then specific
 * mappings are made that reference this declaration.
 */
  identity: id;
  _identity?: Element | undefined;

        
      
        
          
  /**
 * A name for the specification that is being mapped to.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that identifies the specification that this mapping is expressed
 * to.
 * A formal identity for the specification being mapped to helps with identifying
 * maps consistently.
 */
  uri?: string | undefined;
  _uri?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the structure definition. This name should
 * be usable as an identifier for the module by machine processing applications
 * such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.Some
 * Examples: 

* O2SatObservation
* PresentationReport
* Immunization2
*
 * AcmeAdmissionRecordOld.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the structure
 * definition.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the structure definition is the organization or individual primarily responsible
 * for the maintenance and upkeep of the structure definition. This is not
 * necessarily the same individual or organization that developed and initially
 * authored the content. The publisher is the primary point of contact for
 * questions or issues with the structure definition. This item SHOULD be populated
 * unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this structure definition is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the structure definition. Instead,
 * it provides traceability of ''why'' the resource is either needed or ''why'' it
 * is defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this structure definition.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * A snapshot view is expressed in a standalone form that can be used and
 * interpreted without considering the base StructureDefinition.
 */
  snapshot?: BackboneElement | undefined;
  _snapshot?: Element | undefined;

        
      
        
          
  /**
 * Captures constraints on each element within the resource.
 */
  element: Array<ElementDefinition>;
  _element?: Element[] | undefined;

        
      
        
          
  /**
 * The status of this structure definition. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of structure definitions that are appropriate for use versus
 * not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the structure definition.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.Applications don't have to use this name but can
 * always fall back to it. The title also corresponds to the label for the root
 * element.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * The type this structure describes. If the derivation kind is 'specialization'
 * then this is the master definition for a type, and there is always one of these
 * (a data type, an extension, a resource, including abstract ones). Otherwise the
 * structure definition is a constraint on the stated type (and in this case, the
 * type cannot be an abstract type).  References are URLs that are relative to
 * http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to
 * http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed
 * in logical models.
 * Note that in the case of constraints, the type could be determined by chasing
 * through the baseDefinition references until a concrete structure (derivation =
 * specialization) is reached, or by looking at the path of the first element in
 * the snapshot - if present - but providing the type directly makes for simpler
 * tooling and indexing. 

The type must match the elements defined in the
 * differential and the snapshot. For all FHIR defined types, the path name of the
 * element will start with the type name. For logical models, where the type is a
 * URL, the type name SHOULD start with the tail of the type URL where required.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this structure definition when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this structure definition
 * is (or will be) published. This URL can be the target of a canonical reference.
 * It SHALL remain the same when the structure definition is stored on different
 * servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate structure
 * definition instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the structure definition
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the structure definition author and is not expected
 * to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different structure definition instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the structure
 * definition with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * StructureMap
 * 
 * A Map of relationships between 2 structures that can be used to transform data.
 * 
 * @see {@link http://hl7.org/fhir/R4B/StructureMap.html}
 */
    export interface StructureMap extends DomainResource {
      
      readonly resourceType: "StructureMap";
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the structure map and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the structure map.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the structure map was published. The date
 * must change when the business version changes and it must change if the status
 * code changes. In addition, it should change when the substantive content of the
 * structure map changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the structure map. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the structure map from a consumer's
 * perspective.
 * This description can be used to capture details such as why the structure map
 * was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the structure map as conveyed in the 'text' field of the
 * resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the structure map is presumed to be
 * the predominant language in the place the structure map was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this structure map is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of structure maps that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * Organizes the mapping into manageable chunks for human review/ease of
 * maintenance.
 */
  group: Array<BackboneElement>;
  _group?: Element[] | undefined;

        
      
        
          
  /**
 * Additional supporting documentation that explains the purpose of the group and
 * the types of mappings within it.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Another group that this group adds rules to.
 */
  extends?: id | undefined;
  _extends?: Element | undefined;

        
      
        
          
  /**
 * A name assigned to an instance of data. The instance must be provided when the
 * mapping is invoked.
 * If no inputs are named, then the entry mappings are type based.
 */
  input: Array<BackboneElement>;
  _input?: Element[] | undefined;

        
      
        
          
  /**
 * Documentation for this instance of data.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Mode for this instance of data.
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * Name for this instance of data.
 */
  name: id;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Type for this instance of data.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * A unique name for the group for the convenience of human readers.
 */
  name: id;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Transform Rule from source to target.
 */
  rule: Array<BackboneElement>;
  _rule?: Element[] | undefined;

        
      
        
          
  /**
 * Which other rules to apply in the context of this rule.
 */
  dependent?: Array<BackboneElement> | undefined;
  _dependent?: Element[] | undefined;

        
      
        
          
  /**
 * Name of a rule or group to apply.
 */
  name: id;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Variable to pass to the rule or group.
 */
  variable: Array<string>;
  _variable?: Element[] | undefined;

        
      
        
          
  /**
 * Documentation for this instance of data.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Name of the rule for internal references.
 */
  name: id;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Rules contained in this rule.
 */
  rule?: Array<undefined> | undefined;
  _rule?: Element[] | undefined;

        
      
        
          
  /**
 * Source inputs to the mapping.
 */
  source: Array<BackboneElement>;
  _source?: Element[] | undefined;

        
      
        
          
  /**
 * FHIRPath expression  - must be true or the mapping engine throws an error
 * instead of completing.
 */
  check?: string | undefined;
  _check?: Element | undefined;

        
      
        
          
  /**
 * FHIRPath expression  - must be true or the rule does not apply.
 */
  condition?: string | undefined;
  _condition?: Element | undefined;

        
      
        
          
  /**
 * Type or variable this rule applies to.
 */
  context: id;
  _context?: Element | undefined;

        
      
        
          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueBase64Binary?: string | undefined;
  _defaultValueBase64Binary?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueBoolean?: boolean | undefined;
  _defaultValueBoolean?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueCanonical?: string | undefined;
  _defaultValueCanonical?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueCode?: string | undefined;
  _defaultValueCode?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueDate?: string | undefined;
  _defaultValueDate?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueDateTime?: string | undefined;
  _defaultValueDateTime?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueDecimal?: number | undefined;
  _defaultValueDecimal?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueId?: id | undefined;
  _defaultValueId?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueInstant?: string | undefined;
  _defaultValueInstant?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueInteger?: number | undefined;
  _defaultValueInteger?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueMarkdown?: string | undefined;
  _defaultValueMarkdown?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueOid?: oid | undefined;
  _defaultValueOid?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValuePositiveInt?: number | undefined;
  _defaultValuePositiveInt?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueString?: string | undefined;
  _defaultValueString?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueTime?: time | undefined;
  _defaultValueTime?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueUnsignedInt?: unsignedInt | undefined;
  _defaultValueUnsignedInt?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueUri?: string | undefined;
  _defaultValueUri?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueUrl?: string | undefined;
  _defaultValueUrl?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueUuid?: uuid | undefined;
  _defaultValueUuid?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueAddress?: Address | undefined;
  _defaultValueAddress?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueAge?: Age | undefined;
  _defaultValueAge?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueAnnotation?: Annotation | undefined;
  _defaultValueAnnotation?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueAttachment?: Attachment | undefined;
  _defaultValueAttachment?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueCodeableConcept?: CodeableConcept | undefined;
  _defaultValueCodeableConcept?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueCoding?: Coding | undefined;
  _defaultValueCoding?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueContactPoint?: ContactPoint | undefined;
  _defaultValueContactPoint?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueCount?: Count | undefined;
  _defaultValueCount?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueDistance?: Distance | undefined;
  _defaultValueDistance?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueDuration?: Duration | undefined;
  _defaultValueDuration?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueHumanName?: HumanName | undefined;
  _defaultValueHumanName?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueIdentifier?: Identifier | undefined;
  _defaultValueIdentifier?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueMoney?: Money | undefined;
  _defaultValueMoney?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValuePeriod?: Period | undefined;
  _defaultValuePeriod?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueQuantity?: Quantity | undefined;
  _defaultValueQuantity?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueRange?: Range | undefined;
  _defaultValueRange?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueRatio?: Ratio | undefined;
  _defaultValueRatio?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueReference?: Reference | undefined;
  _defaultValueReference?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueSampledData?: SampledData | undefined;
  _defaultValueSampledData?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueSignature?: Signature | undefined;
  _defaultValueSignature?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueTiming?: Timing | undefined;
  _defaultValueTiming?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueContactDetail?: ContactDetail | undefined;
  _defaultValueContactDetail?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueContributor?: Contributor | undefined;
  _defaultValueContributor?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueDataRequirement?: DataRequirement | undefined;
  _defaultValueDataRequirement?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueExpression?: Expression | undefined;
  _defaultValueExpression?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueParameterDefinition?: ParameterDefinition | undefined;
  _defaultValueParameterDefinition?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueRelatedArtifact?: RelatedArtifact | undefined;
  _defaultValueRelatedArtifact?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueTriggerDefinition?: TriggerDefinition | undefined;
  _defaultValueTriggerDefinition?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueUsageContext?: UsageContext | undefined;
  _defaultValueUsageContext?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueDosage?: Dosage | undefined;
  _defaultValueDosage?: Element | undefined;

          
            
  /**
 * A value to use if there is no existing value in the source object.
 * If there's a default value on an item that can repeat, it will only be used
 * once.
 */
  defaultValueMeta?: Meta | undefined;
  _defaultValueMeta?: Element | undefined;

          
        
      
        
          
  /**
 * Optional field for this source.
 */
  element?: string | undefined;
  _element?: Element | undefined;

        
      
        
          
  /**
 * How to handle the list mode for this element.
 */
  listMode?: string | undefined;
  _listMode?: Element | undefined;

        
      
        
          
  /**
 * A FHIRPath expression which specifies a message to put in the transform log when
 * content matching the source rule is found.
 * This is typically used for recording that something Is not transformed to the
 * target for some reason.
 */
  logMessage?: string | undefined;
  _logMessage?: Element | undefined;

        
      
        
          
  /**
 * Specified maximum cardinality for the element - a number or a "*". This is
 * optional; if present, it acts an implicit check on the input content (* just
 * serves as documentation; it's the default value).
 */
  max?: string | undefined;
  _max?: Element | undefined;

        
      
        
          
  /**
 * Specified minimum cardinality for the element. This is optional; if present, it
 * acts an implicit check on the input content.
 */
  min?: number | undefined;
  _min?: Element | undefined;

        
      
        
          
  /**
 * Specified type for the element. This works as a condition on the mapping - use
 * for polymorphic elements.
 */
  type?: string | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Named context for field, if a field is specified.
 */
  variable?: id | undefined;
  _variable?: Element | undefined;

        
      
        
          
  /**
 * Content to create because of this mapping rule.
 */
  target?: Array<BackboneElement> | undefined;
  _target?: Element[] | undefined;

        
      
        
          
  /**
 * Type or variable this rule applies to.
 */
  context?: id | undefined;
  _context?: Element | undefined;

        
      
        
          
  /**
 * How to interpret the context.
 */
  contextType?: string | undefined;
  _contextType?: Element | undefined;

        
      
        
          
  /**
 * Field to create in the context.
 */
  element?: string | undefined;
  _element?: Element | undefined;

        
      
        
          
  /**
 * If field is a list, how to manage the list.
 */
  listMode?: Array<string> | undefined;
  _listMode?: Element[] | undefined;

        
      
        
          
  /**
 * Internal rule reference for shared list items.
 */
  listRuleId?: id | undefined;
  _listRuleId?: Element | undefined;

        
      
        
          
  /**
 * Parameters to the transform.
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
            
  /**
 * Parameter value - variable or literal.
 */
  valueId?: id | undefined;
  _valueId?: Element | undefined;

          
            
  /**
 * Parameter value - variable or literal.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * Parameter value - variable or literal.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * Parameter value - variable or literal.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * Parameter value - variable or literal.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
        
      
        
          
  /**
 * How the data is copied / created.
 */
  transform?: string | undefined;
  _transform?: Element | undefined;

        
      
        
          
  /**
 * Named context for field, if desired, and a field is specified.
 */
  variable?: id | undefined;
  _variable?: Element | undefined;

        
      
        
          
  /**
 * If this is the default rule set to apply for the source type or this combination
 * of types.
 * Not applicable if the underlying model is untyped. There can only be one default
 * mapping for any particular type combination.
 */
  typeMode: string;
  _typeMode?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this structure map when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this structure map outside of FHIR,
 * where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Other maps used by this map (canonical URLs).
 */
  import?: Array<string> | undefined;
  _import?: Element[] | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the structure map is intended to be used.
 * It may be possible for the structure map to be used in jurisdictions other than
 * those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the structure map. This name should be
 * usable as an identifier for the module by machine processing applications such
 * as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the structure map.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the structure map is the organization or individual primarily responsible for
 * the maintenance and upkeep of the structure map. This is not necessarily the
 * same individual or organization that developed and initially authored the
 * content. The publisher is the primary point of contact for questions or issues
 * with the structure map. This item SHOULD be populated unless the information is
 * available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this structure map is needed and why it has been designed as
 * it has.
 * This element does not describe the usage of the structure map. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this structure map.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The status of this structure map. Enables tracking the life-cycle of the
 * content.
 * Allows filtering of structure maps that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A structure definition used by this map. The structure definition may describe
 * instances that are converted, or the instances that are produced.
 * It is not necessary for a structure map to identify any dependent structures,
 * though not listing them may restrict its usefulness.
 */
  structure?: Array<BackboneElement> | undefined;
  _structure?: Element[] | undefined;

        
      
        
          
  /**
 * The name used for this type in the map.
 * This is needed if both types have the same name (e.g. version conversion).
 */
  alias?: string | undefined;
  _alias?: Element | undefined;

        
      
        
          
  /**
 * Documentation that describes how the structure is used in the mapping.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * How the referenced structure is used in this mapping.
 */
  mode: string;
  _mode?: Element | undefined;

        
      
        
          
  /**
 * The canonical reference to the structure.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the structure map.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this structure map when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this structure map is (or
 * will be) published. This URL can be the target of a canonical reference. It
 * SHALL remain the same when the structure map is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate structure map
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the structure map when
 * it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the structure map author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different structure map instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the structure map with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * Subscription
 * 
 * The subscription resource is used to define a push-based subscription from a
 * server to another system. Once a subscription is registered with the server, the
 * server checks every resource that is created or updated, and if the resource
 * matches the given criteria, it sends a message on the defined "channel" so that
 * another system can take an appropriate action.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Subscription.html}
 */
    export interface Subscription extends DomainResource {
      
      readonly resourceType: "Subscription";
      

      
        
          
  /**
 * Details where to send notifications when resources are received that meet the
 * criteria.
 */
  channel: BackboneElement;
  _channel?: Element | undefined;

        
      
        
          
  /**
 * The url that describes the actual end-point to send messages to.
 * For rest-hook, and websocket, the end-point must be an http: or https: URL; for
 * email, a mailto: url, for sms, a tel: url, and for message the endpoint can be
 * in any form of url the server understands (usually, http: or mllp:). The URI is
 * allowed to be relative; in which case, it is relative to the server end-point
 * (since there may be more than one, clients should avoid using relative URIs).
 */
  endpoint?: string | undefined;
  _endpoint?: Element | undefined;

        
      
        
          
  /**
 * Additional headers / information to send as part of the notification.
 * Exactly what these mean depend on the channel type. They can convey additional
 * information to the recipient and/or meet security requirements; for example,
 * support of multiple headers in the outgoing notifications for rest-hook type
 * subscriptions.
 */
  header?: Array<string> | undefined;
  _header?: Element[] | undefined;

        
      
        
          
  /**
 * The mime type to send the payload in - either application/fhir+xml, or
 * application/fhir+json. If the payload is not present, then there is no payload
 * in the notification, just a notification. The mime type "text/plain" may also be
 * used for Email and SMS subscriptions.
 * Sending the payload has obvious security implications. The server is responsible
 * for ensuring that the content is appropriately secured.
 */
  payload?: string | undefined;
  _payload?: Element | undefined;

        
      
        
          
  /**
 * The type of channel to send notifications on.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Contact details for a human to contact about the subscription. The primary use
 * of this for system administrator troubleshooting.
 */
  contact?: Array<ContactPoint> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * The rules that the server should use to determine when to generate notifications
 * for this subscription.
 * The rules are search criteria (without the [base] part). Like
 * Bundle.entry.request.url, it has no leading "/".
 */
  criteria: string;
  _criteria?: Element | undefined;

        
      
        
          
  /**
 * The time for the server to turn the subscription off.
 * The server is permitted to deviate from this time but should observe it.
 */
  end?: string | undefined;
  _end?: Element | undefined;

        
      
        
          
  /**
 * A record of the last error that occurred when the server processed a
 * notification.
 */
  error?: string | undefined;
  _error?: Element | undefined;

        
      
        
          
  /**
 * A description of why this subscription is defined.
 */
  reason: string;
  _reason?: Element | undefined;

        
      
        
          
  /**
 * The status of the subscription, which marks the server state for managing the
 * subscription.
 * A client can only submit subscription resources in the requested or off state.
 * Only the server can  move a subscription from requested to active, and then to
 * error. Either the server or the client can turn a subscription off.

This
 * element is labeled as a modifier because the status contains codes that mark the
 * resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  
    /**
 * SubscriptionStatus
 * 
 * The SubscriptionStatus resource describes the state of a Subscription during
 * notifications.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SubscriptionStatus.html}
 */
    export interface SubscriptionStatus extends DomainResource {
      
      readonly resourceType: "SubscriptionStatus";
      

      
        
          
  /**
 * A record of errors that occurred when the server processed a notification.
 * Recommended practice: clear errors when status is updated.
 */
  error?: Array<CodeableConcept> | undefined;
  _error?: Element[] | undefined;

        
      
        
          
  /**
 * The total number of actual events which have been generated since the
 * Subscription was created (inclusive of this notification) - regardless of how
 * many have been successfully communicated.  This number is NOT incremented for
 * handshake and heartbeat notifications.
 */
  eventsSinceSubscriptionStart?: string | undefined;
  _eventsSinceSubscriptionStart?: Element | undefined;

        
      
        
          
  /**
 * Detailed information about events relevant to this subscription notification.
 */
  notificationEvent?: Array<BackboneElement> | undefined;
  _notificationEvent?: Element[] | undefined;

        
      
        
          
  /**
 * Additional context information for this event. Generally, this will contain
 * references to additional resources included with the event (e.g., the Patient
 * relevant to an Encounter), however it MAY refer to non-FHIR objects.
 */
  additionalContext?: Array<Reference> | undefined;
  _additionalContext?: Element[] | undefined;

        
      
        
          
  /**
 * The sequential number of this event in this subscription context. Note that this
 * value is a 64-bit integer value, encoded as a string.
 */
  eventNumber: string;
  _eventNumber?: Element | undefined;

        
      
        
          
  /**
 * The focus of this event. While this will usually be a reference to the focus
 * resource of the event, it MAY contain a reference to a non-FHIR object.
 */
  focus?: Reference | undefined;
  _focus?: Element | undefined;

        
      
        
          
  /**
 * The actual time this event occured on the server.
 */
  timestamp?: string | undefined;
  _timestamp?: Element | undefined;

        
      
        
          
  /**
 * The status of the subscription, which marks the server state for managing the
 * subscription.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The reference to the Subscription which generated this notification.
 */
  subscription: Reference;
  _subscription?: Element | undefined;

        
      
        
          
  /**
 * The reference to the SubscriptionTopic for the Subscription which generated this
 * notification.
 * This value SHOULD NOT be present when using `empty` payloads, MAY be present
 * when using `id-only` payloads, and SHOULD be present when using `full-resource`
 * payloads.
 */
  topic?: string | undefined;
  _topic?: Element | undefined;

        
      
        
          
  /**
 * The type of event being conveyed with this notificaiton.
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * SubscriptionTopic
 * 
 * Describes a stream of resource state changes identified by trigger criteria and
 * annotated with labels useful to filter projections from this topic.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SubscriptionTopic.html}
 */
    export interface SubscriptionTopic extends DomainResource {
      
      readonly resourceType: "SubscriptionTopic";
      

      
        
          
  /**
 * The date on which the asset content was approved by the publisher. Approval
 * happens once when the content is officially approved for usage.
 * The date may be more recent than the approval date because of minor changes /
 * editorial corrections.
 */
  approvalDate?: string | undefined;
  _approvalDate?: Element | undefined;

        
      
        
          
  /**
 * List of properties by which Subscriptions on the SubscriptionTopic can be
 * filtered. May be defined Search Parameters (e.g., Encounter.patient) or
 * parameters defined within this SubscriptionTopic context (e.g., hub.event).
 */
  canFilterBy?: Array<BackboneElement> | undefined;
  _canFilterBy?: Element[] | undefined;

        
      
        
          
  /**
 * Description of how this filtering parameter is intended to be used.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Either the canonical URL to a search parameter (like
 * "http://hl7.org/fhir/SearchParameter/encounter-patient") or the
 * officially-defined URI for a shared filter concept (like
 * "http://example.org/concepts/shared-common-event").
 * Chained parameters are allowed (like "patient.gender") - but can not use colons
 * or modifiers.
 */
  filterDefinition?: string | undefined;
  _filterDefinition?: Element | undefined;

        
      
        
          
  /**
 * Either the canonical URL to a search parameter (like
 * "http://hl7.org/fhir/SearchParameter/encounter-patient") or topic-defined
 * parameter (like "hub.event") which is a label for the filter.
 * Chained parameters are allowed (like "patient.gender") - but can not use colons
 * or modifiers.
 */
  filterParameter: string;
  _filterParameter?: Element | undefined;

        
      
        
          
  /**
 * Allowable operators to apply when determining matches (Search Modifiers).  If
 * the filterParameter is a SearchParameter, this list of modifiers SHALL be a
 * strict subset of the modifiers defined on that SearchParameter.
 */
  modifier?: Array<string> | undefined;
  _modifier?: Element[] | undefined;

        
      
        
          
  /**
 * URL of the Resource that is the type used in this filter. This is the "focus" of
 * the topic (or one of them if there are more than one). It will be the same, a
 * generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or
 * SubscriptionTopic.eventTrigger.resource when they are present.
 * URL of the Resource that is the type used in this filter. Relative URLs are
 * relative to the StructureDefinition root of the implemented FHIR version (e.g.,
 * http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to
 * http://hl7.org/fhir/StructureDefinition/Patient. For more information, see <a
 * href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDef
 * inition.type.code</a>.
 */
  resource?: string | undefined;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the SubscriptionTopic and/or its contents.
 * Copyright statements are generally legal restrictions on the use and publishing
 * of the SubscriptionTopic.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * For draft definitions, indicates the date of initial creation.  For active
 * definitions, represents the date of activation.  For withdrawn definitions,
 * indicates the date of withdrawal.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * The canonical URL pointing to another FHIR-defined SubscriptionTopic that is
 * adhered to in whole or in part by this SubscriptionTopic.
 */
  derivedFrom?: Array<string> | undefined;
  _derivedFrom?: Element[] | undefined;

        
      
        
          
  /**
 * A free text natural language description of the Topic from the consumer's
 * perspective.
 * This description can be used to capture details such as why the Topic was built,
 * comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the module as conveyed in the text field of the resource itself. This item
 * SHOULD be populated unless the information is available from context.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The period during which the SubscriptionTopic content was or is planned to be
 * effective.
 * The effective period for a SubscriptionTopic  determines when the content is
 * applicable for usage and is independent of publication and review dates. For
 * example, a measure intended to be used for the year 2016 would be published in
 * 2015.
 */
  effectivePeriod?: Period | undefined;
  _effectivePeriod?: Element | undefined;

        
      
        
          
  /**
 * Event definition which can be used to trigger the SubscriptionTopic.
 */
  eventTrigger?: Array<BackboneElement> | undefined;
  _eventTrigger?: Element[] | undefined;

        
      
        
          
  /**
 * The human readable description of an event to trigger a notification for the
 * SubscriptionTopic - for example, "Patient Admission, as defined in HL7v2 via
 * message ADT^A01". Multiple values are considered OR joined (e.g., matching any
 * single event listed).
 * Implementation of particular subscription topics might not use a computable
 * definition and instead base their design on the definition.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A well-defined event which can be used to trigger notifications from the
 * SubscriptionTopic.
 */
  event: CodeableConcept;
  _event?: Element | undefined;

        
      
        
          
  /**
 * URL of the Resource that is the focus type used in this event trigger.  Relative
 * URLs are relative to the StructureDefinition root of the implemented FHIR
 * version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient"
 * maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information,
 * see <a
 * href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDef
 * inition.type.code</a>.
 */
  resource: string;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * A flag to indicate that this TopSubscriptionTopicic is authored for testing
 * purposes (or education/evaluation/marketing), and is not intended to be used for
 * genuine usage.
 * Allows filtering of SubscriptionTopic that are appropriate for use vs. not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this subscription topic by the performer and/or
 * other systems.  These identifiers remain constant as the resource is updated and
 * propagates from server to server.
 * Note: This is a business identifier, not a resource identifier (see
 * [discussion](resource.html#identifiers)).  It is best practice for the
 * identifier to only appear on a single resource instance, however business
 * practices may occasionally dictate that multiple resource instances with the
 * same identifier can exist - possibly even with different resource types.  For
 * example, multiple Patient and a Person resource instance might share the same
 * social insurance number.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A jurisdiction in which the Topic is intended to be used.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The date on which the asset content was last reviewed. Review happens
 * periodically after that, but doesn't change the original approval date.
 * If specified, this is usually after the approval date.
 */
  lastReviewDate?: string | undefined;
  _lastReviewDate?: Element | undefined;

        
      
        
          
  /**
 * List of properties to describe the shape (e.g., resources) included in
 * notifications from this Subscription Topic.
 */
  notificationShape?: Array<BackboneElement> | undefined;
  _notificationShape?: Element[] | undefined;

        
      
        
          
  /**
 * Search-style _include directives, rooted in the resource for this shape. Servers
 * SHOULD include resources listed here, if they exist and the user is authorized
 * to receive them.  Clients SHOULD be prepared to receive these additional
 * resources, but SHALL function properly without them.
 */
  include?: Array<string> | undefined;
  _include?: Element[] | undefined;

        
      
        
          
  /**
 * URL of the Resource that is the type used in this shape. This is the "focus" of
 * the topic (or one of them if there are more than one) and the root resource for
 * this shape definition. It will be the same, a generality, or a specificity of
 * SubscriptionTopic.resourceTrigger.resource or
 * SubscriptionTopic.eventTrigger.resource when they are present.
 * URL of the Resource that is the type used in this shape. Relative URLs are
 * relative to the StructureDefinition root of the implemented FHIR version (e.g.,
 * http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to
 * http://hl7.org/fhir/StructureDefinition/Patient. For more information, see <a
 * href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDef
 * inition.type.code</a>.
 */
  resource: string;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * Search-style _revinclude directives, rooted in the resource for this shape.
 * Servers SHOULD include resources listed here, if they exist and the user is
 * authorized to receive them.  Clients SHOULD be prepared to receive these
 * additional resources, but SHALL function properly without them.
 */
  revInclude?: Array<string> | undefined;
  _revInclude?: Element[] | undefined;

        
      
        
          
  /**
 * Helps establish the "authority/credibility" of the SubscriptionTopic.  May also
 * allow for contact.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explains why this Topic is needed and why it has been designed as it has.
 * This element does not describe the usage of the Topic.  Rather it is for
 * traceability of ''why'' the resource is either needed or ''why'' it is defined
 * as it is.  This may be used to point to source materials or specifications that
 * drove the structure of this Topic.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * A definition of a resource-based event that triggers a notification based on the
 * SubscriptionTopic. The criteria may be just a human readable description and/or
 * a full FHIR search string or FHIRPath expression. Multiple triggers are
 * considered OR joined (e.g., a resource update matching ANY of the definitions
 * will trigger a notification).
 */
  resourceTrigger?: Array<BackboneElement> | undefined;
  _resourceTrigger?: Element[] | undefined;

        
      
        
          
  /**
 * The human readable description of this resource trigger for the
 * SubscriptionTopic -  for example, "An Encounter enters the 'in-progress' state".
 * Implementation of particular subscription topics might not use a computable
 * definition and instead base their design on the definition.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The FHIRPath based rules that the server should use to determine when to trigger
 * a notification for this topic.
 * FHIRPath expression with %previous and %current vars.
 */
  fhirPathCriteria?: string | undefined;
  _fhirPathCriteria?: Element | undefined;

        
      
        
          
  /**
 * The FHIR query based rules that the server should use to determine when to
 * trigger a notification for this subscription topic.
 */
  queryCriteria?: BackboneElement | undefined;
  _queryCriteria?: Element | undefined;

        
      
        
          
  /**
 * The FHIR query based rules are applied to the current resource state (e.g.,
 * state after an update).
 * The rules are search criteria (without the [base] part). Like
 * Bundle.entry.request.url, it has no leading "/".
 */
  current?: string | undefined;
  _current?: Element | undefined;

        
      
        
          
  /**
 * The FHIR query based rules are applied to the previous resource state (e.g.,
 * state before an update).
 * The rules are search criteria (without the [base] part). Like
 * Bundle.entry.request.url, it has no leading "/".
 */
  previous?: string | undefined;
  _previous?: Element | undefined;

        
      
        
          
  /**
 * If set to true, both current and previous criteria must evaluate true to
 * trigger a notification for this topic.  Otherwise a notification for this topic
 * will be triggered if either one evaluates to true.
 */
  requireBoth?: boolean | undefined;
  _requireBoth?: Element | undefined;

        
      
        
          
  /**
 * For "create" interactions, should the "previous" criteria count as an automatic
 * pass or an automatic fail.
 */
  resultForCreate?: string | undefined;
  _resultForCreate?: Element | undefined;

        
      
        
          
  /**
 * For "delete" interactions, should the "current" criteria count as an automatic
 * pass or an automatic fail.
 */
  resultForDelete?: string | undefined;
  _resultForDelete?: Element | undefined;

        
      
        
          
  /**
 * URL of the Resource that is the type used in this resource trigger.  Relative
 * URLs are relative to the StructureDefinition root of the implemented FHIR
 * version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient"
 * maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information,
 * see <a
 * href="elementdefinition-definitions.html#ElementDefinition.type.code">ElementDef
 * inition.type.code</a>.
 */
  resource: string;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * The FHIR RESTful interaction which can be used to trigger a notification for the
 * SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or
 * UPDATE).
 */
  supportedInteraction?: Array<string> | undefined;
  _supportedInteraction?: Element[] | undefined;

        
      
        
          
  /**
 * The current state of the SubscriptionTopic.
 * A nominal state-transition diagram can be found in the
 * [[definition.html#statemachine | Definition pattern]] documentation

Unknown
 * does not represent "other" - one of the defined statuses must apply.  Unknown is
 * used when the authoring system is not sure what the current status is.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the SubscriptionTopic, for
 * example, "admission".
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this subscription topic when it is
 * referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this subscription topic
 * is (or will be) published. This URL can be the target of a canonical reference.
 * It SHALL remain the same when the subscription topic is stored on different
 * servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These terms may be used to assist with indexing and searching
 * of code system definitions.
 * When multiple usageContexts are specified, there is no expectation for whether
 * all or any of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the subscription topic
 * when it is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the Topic author and is not expected to be globally
 * unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed
 * version is not available. There is also no expectation that versions are
 * orderable.
 * There may be multiple different instances of a subscription topic that have the
 * same identifier but different versions.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  
    /**
 * Substance
 * 
 * A homogeneous material with a definite composition.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Substance.html}
 */
    export interface Substance extends DomainResource {
      
      readonly resourceType: "Substance";
      

      
        
          
  /**
 * A code that classifies the general type of substance.  This is used  for
 * searching, sorting and display purposes.
 * The level of granularity is defined by the category concepts in the value set.
 * More fine-grained filtering can be performed using the metadata and/or
 * terminology hierarchy in Substance.code.
 */
  category?: Array<CodeableConcept> | undefined;
  _category?: Element[] | undefined;

        
      
        
          
  /**
 * A code (or set of codes) that identify this substance.
 * This could be a reference to an externally defined code.  It could also be a
 * locally assigned code (e.g. a formulary),  optionally with translations to the
 * standard drug codes.
 */
  code: CodeableConcept;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A description of the substance - its appearance, handling requirements, and
 * other usage notes.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Unique identifier for the substance.
 * This identifier is associated with the kind of substance in contrast to the
 * Substance.instance.identifier which is associated with the package/container.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * A substance can be composed of other substances.
 */
  ingredient?: Array<BackboneElement> | undefined;
  _ingredient?: Element[] | undefined;

        
      
        
          
  /**
 * The amount of the ingredient in the substance - a concentration ratio.
 */
  quantity?: Ratio | undefined;
  _quantity?: Element | undefined;

        
      
        
          
            
  /**
 * Another substance that is a component of this substance.
 */
  substanceCodeableConcept?: CodeableConcept | undefined;
  _substanceCodeableConcept?: Element | undefined;

          
            
  /**
 * Another substance that is a component of this substance.
 */
  substanceReference?: Reference | undefined;
  _substanceReference?: Element | undefined;

          
        
      
        
          
  /**
 * Substance may be used to describe a kind of substance, or a specific
 * package/container of the substance: an instance.
 */
  instance?: Array<BackboneElement> | undefined;
  _instance?: Element[] | undefined;

        
      
        
          
  /**
 * When the substance is no longer valid to use. For some substances, a single
 * arbitrary date is used for expiry.
 */
  expiry?: string | undefined;
  _expiry?: Element | undefined;

        
      
        
          
  /**
 * Identifier associated with the package/container (usually a label affixed
 * directly).
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The amount of the substance.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * A code to indicate if the substance is actively used.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
    }

  


  
    /**
 * SubstanceDefinition
 * 
 * The detailed description of a substance, typically at a level beyond what is
 * used for prescribing.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SubstanceDefinition.html}
 */
    export interface SubstanceDefinition extends DomainResource {
      
      readonly resourceType: "SubstanceDefinition";
      

      
        
          
  /**
 * A high level categorization, e.g. polymer or nucleic acid, or food, chemical,
 * biological, or a lower level such as the general types of polymer (linear or
 * branch chain) or type of impurity (process related or contaminant).
 */
  classification?: Array<CodeableConcept> | undefined;
  _classification?: Element[] | undefined;

        
      
        
          
  /**
 * Codes associated with the substance.
 */
  code?: Array<BackboneElement> | undefined;
  _code?: Element[] | undefined;

        
      
        
          
  /**
 * The specific code.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Any comment can be provided in this field, if necessary.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Supporting literature.
 */
  source?: Array<Reference> | undefined;
  _source?: Element[] | undefined;

        
      
        
          
  /**
 * Status of the code assignment, for example 'provisional', 'approved'.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The date at which the code status was changed as part of the terminology
 * maintenance.
 */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;

        
      
        
          
  /**
 * Textual description of the substance.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * If the substance applies to human or veterinary use.
 */
  domain?: CodeableConcept | undefined;
  _domain?: Element | undefined;

        
      
        
          
  /**
 * The quality standard, established benchmark, to which substance complies (e.g.
 * USP/NF, Ph. Eur, JP, BP, Company Standard).
 */
  grade?: Array<CodeableConcept> | undefined;
  _grade?: Element[] | undefined;

        
      
        
          
  /**
 * Identifier by which this substance is known.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Supporting literature.
 */
  informationSource?: Array<Reference> | undefined;
  _informationSource?: Element[] | undefined;

        
      
        
          
  /**
 * The entity that creates, makes, produces or fabricates the substance. This is a
 * set of potential manufacturers but is not necessarily comprehensive.
 */
  manufacturer?: Array<Reference> | undefined;
  _manufacturer?: Element[] | undefined;

        
      
        
          
  /**
 * Moiety, for structural modifications.
 */
  moiety?: Array<BackboneElement> | undefined;
  _moiety?: Element[] | undefined;

        
      
        
          
            
  /**
 * Quantitative value for this moiety.
 */
  amountQuantity?: Quantity | undefined;
  _amountQuantity?: Element | undefined;

          
            
  /**
 * Quantitative value for this moiety.
 */
  amountString?: string | undefined;
  _amountString?: Element | undefined;

          
        
      
        
          
  /**
 * Identifier by which this moiety substance is known.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * The measurement type of the quantitative value. In capturing the actual relative
 * amounts of substances or molecular fragments it may be necessary to indicate
 * whether the amount refers to, for example, a mole ratio or weight ratio.
 */
  measurementType?: CodeableConcept | undefined;
  _measurementType?: Element | undefined;

        
      
        
          
  /**
 * Molecular formula for this moiety of this substance, typically using the Hill
 * system.
 */
  molecularFormula?: string | undefined;
  _molecularFormula?: Element | undefined;

        
      
        
          
  /**
 * Textual name for this moiety substance.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Optical activity type.
 */
  opticalActivity?: CodeableConcept | undefined;
  _opticalActivity?: Element | undefined;

        
      
        
          
  /**
 * Role that the moiety is playing.
 */
  role?: CodeableConcept | undefined;
  _role?: Element | undefined;

        
      
        
          
  /**
 * Stereochemistry type.
 */
  stereochemistry?: CodeableConcept | undefined;
  _stereochemistry?: Element | undefined;

        
      
        
          
  /**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
  molecularWeight?: Array<BackboneElement> | undefined;
  _molecularWeight?: Element[] | undefined;

        
      
        
          
  /**
 * Used to capture quantitative values for a variety of elements. If only limits
 * are given, the arithmetic mean would be the average. If only a single definite
 * value for a given element is given, it would be captured in this field.
 */
  amount: Quantity;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * The method by which the molecular weight was determined.
 */
  method?: CodeableConcept | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * Type of molecular weight such as exact, average (also known as. number average),
 * weight average.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Names applicable to this substance.
 */
  name?: Array<BackboneElement> | undefined;
  _name?: Element[] | undefined;

        
      
        
          
  /**
 * The use context of this name for example if there is a different name a drug
 * active ingredient as opposed to a food colour additive.
 */
  domain?: Array<CodeableConcept> | undefined;
  _domain?: Element[] | undefined;

        
      
        
          
  /**
 * The jurisdiction where this name applies.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * Human language that the name is written in.
 */
  language?: Array<CodeableConcept> | undefined;
  _language?: Element[] | undefined;

        
      
        
          
  /**
 * The actual name.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Details of the official nature of this name.
 */
  official?: Array<BackboneElement> | undefined;
  _official?: Element[] | undefined;

        
      
        
          
  /**
 * Which authority uses this official name.
 */
  authority?: CodeableConcept | undefined;
  _authority?: Element | undefined;

        
      
        
          
  /**
 * Date of the official name change.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * The status of the official name, for example 'draft', 'active', 'retired'.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * If this is the preferred name for this substance.
 */
  preferred?: boolean | undefined;
  _preferred?: Element | undefined;

        
      
        
          
  /**
 * Supporting literature.
 */
  source?: Array<Reference> | undefined;
  _source?: Element[] | undefined;

        
      
        
          
  /**
 * The status of the name, for example 'current', 'proposed'.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A synonym of this particular name, by which the substance is also known.
 */
  synonym?: Array<undefined> | undefined;
  _synonym?: Element[] | undefined;

        
      
        
          
  /**
 * A translation for this name into another human language.
 */
  translation?: Array<undefined> | undefined;
  _translation?: Element[] | undefined;

        
      
        
          
  /**
 * Name type, for example 'systematic',  'scientific, 'brand'.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Textual comment about the substance's catalogue or registry record.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * General specifications for this substance.
 */
  property?: Array<BackboneElement> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * A code expressing the type of property.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * A value for the property.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * A value for the property.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * A value for the property.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * A value for the property.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * A value for the property.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
        
      
        
          
  /**
 * A link between this substance and another, with details of the relationship.
 */
  relationship?: Array<BackboneElement> | undefined;
  _relationship?: Element[] | undefined;

        
      
        
          
            
  /**
 * A numeric factor for the relationship, for instance to express that the salt of
 * a substance has some percentage of the active substance in relation to some
 * other.
 */
  amountQuantity?: Quantity | undefined;
  _amountQuantity?: Element | undefined;

          
            
  /**
 * A numeric factor for the relationship, for instance to express that the salt of
 * a substance has some percentage of the active substance in relation to some
 * other.
 */
  amountRatio?: Ratio | undefined;
  _amountRatio?: Element | undefined;

          
            
  /**
 * A numeric factor for the relationship, for instance to express that the salt of
 * a substance has some percentage of the active substance in relation to some
 * other.
 */
  amountString?: string | undefined;
  _amountString?: Element | undefined;

          
        
      
        
          
  /**
 * An operator for the amount, for example "average", "approximately", "less than".
 */
  comparator?: CodeableConcept | undefined;
  _comparator?: Element | undefined;

        
      
        
          
  /**
 * For example where an enzyme strongly bonds with a particular substance, this is
 * a defining relationship for that enzyme, out of several possible substance
 * relationships.
 */
  isDefining?: boolean | undefined;
  _isDefining?: Element | undefined;

        
      
        
          
  /**
 * For use when the numeric has an uncertain range.
 */
  ratioHighLimitAmount?: Ratio | undefined;
  _ratioHighLimitAmount?: Element | undefined;

        
      
        
          
  /**
 * Supporting literature.
 */
  source?: Array<Reference> | undefined;
  _source?: Element[] | undefined;

        
      
        
          
            
  /**
 * A pointer to another substance, as a resource or just a representational code.
 */
  substanceDefinitionReference?: Reference | undefined;
  _substanceDefinitionReference?: Element | undefined;

          
            
  /**
 * A pointer to another substance, as a resource or just a representational code.
 */
  substanceDefinitionCodeableConcept?: CodeableConcept | undefined;
  _substanceDefinitionCodeableConcept?: Element | undefined;

          
        
      
        
          
  /**
 * For example "salt to parent", "active moiety", "starting material", "polymorph",
 * "impurity of".
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Material or taxonomic/anatomical source for the substance.
 */
  sourceMaterial?: BackboneElement | undefined;
  _sourceMaterial?: Element | undefined;

        
      
        
          
  /**
 * The country or countries where the material is harvested.
 */
  countryOfOrigin?: Array<CodeableConcept> | undefined;
  _countryOfOrigin?: Element[] | undefined;

        
      
        
          
  /**
 * The genus of an organism, typically referring to the Latin epithet of the genus
 * element of the plant/animal scientific name.
 */
  genus?: CodeableConcept | undefined;
  _genus?: Element | undefined;

        
      
        
          
  /**
 * An anatomical origin of the source material within an organism.
 */
  part?: CodeableConcept | undefined;
  _part?: Element | undefined;

        
      
        
          
  /**
 * The species of an organism, typically referring to the Latin epithet of the
 * species of the plant/animal.
 */
  species?: CodeableConcept | undefined;
  _species?: Element | undefined;

        
      
        
          
  /**
 * A classification that provides the origin of the raw material. Example: cat hair
 * would be an Animal source type.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Status of substance within the catalogue e.g. active, retired.
 */
  status?: CodeableConcept | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Structural information.
 */
  structure?: BackboneElement | undefined;
  _structure?: Element | undefined;

        
      
        
          
  /**
 * Molecular formula of this substance, typically using the Hill system.
 */
  molecularFormula?: string | undefined;
  _molecularFormula?: Element | undefined;

        
      
        
          
  /**
 * Specified per moiety according to the Hill system, i.e. first C, then H, then
 * alphabetical, each moiety separated by a dot.
 */
  molecularFormulaByMoiety?: string | undefined;
  _molecularFormulaByMoiety?: Element | undefined;

        
      
        
          
  /**
 * The molecular weight or weight range (for proteins, polymers or nucleic acids).
 */
  molecularWeight?: undefined | undefined;
  _molecularWeight?: Element | undefined;

        
      
        
          
  /**
 * Optical activity type.
 */
  opticalActivity?: CodeableConcept | undefined;
  _opticalActivity?: Element | undefined;

        
      
        
          
  /**
 * A depiction of the structure or characterization of the substance.
 */
  representation?: Array<BackboneElement> | undefined;
  _representation?: Element[] | undefined;

        
      
        
          
  /**
 * An attached file with the structural representation or characterization e.g. a
 * molecular structure graphic of the substance, a JCAMP or AnIML file.
 */
  document?: Reference | undefined;
  _document?: Element | undefined;

        
      
        
          
  /**
 * The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB,
 * mmCIF. The logical content type rather than the physical file format of a
 * document.
 */
  format?: CodeableConcept | undefined;
  _format?: Element | undefined;

        
      
        
          
  /**
 * The structural representation or characterization as a text string in a standard
 * format.
 */
  representation?: string | undefined;
  _representation?: Element | undefined;

        
      
        
          
  /**
 * The kind of structural representation (e.g. full, partial).
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The source of information about the structure.
 */
  sourceDocument?: Array<Reference> | undefined;
  _sourceDocument?: Element[] | undefined;

        
      
        
          
  /**
 * Stereochemistry type.
 */
  stereochemistry?: CodeableConcept | undefined;
  _stereochemistry?: Element | undefined;

        
      
        
          
  /**
 * The method used to elucidate the structure or characterization of the drug
 * substance. Examples: X-ray, HPLC, NMR, Peptide mapping, Ligand binding assay.
 */
  technique?: Array<CodeableConcept> | undefined;
  _technique?: Element[] | undefined;

        
      
        
          
  /**
 * An entity that is the source for the substance. It may be different from the
 * manufacturer. Supplier is synonymous to a distributor.
 */
  supplier?: Array<Reference> | undefined;
  _supplier?: Element[] | undefined;

        
      
        
          
  /**
 * A business level version identifier of the substance.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * SupplyDelivery
 * 
 * Record of delivery of what is supplied.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SupplyDelivery.html}
 */
    export interface SupplyDelivery extends DomainResource {
      
      readonly resourceType: "SupplyDelivery";
      

      
        
          
  /**
 * A plan, proposal or order that is fulfilled in whole or in part by this event.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Identification of the facility/location where the Supply was shipped to, as part
 * of the dispense event.
 */
  destination?: Reference | undefined;
  _destination?: Element | undefined;

        
      
        
          
  /**
 * Identifier for the supply delivery event that is used to identify it across
 * multiple disparate systems.
 * This identifier is typically assigned by the dispenser, and may be used to
 * reference the delivery when exchanging information about it with other systems.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
            
  /**
 * The date or time(s) the activity occurred.
 * [The list of types may be constrained as appropriate for the type of event].
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * The date or time(s) the activity occurred.
 * [The list of types may be constrained as appropriate for the type of event].
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * The date or time(s) the activity occurred.
 * [The list of types may be constrained as appropriate for the type of event].
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * A larger event of which this particular event is a component or step.
 * Not to be used to link an event to an Encounter - use Event.context for
 * that.[The allowed reference resources may be adjusted as appropriate for the
 * event resource].
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * A link to a resource representing the person whom the delivered item is for.
 */
  patient?: Reference | undefined;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * Identifies the person who picked up the Supply.
 */
  receiver?: Array<Reference> | undefined;
  _receiver?: Element[] | undefined;

        
      
        
          
  /**
 * A code specifying the state of the dispense event.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The item that is being delivered or has been supplied.
 */
  suppliedItem?: BackboneElement | undefined;
  _suppliedItem?: Element | undefined;

        
      
        
          
            
  /**
 * Identifies the medication, substance or device being dispensed. This is either a
 * link to a resource representing the details of the item or a code that
 * identifies the item from a known list.
 */
  itemCodeableConcept?: CodeableConcept | undefined;
  _itemCodeableConcept?: Element | undefined;

          
            
  /**
 * Identifies the medication, substance or device being dispensed. This is either a
 * link to a resource representing the details of the item or a code that
 * identifies the item from a known list.
 */
  itemReference?: Reference | undefined;
  _itemReference?: Element | undefined;

          
        
      
        
          
  /**
 * The amount of supply that has been dispensed. Includes unit of measure.
 */
  quantity?: Quantity | undefined;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The individual responsible for dispensing the medication, supplier or device.
 */
  supplier?: Reference | undefined;
  _supplier?: Element | undefined;

        
      
        
          
  /**
 * Indicates the type of dispensing event that is performed. Examples include:
 * Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
 */
  type?: CodeableConcept | undefined;
  _type?: Element | undefined;

        
      
    }

  


  
    /**
 * SupplyRequest
 * 
 * A record of a request for a medication, substance or device used in the
 * healthcare setting.
 * 
 * @see {@link http://hl7.org/fhir/R4B/SupplyRequest.html}
 */
    export interface SupplyRequest extends DomainResource {
      
      readonly resourceType: "SupplyRequest";
      

      
        
          
  /**
 * When the request was made.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * Category of supply, e.g.  central, non-stock, etc. This is used to support work
 * flows associated with the supply process.
 */
  category?: CodeableConcept | undefined;
  _category?: Element | undefined;

        
      
        
          
  /**
 * Where the supply is expected to come from.
 */
  deliverFrom?: Reference | undefined;
  _deliverFrom?: Element | undefined;

        
      
        
          
  /**
 * Where the supply is destined to go.
 */
  deliverTo?: Reference | undefined;
  _deliverTo?: Element | undefined;

        
      
        
          
  /**
 * Business identifiers assigned to this SupplyRequest by the author and/or other
 * systems. These identifiers remain constant as the resource is updated and
 * propagates from server to server.
 * The identifier.type element is used to distinguish between the identifiers
 * assigned by the requester/placer and the performer/filler.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
            
  /**
 * The item that is requested to be supplied. This is either a link to a resource
 * representing the details of the item or a code that identifies the item from a
 * known list.
 * Note that there's a difference between a prescription - an instruction to take a
 * medication, along with a (sometimes) implicit supply, and an explicit request to
 * supply, with no explicit instructions.
 */
  itemCodeableConcept?: CodeableConcept | undefined;
  _itemCodeableConcept?: Element | undefined;

          
            
  /**
 * The item that is requested to be supplied. This is either a link to a resource
 * representing the details of the item or a code that identifies the item from a
 * known list.
 * Note that there's a difference between a prescription - an instruction to take a
 * medication, along with a (sometimes) implicit supply, and an explicit request to
 * supply, with no explicit instructions.
 */
  itemReference?: Reference | undefined;
  _itemReference?: Element | undefined;

          
        
      
        
          
            
  /**
 * When the request should be fulfilled.
 */
  occurrenceDateTime?: string | undefined;
  _occurrenceDateTime?: Element | undefined;

          
            
  /**
 * When the request should be fulfilled.
 */
  occurrencePeriod?: Period | undefined;
  _occurrencePeriod?: Element | undefined;

          
            
  /**
 * When the request should be fulfilled.
 */
  occurrenceTiming?: Timing | undefined;
  _occurrenceTiming?: Element | undefined;

          
        
      
        
          
  /**
 * Specific parameters for the ordered item.  For example, the size of the
 * indicated item.
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * A code or string that identifies the device detail being asserted.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The value of the device detail.
 * Range means device should have a value that falls somewhere within the specified
 * range.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
        
      
        
          
  /**
 * Indicates how quickly this SupplyRequest should be addressed with respect to
 * other requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * The amount that is being ordered of the indicated item.
 */
  quantity: Quantity;
  _quantity?: Element | undefined;

        
      
        
          
  /**
 * The reason why the supply item was requested.
 */
  reasonCode?: Array<CodeableConcept> | undefined;
  _reasonCode?: Element[] | undefined;

        
      
        
          
  /**
 * The reason why the supply item was requested.
 */
  reasonReference?: Array<Reference> | undefined;
  _reasonReference?: Element[] | undefined;

        
      
        
          
  /**
 * The device, practitioner, etc. who initiated the request.
 */
  requester?: Reference | undefined;
  _requester?: Element | undefined;

        
      
        
          
  /**
 * Status of the supply request.
 */
  status?: string | undefined;
  _status?: Element | undefined;

        
      
        
          
  /**
 * Who is intended to fulfill the request.
 */
  supplier?: Array<Reference> | undefined;
  _supplier?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * Task
 * 
 * A task to be performed.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Task.html}
 */
    export interface Task extends DomainResource {
      
      readonly resourceType: "Task";
      

      
        
          
  /**
 * The date and time this task was created.
 */
  authoredOn?: string | undefined;
  _authoredOn?: Element | undefined;

        
      
        
          
  /**
 * BasedOn refers to a higher-level authorization that triggered the creation of
 * the task.  It references a "request" resource such as a ServiceRequest,
 * MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the
 * "request" resource the task is seeking to fulfill.  This latter resource is
 * referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a
 * task is created to fulfill a procedureRequest ( = FocusOn ) to collect a
 * specimen from a patient.
 */
  basedOn?: Array<Reference> | undefined;
  _basedOn?: Element[] | undefined;

        
      
        
          
  /**
 * Contains business-specific nuances of the business state.
 */
  businessStatus?: CodeableConcept | undefined;
  _businessStatus?: Element | undefined;

        
      
        
          
  /**
 * A name or code (or both) briefly describing what the task involves.
 * The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the
 * code.
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * A free-text description of what is to be performed.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The healthcare event  (e.g. a patient and healthcare provider interaction)
 * during which this task was created.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * Identifies the time action was first taken against the task (start) and/or the
 * time final action was taken against the task prior to marking it as completed
 * (end).
 */
  executionPeriod?: Period | undefined;
  _executionPeriod?: Element | undefined;

        
      
        
          
  /**
 * The request being actioned or the resource being manipulated by this task.
 * If multiple resources need to be manipulated, use sub-tasks.  (This ensures that
 * status can be tracked independently for each referenced resource.).
 */
  focus?: Reference | undefined;
  _focus?: Element | undefined;

        
      
        
          
  /**
 * The entity who benefits from the performance of the service specified in the
 * task (e.g., the patient).
 */
  for?: Reference | undefined;
  _for?: Element | undefined;

        
      
        
          
  /**
 * An identifier that links together multiple tasks and other requests that were
 * created in the same context.
 */
  groupIdentifier?: Identifier | undefined;
  _groupIdentifier?: Element | undefined;

        
      
        
          
  /**
 * The business identifier for this task.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Additional information that may be needed in the execution of the task.
 */
  input?: Array<BackboneElement> | undefined;
  _input?: Element[] | undefined;

        
      
        
          
  /**
 * A code or description indicating how the input is intended to be used as part of
 * the task execution.
 * If referencing a BPMN workflow or Protocol, the "system" is the URL for the
 * workflow definition and the code is the "name" of the required input.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueCanonical?: string | undefined;
  _valueCanonical?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueCode?: string | undefined;
  _valueCode?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueId?: id | undefined;
  _valueId?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueInstant?: string | undefined;
  _valueInstant?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueMarkdown?: string | undefined;
  _valueMarkdown?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueOid?: oid | undefined;
  _valueOid?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valuePositiveInt?: number | undefined;
  _valuePositiveInt?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueUnsignedInt?: unsignedInt | undefined;
  _valueUnsignedInt?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueUrl?: string | undefined;
  _valueUrl?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueUuid?: uuid | undefined;
  _valueUuid?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueAddress?: Address | undefined;
  _valueAddress?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueAge?: Age | undefined;
  _valueAge?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueAnnotation?: Annotation | undefined;
  _valueAnnotation?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueContactPoint?: ContactPoint | undefined;
  _valueContactPoint?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueCount?: Count | undefined;
  _valueCount?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueDistance?: Distance | undefined;
  _valueDistance?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueDuration?: Duration | undefined;
  _valueDuration?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueHumanName?: HumanName | undefined;
  _valueHumanName?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueIdentifier?: Identifier | undefined;
  _valueIdentifier?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueMoney?: Money | undefined;
  _valueMoney?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueRatio?: Ratio | undefined;
  _valueRatio?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueSampledData?: SampledData | undefined;
  _valueSampledData?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueSignature?: Signature | undefined;
  _valueSignature?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueTiming?: Timing | undefined;
  _valueTiming?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueContactDetail?: ContactDetail | undefined;
  _valueContactDetail?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueContributor?: Contributor | undefined;
  _valueContributor?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueDataRequirement?: DataRequirement | undefined;
  _valueDataRequirement?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueExpression?: Expression | undefined;
  _valueExpression?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueParameterDefinition?: ParameterDefinition | undefined;
  _valueParameterDefinition?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  _valueRelatedArtifact?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  _valueTriggerDefinition?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueUsageContext?: UsageContext | undefined;
  _valueUsageContext?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueDosage?: Dosage | undefined;
  _valueDosage?: Element | undefined;

          
            
  /**
 * The value of the input parameter as a basic type.
 */
  valueMeta?: Meta | undefined;
  _valueMeta?: Element | undefined;

          
        
      
        
          
  /**
 * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other
 * definition that is adhered to in whole or in part by this Task.
 */
  instantiatesCanonical?: string | undefined;
  _instantiatesCanonical?: Element | undefined;

        
      
        
          
  /**
 * The URL pointing to an *externally* maintained  protocol, guideline, orderset or
 * other definition that is adhered to in whole or in part by this Task.
 */
  instantiatesUri?: string | undefined;
  _instantiatesUri?: Element | undefined;

        
      
        
          
  /**
 * Insurance plans, coverage extensions, pre-authorizations and/or
 * pre-determinations that may be relevant to the Task.
 */
  insurance?: Array<Reference> | undefined;
  _insurance?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs
 * this a proposed task, a planned task, an actionable task, etc.
 * This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct
 * instances.

In most cases, Tasks will have an intent of "order".
 */
  intent: string;
  _intent?: Element | undefined;

        
      
        
          
  /**
 * The date and time of last modification to this task.
 */
  lastModified?: string | undefined;
  _lastModified?: Element | undefined;

        
      
        
          
  /**
 * Principal physical location where the this task is performed.
 */
  location?: Reference | undefined;
  _location?: Element | undefined;

        
      
        
          
  /**
 * Free-text information captured about the task as it progresses.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Outputs produced by the Task.
 */
  output?: Array<BackboneElement> | undefined;
  _output?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the Output parameter.
 */
  type: CodeableConcept;
  _type?: Element | undefined;

        
      
        
          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueBase64Binary?: string | undefined;
  _valueBase64Binary?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueCanonical?: string | undefined;
  _valueCanonical?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueCode?: string | undefined;
  _valueCode?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueDate?: string | undefined;
  _valueDate?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueId?: id | undefined;
  _valueId?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueInstant?: string | undefined;
  _valueInstant?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueMarkdown?: string | undefined;
  _valueMarkdown?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueOid?: oid | undefined;
  _valueOid?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valuePositiveInt?: number | undefined;
  _valuePositiveInt?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueTime?: time | undefined;
  _valueTime?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueUnsignedInt?: unsignedInt | undefined;
  _valueUnsignedInt?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueUrl?: string | undefined;
  _valueUrl?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueUuid?: uuid | undefined;
  _valueUuid?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueAddress?: Address | undefined;
  _valueAddress?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueAge?: Age | undefined;
  _valueAge?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueAnnotation?: Annotation | undefined;
  _valueAnnotation?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueAttachment?: Attachment | undefined;
  _valueAttachment?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueCoding?: Coding | undefined;
  _valueCoding?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueContactPoint?: ContactPoint | undefined;
  _valueContactPoint?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueCount?: Count | undefined;
  _valueCount?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueDistance?: Distance | undefined;
  _valueDistance?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueDuration?: Duration | undefined;
  _valueDuration?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueHumanName?: HumanName | undefined;
  _valueHumanName?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueIdentifier?: Identifier | undefined;
  _valueIdentifier?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueMoney?: Money | undefined;
  _valueMoney?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valuePeriod?: Period | undefined;
  _valuePeriod?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueRatio?: Ratio | undefined;
  _valueRatio?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueSampledData?: SampledData | undefined;
  _valueSampledData?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueSignature?: Signature | undefined;
  _valueSignature?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueTiming?: Timing | undefined;
  _valueTiming?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueContactDetail?: ContactDetail | undefined;
  _valueContactDetail?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueContributor?: Contributor | undefined;
  _valueContributor?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueDataRequirement?: DataRequirement | undefined;
  _valueDataRequirement?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueExpression?: Expression | undefined;
  _valueExpression?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueParameterDefinition?: ParameterDefinition | undefined;
  _valueParameterDefinition?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueRelatedArtifact?: RelatedArtifact | undefined;
  _valueRelatedArtifact?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueTriggerDefinition?: TriggerDefinition | undefined;
  _valueTriggerDefinition?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueUsageContext?: UsageContext | undefined;
  _valueUsageContext?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueDosage?: Dosage | undefined;
  _valueDosage?: Element | undefined;

          
            
  /**
 * The value of the Output parameter as a basic type.
 */
  valueMeta?: Meta | undefined;
  _valueMeta?: Element | undefined;

          
        
      
        
          
  /**
 * Individual organization or Device currently responsible for task execution.
 * Tasks may be created with an owner not yet identified.
 */
  owner?: Reference | undefined;
  _owner?: Element | undefined;

        
      
        
          
  /**
 * Task that this particular task is part of.
 * This should usually be 0..1.
 */
  partOf?: Array<Reference> | undefined;
  _partOf?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of participant that should perform the task.
 */
  performerType?: Array<CodeableConcept> | undefined;
  _performerType?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates how quickly the Task should be addressed with respect to other
 * requests.
 */
  priority?: string | undefined;
  _priority?: Element | undefined;

        
      
        
          
  /**
 * A description or code indicating why this task needs to be performed.
 * This should only be included if there is no focus or if it differs from the
 * reason indicated on the focus.
 */
  reasonCode?: CodeableConcept | undefined;
  _reasonCode?: Element | undefined;

        
      
        
          
  /**
 * A resource reference indicating why this task needs to be performed.
 * Tasks might be justified based on an Observation, a Condition, a past or planned
 * procedure, etc.   This should only be included if there is no focus or if it
 * differs from the reason indicated on the focus.    Use the CodeableConcept text
 * element in `Task.reasonCode` if the data is free (uncoded) text.
 */
  reasonReference?: Reference | undefined;
  _reasonReference?: Element | undefined;

        
      
        
          
  /**
 * Links to Provenance records for past versions of this Task that identify key
 * state transitions or updates that are likely to be relevant to a user looking at
 * the current version of the task.
 * This element does not point to the Provenance associated with the *current*
 * version of the resource - as it would be created after this version existed.
 * The Provenance for the current version can be retrieved with a _revinclude.
 */
  relevantHistory?: Array<Reference> | undefined;
  _relevantHistory?: Element[] | undefined;

        
      
        
          
  /**
 * The creator of the task.
 */
  requester?: Reference | undefined;
  _requester?: Element | undefined;

        
      
        
          
  /**
 * If the Task.focus is a request resource and the task is seeking fulfillment
 * (i.e. is asking for the request to be actioned), this element identifies any
 * limitations on what parts of the referenced request should be actioned.
 */
  restriction?: BackboneElement | undefined;
  _restriction?: Element | undefined;

        
      
        
          
  /**
 * Over what time-period is fulfillment sought.
 * Note that period.high is the due date representing the time by which the task
 * should be completed.
 */
  period?: Period | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * For requests that are targeted to more than on potential recipient/target, for
 * whom is fulfillment sought?
 */
  recipient?: Array<Reference> | undefined;
  _recipient?: Element[] | undefined;

        
      
        
          
  /**
 * Indicates the number of times the requested action should occur.
 */
  repetitions?: number | undefined;
  _repetitions?: Element | undefined;

        
      
        
          
  /**
 * The current status of the task.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * An explanation as to why this task is held, failed, was refused, etc.
 * This applies to the current status.  Look at the history of the task to see
 * reasons for past statuses.
 */
  statusReason?: CodeableConcept | undefined;
  _statusReason?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * TerminologyCapabilities
 * 
 * A TerminologyCapabilities resource documents a set of capabilities (behaviors)
 * of a FHIR Terminology Server that may be used as a statement of actual server
 * functionality or a statement of required or desired server implementation.
 * 
 * @see {@link http://hl7.org/fhir/R4B/TerminologyCapabilities.html}
 */
    export interface TerminologyCapabilities extends DomainResource {
      
      readonly resourceType: "TerminologyCapabilities";
      

      
        
          
  /**
 * Whether the $closure operation is supported.
 */
  closure?: BackboneElement | undefined;
  _closure?: Element | undefined;

        
      
        
          
  /**
 * If cross-system closure is supported.
 */
  translation?: boolean | undefined;
  _translation?: Element | undefined;

        
      
        
          
  /**
 * The degree to which the server supports the code search parameter on ValueSet,
 * if it is supported.
 * See notes on the [ValueSet](valueset.html#) resource.
 */
  codeSearch?: string | undefined;
  _codeSearch?: Element | undefined;

        
      
        
          
  /**
 * Identifies a code system that is supported by the server. If there is a no code
 * system URL, then this declares the general assumptions a client can make about
 * support for any CodeSystem resource.
 * The code system - identified by its system URL - may also be declared explicitly
 * as a Code System Resource at /CodeSystem, but it might not be.
 */
  codeSystem?: Array<BackboneElement> | undefined;
  _codeSystem?: Element[] | undefined;

        
      
        
          
  /**
 * True if subsumption is supported for this version of the code system.
 */
  subsumption?: boolean | undefined;
  _subsumption?: Element | undefined;

        
      
        
          
  /**
 * URI for the Code System.
 */
  uri?: string | undefined;
  _uri?: Element | undefined;

        
      
        
          
  /**
 * For the code system, a list of versions that are supported by the server.
 * Language translations might not be available for all codes.
 */
  version?: Array<BackboneElement> | undefined;
  _version?: Element[] | undefined;

        
      
        
          
  /**
 * For version-less code systems, there should be a single version with no
 * identifier.
 */
  code?: string | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * If the compositional grammar defined by the code system is supported.
 */
  compositional?: boolean | undefined;
  _compositional?: Element | undefined;

        
      
        
          
  /**
 * Filter Properties supported.
 */
  filter?: Array<BackboneElement> | undefined;
  _filter?: Element[] | undefined;

        
      
        
          
  /**
 * Code of the property supported.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Operations supported for the property.
 */
  op: Array<string>;
  _op?: Element[] | undefined;

        
      
        
          
  /**
 * If this is the default version for this code system.
 */
  isDefault?: boolean | undefined;
  _isDefault?: Element | undefined;

        
      
        
          
  /**
 * Language Displays supported.
 */
  language?: Array<string> | undefined;
  _language?: Element[] | undefined;

        
      
        
          
  /**
 * Properties supported for $lookup.
 */
  property?: Array<string> | undefined;
  _property?: Element[] | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the terminology capabilities and/or its
 * contents. Copyright statements are generally legal restrictions on the use and
 * publishing of the terminology capabilities.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the terminology capabilities was published.
 * The date must change when the business version changes and it must change if the
 * status code changes. In addition, it should change when the substantive content
 * of the terminology capabilities changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the terminology capabilities.
 * Additional specific dates may be added as extensions or be found by consulting
 * Provenances associated with past versions of the resource.
 */
  date: string;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the terminology capabilities from a
 * consumer's perspective. Typically, this is used when the capability statement
 * describes a desired rather than an actual solution, for example as a formal
 * expression of requirements as part of an RFP.
 * This description can be used to capture details such as why the terminology
 * capabilities was built, comments about misuse, instructions for clinical use and
 * interpretation, literature references, examples from the paper world, etc. It is
 * not a rendering of the terminology capabilities as conveyed in the 'text' field
 * of the resource itself. This item SHOULD be populated unless the information is
 * available from context (e.g. the language of the terminology capabilities is
 * presumed to be the predominant language in the place the terminology
 * capabilities was created).This does not need to be populated if the description
 * is adequately implied by the software or implementation details.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html)
 * operation.
 */
  expansion?: BackboneElement | undefined;
  _expansion?: Element | undefined;

        
      
        
          
  /**
 * Whether the server can return nested value sets.
 */
  hierarchical?: boolean | undefined;
  _hierarchical?: Element | undefined;

        
      
        
          
  /**
 * Allow request for incomplete expansions?
 */
  incomplete?: boolean | undefined;
  _incomplete?: Element | undefined;

        
      
        
          
  /**
 * Whether the server supports paging on expansion.
 */
  paging?: boolean | undefined;
  _paging?: Element | undefined;

        
      
        
          
  /**
 * Supported expansion parameter.
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * Description of support for parameter.
 */
  documentation?: string | undefined;
  _documentation?: Element | undefined;

        
      
        
          
  /**
 * Expansion Parameter name.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Documentation about text searching works.
 * This documentation should cover things like case sensitivity,  use of
 * punctuation if not ignored, what wild cards are supported (if any), whether text
 * is starts with or contains, and whether word order matters.
 */
  textFilter?: string | undefined;
  _textFilter?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this terminology capabilities is authored for
 * testing purposes (or education/evaluation/marketing) and is not intended to be
 * used for genuine usage.
 * Allows filtering of terminology capabilitiess that are appropriate for use
 * versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * Identifies a specific implementation instance that is described by the
 * terminology capability statement - i.e. a particular installation, rather than
 * the capabilities of a software program.
 */
  implementation?: BackboneElement | undefined;
  _implementation?: Element | undefined;

        
      
        
          
  /**
 * Information about the specific installation that this terminology capability
 * statement relates to.
 */
  description: string;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An absolute base URL for the implementation.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the terminology capabilities is intended
 * to be used.
 * It may be possible for the terminology capabilities to be used in jurisdictions
 * other than those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The way that this statement is intended to be used, to describe an actual
 * running instance of software, a particular product (kind, not instance of
 * software) or a class of implementation (e.g. a desired purchase).
 */
  kind: string;
  _kind?: Element | undefined;

        
      
        
          
  /**
 * Whether the server supports lockedDate.
 */
  lockedDate?: boolean | undefined;
  _lockedDate?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the terminology capabilities. This name
 * should be usable as an identifier for the module by machine processing
 * applications such as code generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the terminology
 * capabilities.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the terminology capabilities is the organization or individual primarily
 * responsible for the maintenance and upkeep of the terminology capabilities. This
 * is not necessarily the same individual or organization that developed and
 * initially authored the content. The publisher is the primary point of contact
 * for questions or issues with the terminology capabilities. This item SHOULD be
 * populated unless the information is available from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this terminology capabilities is needed and why it has been
 * designed as it has.
 * This element does not describe the usage of the terminology capabilities.
 * Instead, it provides traceability of ''why'' the resource is either needed or
 * ''why'' it is defined as it is.  This may be used to point to source materials
 * or specifications that drove the structure of this terminology capabilities.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * Software that is covered by this terminology capability statement.  It is used
 * when the statement describes the capabilities of a particular software version,
 * independent of an installation.
 */
  software?: BackboneElement | undefined;
  _software?: Element | undefined;

        
      
        
          
  /**
 * Name the software is known by.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The version identifier for the software covered by this statement.
 * If possible, a version should be specified, as statements are likely to be
 * different for different versions of software.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * The status of this terminology capabilities. Enables tracking the life-cycle of
 * the content.
 * Allows filtering of terminology capabilitiess that are appropriate for use
 * versus not.This is not intended for use with actual capability statements, but
 * where capability statements are used to describe possible or desired systems.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the terminology capabilities.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * Information about the
 * [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
 */
  translation?: BackboneElement | undefined;
  _translation?: Element | undefined;

        
      
        
          
  /**
 * Whether the client must identify the map.
 */
  needsMap: boolean;
  _needsMap?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this terminology capabilities when it
 * is referenced in a specification, model, design or an instance; also called its
 * canonical identifier. This SHOULD be globally unique and SHOULD be a literal
 * address at which at which an authoritative instance of this terminology
 * capabilities is (or will be) published. This URL can be the target of a
 * canonical reference. It SHALL remain the same when the terminology capabilities
 * is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate terminology
 * capabilities instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * Information about the
 * [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
 */
  validateCode?: BackboneElement | undefined;
  _validateCode?: Element | undefined;

        
      
        
          
  /**
 * Whether translations are validated.
 */
  translations: boolean;
  _translations?: Element | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the terminology
 * capabilities when it is referenced in a specification, model, design or
 * instance. This is an arbitrary value managed by the terminology capabilities
 * author and is not expected to be globally unique. For example, it might be a
 * timestamp (e.g. yyyymmdd) if a managed version is not available. There is also
 * no expectation that versions can be placed in a lexicographical sequence.
 * There may be different terminology capabilities instances that have the same
 * identifier but different versions.  The version can be appended to the url in a
 * reference to allow a reference to a particular business version of the
 * terminology capabilities with the format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  
    /**
 * TestReport
 * 
 * A summary of information based on the results of executing a TestScript.
 * 
 * @see {@link http://hl7.org/fhir/R4B/TestReport.html}
 */
    export interface TestReport extends DomainResource {
      
      readonly resourceType: "TestReport";
      

      
        
          
  /**
 * Identifier for the TestScript assigned for external purposes outside the context
 * of FHIR.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * When the TestScript was executed and this TestReport was generated.
 * Additional specific dates may be added as extensions.
 */
  issued?: string | undefined;
  _issued?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language name identifying the executed TestScript.
 * Not expected to be globally unique.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A participant in the test execution, either the execution engine, a client, or a
 * server.
 */
  participant?: Array<BackboneElement> | undefined;
  _participant?: Element[] | undefined;

        
      
        
          
  /**
 * The display name of the participant.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * The type of participant.
 */
  type: string;
  _type?: Element | undefined;

        
      
        
          
  /**
 * The uri of the participant. An absolute URL is preferred.
 */
  uri: string;
  _uri?: Element | undefined;

        
      
        
          
  /**
 * The overall result from the execution of the TestScript.
 * The pass and fail result represents a completed test script execution. The
 * pending result represents a test script execution that has not yet started or is
 * currently in progress.
 */
  result: string;
  _result?: Element | undefined;

        
      
        
          
  /**
 * The final score (percentage of tests passed) resulting from the execution of the
 * TestScript.
 */
  score?: number | undefined;
  _score?: Element | undefined;

        
      
        
          
  /**
 * The results of the series of required setup operations before the tests were
 * executed.
 */
  setup?: BackboneElement | undefined;
  _setup?: Element | undefined;

        
      
        
          
  /**
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It
 * can contain any number of variables.
 */
  action: Array<BackboneElement>;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * The results of the assertion performed on the previous operations.
 */
  assert?: BackboneElement | undefined;
  _assert?: Element | undefined;

        
      
        
          
  /**
 * A link to further details on the result.
 */
  detail?: string | undefined;
  _detail?: Element | undefined;

        
      
        
          
  /**
 * An explanatory message associated with the result.
 */
  message?: string | undefined;
  _message?: Element | undefined;

        
      
        
          
  /**
 * The result of this assertion.
 */
  result: string;
  _result?: Element | undefined;

        
      
        
          
  /**
 * The operation performed.
 */
  operation?: BackboneElement | undefined;
  _operation?: Element | undefined;

        
      
        
          
  /**
 * A link to further details on the result.
 */
  detail?: string | undefined;
  _detail?: Element | undefined;

        
      
        
          
  /**
 * An explanatory message associated with the result.
 */
  message?: string | undefined;
  _message?: Element | undefined;

        
      
        
          
  /**
 * The result of this operation.
 */
  result: string;
  _result?: Element | undefined;

        
      
        
          
  /**
 * The current state of this test report.
 * The status represents where the execution is currently within the test script
 * execution life cycle.

This element is labeled as a modifier because the status
 * contains codes that mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * The results of the series of operations required to clean up after all the tests
 * were executed (successfully or otherwise).
 */
  teardown?: BackboneElement | undefined;
  _teardown?: Element | undefined;

        
      
        
          
  /**
 * The teardown action will only contain an operation.
 * An action should contain either an operation or an assertion but not both.  It
 * can contain any number of variables.
 */
  action: Array<BackboneElement>;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * An operation would involve a REST request to a server.
 */
  operation: ;
  _operation?: Element | undefined;

        
      
        
          
  /**
 * A test executed from the test script.
 */
  test?: Array<BackboneElement> | undefined;
  _test?: Element[] | undefined;

        
      
        
          
  /**
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It
 * can contain any number of variables.
 */
  action: Array<BackboneElement>;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * The results of the assertion performed on the previous operations.
 */
  assert?: undefined | undefined;
  _assert?: Element | undefined;

        
      
        
          
  /**
 * An operation would involve a REST request to a server.
 */
  operation?: undefined | undefined;
  _operation?: Element | undefined;

        
      
        
          
  /**
 * A short description of the test used by test engines for tracking and reporting
 * purposes.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The name of this test used for tracking/logging purposes by test engines.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * Name of the tester producing this report (Organization or individual).
 * Usually an organization, but may be an individual. This item SHOULD be populated
 * unless the information is available from context.
 */
  tester?: string | undefined;
  _tester?: Element | undefined;

        
      
        
          
  /**
 * Ideally this is an absolute URL that is used to identify the version-specific
 * TestScript that was executed, matching the `TestScript.url`.
 */
  testScript: Reference;
  _testScript?: Element | undefined;

        
      
    }

  


  
    /**
 * TestScript
 * 
 * A structured set of tests against a FHIR server or client implementation to
 * determine compliance against the FHIR specification.
 * 
 * @see {@link http://hl7.org/fhir/R4B/TestScript.html}
 */
    export interface TestScript extends DomainResource {
      
      readonly resourceType: "TestScript";
      

      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the test script and/or its contents. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * test script.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date  (and optionally time) when the test script was published. The date
 * must change when the business version changes and it must change if the status
 * code changes. In addition, it should change when the substantive content of the
 * test script changes.
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the test script. Additional
 * specific dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the test script from a consumer's
 * perspective.
 * This description can be used to capture details such as why the test script was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the test script as conveyed in the 'text' field of the resource itself. This
 * item SHOULD be populated unless the information is available from context (e.g.
 * the language of the test script is presumed to be the predominant language in
 * the place the test script was created).
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * An abstract server used in operations within this test script in the destination
 * element.
 * The purpose of this element is to define the profile of a destination element
 * used elsewhere in the script.  Test engines could then use the
 * destination-profile mapping to offer a filtered list of test systems that can
 * serve as the receiver for the interaction.
 */
  destination?: Array<BackboneElement> | undefined;
  _destination?: Element[] | undefined;

        
      
        
          
  /**
 * Abstract name given to a destination server in this test script.  The name is
 * provided as a number starting at 1.
 * A given destination index (e.g. 1) can appear only once in the list (e.g.
 * Destination 1 cannot be specified twice ... once as Form-Manager and again as
 * Form-Processor within the same script as that could get confusing during test
 * configuration). 

Different destination indices could play the same actor in the
 * same test script (e.g. You could have two different test systems acting as
 * Form-Manager).

The destination indices provided elsewhere in the test script
 * must be one of these destination indices.
 */
  index: number;
  _index?: Element | undefined;

        
      
        
          
  /**
 * The type of destination profile the test system supports.
 * Must be a "receiver"/"server" profile.
 */
  profile: Coding;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this test script is authored for testing
 * purposes (or education/evaluation/marketing) and is not intended to be used for
 * genuine usage.
 * Allows filtering of test scripts that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * Fixture in the test script - by reference (uri). All fixtures are required for
 * the test script to execute.
 */
  fixture?: Array<BackboneElement> | undefined;
  _fixture?: Element[] | undefined;

        
      
        
          
  /**
 * Whether or not to implicitly create the fixture during setup. If true, the
 * fixture is automatically created on each server being tested during setup,
 * therefore no create operation is required for this fixture in the
 * TestScript.setup section.
 */
  autocreate: boolean;
  _autocreate?: Element | undefined;

        
      
        
          
  /**
 * Whether or not to implicitly delete the fixture during teardown. If true, the
 * fixture is automatically deleted on each server being tested during teardown,
 * therefore no delete operation is required for this fixture in the
 * TestScript.teardown section.
 */
  autodelete: boolean;
  _autodelete?: Element | undefined;

        
      
        
          
  /**
 * Reference to the resource (containing the contents of the resource needed for
 * operations).
 * See http://build.fhir.org/resourcelist.html for complete list of resource types.
 */
  resource?: Reference | undefined;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this test script when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this test script outside of FHIR,
 * where it is not possible to use the logical URI.
 */
  identifier?: Identifier | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the test script is intended to be used.
 * It may be possible for the test script to be used in jurisdictions other than
 * those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * The required capability must exist and are assumed to function correctly on the
 * FHIR server being tested.
 */
  metadata?: BackboneElement | undefined;
  _metadata?: Element | undefined;

        
      
        
          
  /**
 * Capabilities that must exist and are assumed to function correctly on the FHIR
 * server being tested.
 * When the metadata capabilities section is defined at TestScript.metadata or at
 * TestScript.setup.metadata, and the server's conformance statement does not
 * contain the elements defined in the minimal conformance statement, then all the
 * tests in the TestScript are skipped.  When the metadata capabilities section is
 * defined at TestScript.test.metadata and the server's conformance statement does
 * not contain the elements defined in the minimal conformance statement, then only
 * that test is skipped.  The "metadata.capabilities.required" and
 * "metadata.capabilities.validated" elements only indicate whether the
 * capabilities are the primary focus of the test script or not.  They do not
 * impact the skipping logic.  Capabilities whose "metadata.capabilities.validated"
 * flag is true are the primary focus of the test script.
 */
  capability: Array<BackboneElement>;
  _capability?: Element[] | undefined;

        
      
        
          
  /**
 * Minimum capabilities required of server for test script to execute successfully.
 * If server does not meet at a minimum the referenced capability statement, then
 * all tests in this script are skipped.
 * The conformance statement of the server has to contain at a minimum the contents
 * of the reference pointed to by this element.
 */
  capabilities: string;
  _capabilities?: Element | undefined;

        
      
        
          
  /**
 * Description of the capabilities that this test script is requiring the server to
 * support.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * Which server these requirements apply to.
 */
  destination?: number | undefined;
  _destination?: Element | undefined;

        
      
        
          
  /**
 * Links to the FHIR specification that describes this interaction and the
 * resources involved in more detail.
 */
  link?: Array<string> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * Which origin server these requirements apply to.
 */
  origin?: Array<number> | undefined;
  _origin?: Element[] | undefined;

        
      
        
          
  /**
 * Whether or not the test execution will require the given capabilities of the
 * server in order for this test script to execute.
 */
  required: boolean;
  _required?: Element | undefined;

        
      
        
          
  /**
 * Whether or not the test execution will validate the given capabilities of the
 * server in order for this test script to execute.
 */
  validated: boolean;
  _validated?: Element | undefined;

        
      
        
          
  /**
 * A link to the FHIR specification that this test is covering.
 */
  link?: Array<BackboneElement> | undefined;
  _link?: Element[] | undefined;

        
      
        
          
  /**
 * Short description of the link.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * URL to a particular requirement or feature within the FHIR specification.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * A natural language name identifying the test script. This name should be usable
 * as an identifier for the module by machine processing applications such as code
 * generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * An abstract server used in operations within this test script in the origin
 * element.
 * The purpose of this element is to define the profile of an origin element used
 * elsewhere in the script.  Test engines could then use the origin-profile mapping
 * to offer a filtered list of test systems that can serve as the sender for the
 * interaction.
 */
  origin?: Array<BackboneElement> | undefined;
  _origin?: Element[] | undefined;

        
      
        
          
  /**
 * Abstract name given to an origin server in this test script.  The name is
 * provided as a number starting at 1.
 * A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1
 * cannot be specified twice ... once as FormFiller and again as FormProcessor
 * within the same script as that could get confusing during test configuration).
 * Different origin indices could play the same actor in the same test script
 * (e.g. You could have two different test systems acting as Form-Filler).

The
 * origin indices provided elsewhere in the test script must be one of these origin
 * indices.
 */
  index: number;
  _index?: Element | undefined;

        
      
        
          
  /**
 * The type of origin profile the test system supports.
 * Must be a "sender"/"client" profile.
 */
  profile: Coding;
  _profile?: Element | undefined;

        
      
        
          
  /**
 * Reference to the profile to be used for validation.
 * See http://build.fhir.org/resourcelist.html for complete list of resource types.
 */
  profile?: Array<Reference> | undefined;
  _profile?: Element[] | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the test script.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the test script is the organization or individual primarily responsible for the
 * maintenance and upkeep of the test script. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * test script. This item SHOULD be populated unless the information is available
 * from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this test script is needed and why it has been designed as it
 * has.
 * This element does not describe the usage of the test script. Instead, it
 * provides traceability of ''why'' the resource is either needed or ''why'' it is
 * defined as it is.  This may be used to point to source materials or
 * specifications that drove the structure of this test script.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * A series of required setup operations before tests are executed.
 */
  setup?: BackboneElement | undefined;
  _setup?: Element | undefined;

        
      
        
          
  /**
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It
 * can contain any number of variables.
 */
  action: Array<BackboneElement>;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Evaluates the results of previous operations to determine if the server under
 * test behaves appropriately.
 * In order to evaluate an assertion, the request, response, and results of the
 * most recently executed operation must always be maintained by the test engine.
 */
  assert?: BackboneElement | undefined;
  _assert?: Element | undefined;

        
      
        
          
  /**
 * The FHIRPath expression to evaluate against the source fixture. When
 * compareToSourceId is defined, either compareToSourceExpression or
 * compareToSourcePath must be defined, but not both.
 * Thefhirpath expression to be evaluated against the expected fixture to compare
 * to. Ignored if "assert.value" is used. The evaluation will be done before the
 * assertion is evaluated.
 */
  compareToSourceExpression?: string | undefined;
  _compareToSourceExpression?: Element | undefined;

        
      
        
          
  /**
 * Id of the source fixture used as the contents to be evaluated by either the
 * "source/expression" or "sourceId/path" definition.
 */
  compareToSourceId?: string | undefined;
  _compareToSourceId?: Element | undefined;

        
      
        
          
  /**
 * XPath or JSONPath expression to evaluate against the source fixture. When
 * compareToSourceId is defined, either compareToSourceExpression or
 * compareToSourcePath must be defined, but not both.
 * The XPath or JSONPath expression to be evaluated against the expected fixture to
 * compare to. Ignored if "assert.value" is used. The evaluation will be done
 * before the assertion is evaluated.
 */
  compareToSourcePath?: string | undefined;
  _compareToSourcePath?: Element | undefined;

        
      
        
          
  /**
 * The mime-type contents to compare against the request or response message
 * 'Content-Type' header.
 * If this is specified, then test engine shall confirm that the content-type of
 * the last operation's headers is set to this value.  If "assert.sourceId" element
 * is specified, then the evaluation will be done against the headers mapped to
 * that sourceId (and not the last operation's headers).  If you'd like to have
 * more control over the string, then use 'assert.headerField' instead.
 */
  contentType?: string | undefined;
  _contentType?: Element | undefined;

        
      
        
          
  /**
 * The description would be used by test engines for tracking and reporting
 * purposes.
 * This has no impact on the verification itself.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The direction to use for the assertion.
 * If the direction is specified as "response" (the default), then the processing
 * of this assert is against the received response message. If the direction is
 * specified as "request", then the processing of this assert is against the sent
 * request message.
 */
  direction?: string | undefined;
  _direction?: Element | undefined;

        
      
        
          
  /**
 * The FHIRPath expression to be evaluated against the request or response message
 * contents - HTTP headers and payload.
 * If both "expression" and a "fixtureId" are specified, then the expression will
 * be evaluated against the request or response body mapped to the fixtureId.  If
 * "expression" is specified and a "fixtureId" is not, then the expression will be
 * evaluated against the response body of the last operation.  Test engines are to
 * store the request and response body and headers of the last operation at all
 * times for subsequent assertions.
 */
  expression?: string | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * The HTTP header field name e.g. 'Location'.
 * If "headerField" is specified then "value" must be specified.  If "sourceId" is
 * not specified, then "headerField" will be evaluated against the last operation's
 * response headers.  Test engines are to keep track of the last operation's
 * response body and response headers.
 */
  headerField?: string | undefined;
  _headerField?: Element | undefined;

        
      
        
          
  /**
 * The label would be used for tracking/logging purposes by test engines.
 * This has no impact on the verification itself.
 */
  label?: string | undefined;
  _label?: Element | undefined;

        
      
        
          
  /**
 * The ID of a fixture.  Asserts that the response contains at a minimum the
 * fixture specified by minimumId.
 * Asserts that the response contains all the element/content in another fixture
 * pointed to by minimumId.  This can be a statically defined fixture or one that
 * is dynamically set via responseId.
 */
  minimumId?: string | undefined;
  _minimumId?: Element | undefined;

        
      
        
          
  /**
 * Whether or not the test execution performs validation on the bundle navigation
 * links.
 * Asserts that the Bundle contains first, last, and next links.
 */
  navigationLinks?: boolean | undefined;
  _navigationLinks?: Element | undefined;

        
      
        
          
  /**
 * The operator type defines the conditional behavior of the assert. If not
 * defined, the default is equals.
 * Operators are useful especially for negative testing.  If operator is not
 * specified, then the "equals" operator is assumed; e.g. ```<code>   <assert>
 * <operator value="in" />  <responseCode value="200,201,204" />    </assert>
 * <assert>  <operator value="notEquals" />  <response value="okay"/>   </assert>
 * <assert>  <operator value="greaterThan" />    <responseHeader>     <field
 * value="Content-Length" />     <value value="0" />    </responseHeader/>
 * </assert> </code> ```.
 */
  operator?: string | undefined;
  _operator?: Element | undefined;

        
      
        
          
  /**
 * The XPath or JSONPath expression to be evaluated against the fixture
 * representing the response received from server.
 * If both "path" and a "fixtureId" are specified, then the path will be evaluated
 * against the request or response body mapped to the fixtureId.  If "path" is
 * specified and a "fixtureId" is not, then the path will be evaluated against the
 * response body of the last operation.  Test engines are to store the request and
 * response body and headers of the last operation at all times for subsequent
 * assertions.
 */
  path?: string | undefined;
  _path?: Element | undefined;

        
      
        
          
  /**
 * The request method or HTTP operation code to compare against that used by the
 * client system under test.
 * If "requestMethod" is specified then it will be used in place of "value". The
 * "requestMethod" will evaluate against the last operation's request HTTP
 * operation.
 */
  requestMethod?: string | undefined;
  _requestMethod?: Element | undefined;

        
      
        
          
  /**
 * The value to use in a comparison against the request URL path string.
 * If "requestURL" is specified then it will be used in place of "value". The
 * "requestURL" will evaluate against the last operation's full request URL path
 * string.
 */
  requestURL?: string | undefined;
  _requestURL?: Element | undefined;

        
      
        
          
  /**
 * The type of the resource.  See http://build.fhir.org/resourcelist.html.
 * This will be expected resource type in response body e.g. in read, vread,
 * search, etc.  See http://build.fhir.org/resourcelist.html for complete list of
 * resource types; e.g. <assert > <resourceType value="Patient" </assert>.
 */
  resource?: string | undefined;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * okay | created | noContent | notModified | bad | forbidden | notFound |
 * methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
 * This is a shorter way of achieving similar verifications via
 * "assert.responseCode".  If you need more control, then use "assert.responseCode"
 * e.g. <assert>  <contentType value="json" />  <response value="okay"/>
 * </assert>.
 */
  response?: string | undefined;
  _response?: Element | undefined;

        
      
        
          
  /**
 * The value of the HTTP response code to be tested.
 * To be used with "operator" attribute value. Asserts that the response code
 * equals this value if "operator" is not specified.   If the operator is "in" or
 * "notIn" then the responseCode would be a comma-separated list of values e.g.
 * "200,201". Otherwise, it's expected to be a numeric value.   If "fixture" is not
 * specified, then the "responseBodyId" value of the last operation is assumed.
 */
  responseCode?: string | undefined;
  _responseCode?: Element | undefined;

        
      
        
          
  /**
 * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
 * This can be a statically defined fixture (at the top of the testscript) or a
 * dynamically set fixture created by responseId of the action.operation element.
 */
  sourceId?: id | undefined;
  _sourceId?: Element | undefined;

        
      
        
          
  /**
 * The ID of the Profile to validate against.
 * The ID of a Profile fixture. Asserts that the response is valid according to the
 * Profile specified by validateProfileId.
 */
  validateProfileId?: id | undefined;
  _validateProfileId?: Element | undefined;

        
      
        
          
  /**
 * The value to compare to.
 * The string-representation of a number, string, or boolean that is expected.
 * Test engines do have to look for placeholders (${}) and replace the variable
 * placeholders with the variable values at runtime before comparing this value to
 * the actual value.
 */
  value?: string | undefined;
  _value?: Element | undefined;

        
      
        
          
  /**
 * Whether or not the test execution will produce a warning only on error for this
 * assert.
 * If this element is specified and it is true, then assertion failures can be
 * logged by test engine but should not stop the test script execution from
 * proceeding.  There are likely cases where the spec is not clear on what should
 * happen. If the spec says something is optional (maybe a response header for
 * example), but a server doesn’t do it, we could choose to issue a warning.
 */
  warningOnly: boolean;
  _warningOnly?: Element | undefined;

        
      
        
          
  /**
 * The operation to perform.
 */
  operation?: BackboneElement | undefined;
  _operation?: Element | undefined;

        
      
        
          
  /**
 * The mime-type to use for RESTful operation in the 'Accept' header.
 * If this is specified, then test engine shall set the 'Accept' header to the
 * corresponding value.  If you'd like to explicitly set the 'Accept' to some other
 * value then use the 'requestHeader' element.
 */
  accept?: string | undefined;
  _accept?: Element | undefined;

        
      
        
          
  /**
 * The mime-type to use for RESTful operation in the 'Content-Type' header.
 * If this is specified, then test engine shall set the 'Content-Type' header to
 * the corresponding value.  If you'd like to explicitly set the 'Content-Type' to
 * some other value then use the 'requestHeader' element.
 */
  contentType?: string | undefined;
  _contentType?: Element | undefined;

        
      
        
          
  /**
 * The description would be used by test engines for tracking and reporting
 * purposes.
 * This has no impact on the verification itself.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The server where the request message is destined for.  Must be one of the server
 * numbers listed in TestScript.destination section.
 * If multiple TestScript.destination elements are defined and
 * operation.destination is undefined, test engine will report an error as it
 * cannot determine what destination to use for the exchange.
 */
  destination?: number | undefined;
  _destination?: Element | undefined;

        
      
        
          
  /**
 * Whether or not to implicitly send the request url in encoded format. The default
 * is true to match the standard RESTful client behavior. Set to false when
 * communicating with a server that does not support encoded url paths.
 */
  encodeRequestUrl: boolean;
  _encodeRequestUrl?: Element | undefined;

        
      
        
          
  /**
 * The label would be used for tracking/logging purposes by test engines.
 * This has no impact on the verification itself.
 */
  label?: string | undefined;
  _label?: Element | undefined;

        
      
        
          
  /**
 * The HTTP method the test engine MUST use for this operation regardless of any
 * other operation details.
 * The primary purpose of the explicit HTTP method is support of  HTTP POST method
 * invocation of the FHIR search. Other uses will include support of negative
 * testing.
 */
  method?: string | undefined;
  _method?: Element | undefined;

        
      
        
          
  /**
 * The server where the request message originates from.  Must be one of the server
 * numbers listed in TestScript.origin section.
 * If absent, test engine will send the message.  When present, test engine will
 * not send the request message but will wait for the request message to be sent
 * from this origin server.
 */
  origin?: number | undefined;
  _origin?: Element | undefined;

        
      
        
          
  /**
 * Path plus parameters after [type].  Used to set parts of the request URL
 * explicitly.
 * If "url" element is specified, then "targetId", "params", and "resource"
 * elements will be ignored as "url" element will have everything needed for
 * constructing the request url.  If "params" element is specified, then "targetId"
 * element is ignored.  For FHIR operations that require a resource (e.g. "read"
 * and "vread" operations), the "resource" element must be specified when "params"
 * element is specified.  If "url" and "params" elements are absent, then the
 * request url will be constructed from "targetId" fixture if present.  For "read"
 * operation, the resource and id values will be extracted from "targetId" fixture
 * and used to construct the url.  For "vread" and "history" operations, the
 * versionId value will also be used.   Test engines would append whatever is
 * specified for "params" to the URL after the resource type without tampering with
 * the string (beyond encoding the URL for HTTP).  The "params" element does not
 * correspond exactly to "search parameters".  Nor is it the "path".  It
 * corresponds to the part of the URL that comes after the [type] (when "resource"
 * element is specified); e.g. It corresponds to "/[id]/_history/[vid]
 * {?_format=[mime-type]}" in the following operation: GET
 * [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have
 * to look for placeholders (${}) and replace the variable placeholders with the
 * variable values at runtime before sending the request.
 */
  params?: string | undefined;
  _params?: Element | undefined;

        
      
        
          
  /**
 * Header elements would be used to set HTTP headers.
 * This gives control to test-script writers to set headers explicitly based on
 * test requirements.  It will allow for testing using:  - "If-Modified-Since" and
 * "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 -
 * "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional
 * Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 -
 * Invalid "Content-Type" header for negative testing. - etc.
 */
  requestHeader?: Array<BackboneElement> | undefined;
  _requestHeader?: Element[] | undefined;

        
      
        
          
  /**
 * The HTTP header field e.g. "Accept".
 * If header element is specified, then field is required.
 */
  field: string;
  _field?: Element | undefined;

        
      
        
          
  /**
 * The value of the header e.g. "application/fhir+xml".
 * If header element is specified, then value is required.  No conversions will be
 * done by the test engine e.g. "xml" to "application/fhir+xml".  The values will
 * be set in HTTP headers "as-is".  Test engines do have to look for placeholders
 * (${}) and replace the variable placeholders with the variable values at runtime
 * before sending the request.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The fixture id (maybe new) to map to the request.
 * If a requestId is supplied, then the resulting request (both headers and body)
 * is mapped to the fixture ID (which may be entirely new and previously
 * undeclared) designated by "requestId".  If requestId is not specified, it is the
 * test engine's responsibility to store the request and use it as the requestId in
 * subsequent assertions when assertion path and/or headerField is specified,
 * direction is equal to request, and the requestId in not specified.
 */
  requestId?: id | undefined;
  _requestId?: Element | undefined;

        
      
        
          
  /**
 * The type of the resource.  See http://build.fhir.org/resourcelist.html.
 * If "url" element is specified, then "targetId", "params", and "resource"
 * elements will be ignored as "url" element will have everything needed for
 * constructing the request url.  If "params" element is specified, then "targetId"
 * element is ignored. For FHIR operations that require a resource (e.g. "read" and
 * "vread" operations), the "resource" element must be specified when "params"
 * element is specified.  If "url" and "params" elements are absent, then the
 * request url will be constructed from "targetId" fixture if present. For "read"
 * operation, the resource and id values will be extracted from "targetId" fixture
 * and used to construct the url. For "vread" and "history" operations, the
 * versionId value will also be used.
 */
  resource?: string | undefined;
  _resource?: Element | undefined;

        
      
        
          
  /**
 * The fixture id (maybe new) to map to the response.
 * If a responseId is supplied, and the server responds, then the resulting
 * response (both headers and body) is mapped to the fixture ID (which may be
 * entirely new and previously undeclared) designated by "responseId".  If
 * responseId is not specified, it is the test engine's responsibility to store the
 * response and use it as the responseId in subsequent assertions when assertion
 * path and/or headerField is specified and the responseId is not specified.
 */
  responseId?: id | undefined;
  _responseId?: Element | undefined;

        
      
        
          
  /**
 * The id of the fixture used as the body of a PUT or POST request.
 */
  sourceId?: id | undefined;
  _sourceId?: Element | undefined;

        
      
        
          
  /**
 * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
 * If "url" element is specified, then "targetId", "params", and "resource"
 * elements will be ignored as "url" element will have everything needed for
 * constructing the request url.  If "params" element is specified, then "targetId"
 * element is ignored.  For FHIR operations that require a resource (e.g. "read"
 * and "vread" operations), the "resource" element must be specified when "params"
 * element is specified.  If "url" and "params" elements are absent, then the
 * request url will be constructed from "targetId" fixture if present.  For "read"
 * operation, the resource and id values will be extracted from "targetId" fixture
 * and used to construct the url.  For "vread" and "history" operations, the
 * versionId value will also be used.
 */
  targetId?: id | undefined;
  _targetId?: Element | undefined;

        
      
        
          
  /**
 * Server interaction or operation type.
 * See http://build.fhir.org/http.html for list of server interactions.
 */
  type?: Coding | undefined;
  _type?: Element | undefined;

        
      
        
          
  /**
 * Complete request URL.
 * Used to set the request URL explicitly.  If "url" element is defined, then
 * "targetId", "resource", and "params" elements will be ignored.  Test engines
 * would use whatever is specified in "url" without tampering with the string
 * (beyond encoding the URL for HTTP).  Test engines do have to look for
 * placeholders (${}) and replace the variable placeholders with the variable
 * values at runtime before sending the request.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The status of this test script. Enables tracking the life-cycle of the content.
 * Allows filtering of test scripts that are appropriate for use versus not.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A series of operations required to clean up after all the tests are executed
 * (successfully or otherwise).
 */
  teardown?: BackboneElement | undefined;
  _teardown?: Element | undefined;

        
      
        
          
  /**
 * The teardown action will only contain an operation.
 * An action should contain either an operation or an assertion but not both.  It
 * can contain any number of variables.
 */
  action: Array<BackboneElement>;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * An operation would involve a REST request to a server.
 */
  operation: ;
  _operation?: Element | undefined;

        
      
        
          
  /**
 * A test in this script.
 */
  test?: Array<BackboneElement> | undefined;
  _test?: Element[] | undefined;

        
      
        
          
  /**
 * Action would contain either an operation or an assertion.
 * An action should contain either an operation or an assertion but not both.  It
 * can contain any number of variables.
 */
  action: Array<BackboneElement>;
  _action?: Element[] | undefined;

        
      
        
          
  /**
 * Evaluates the results of previous operations to determine if the server under
 * test behaves appropriately.
 * In order to evaluate an assertion, the request, response, and results of the
 * most recently executed operation must always be maintained by the test engine.
 */
  assert?: undefined | undefined;
  _assert?: Element | undefined;

        
      
        
          
  /**
 * An operation would involve a REST request to a server.
 */
  operation?: undefined | undefined;
  _operation?: Element | undefined;

        
      
        
          
  /**
 * A short description of the test used by test engines for tracking and reporting
 * purposes.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The name of this test used for tracking/logging purposes by test engines.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the test script.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this test script when it is referenced
 * in a specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this test script is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the test script is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url: string;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate test script
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * Variable is set based either on element value in response body or on header
 * field value in the response headers.
 * Variables would be set based either on XPath/JSONPath expressions against
 * fixtures (static and response), or headerField evaluations against response
 * headers. If variable evaluates to nodelist or anything other than a primitive
 * value, then test engine would report an error.  Variables would be used to
 * perform clean replacements in "operation.params",
 * "operation.requestHeader.value", and "operation.url" element values during
 * operation calls and in "assert.value" during assertion evaluations. This limits
 * the places that test engines would need to look for placeholders "${}".
 * Variables are scoped to the whole script. They are NOT evaluated at declaration.
 * They are evaluated by test engine when used for substitutions in
 * "operation.params", "operation.requestHeader.value", and "operation.url" element
 * values during operation calls and in "assert.value" during assertion
 * evaluations.  See example testscript-search.xml.
 */
  variable?: Array<BackboneElement> | undefined;
  _variable?: Element[] | undefined;

        
      
        
          
  /**
 * A default, hard-coded, or user-defined value for this variable.
 * The purpose of this element is to allow for a pre-defined value that can be used
 * as a default or as an override value. Test engines can optionally use this as a
 * placeholder for user-defined execution time values.
 */
  defaultValue?: string | undefined;
  _defaultValue?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the variable and its purpose.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * The FHIRPath expression to evaluate against the fixture body. When variables are
 * defined, only one of either expression, headerField or path must be specified.
 * If headerField is defined, then the variable will be evaluated against the
 * headers that sourceId is pointing to.  If expression or path is defined, then
 * the variable will be evaluated against the fixture body that sourceId is
 * pointing to.  It is an error to define any combination of expression,
 * headerField and path.
 */
  expression?: string | undefined;
  _expression?: Element | undefined;

        
      
        
          
  /**
 * Will be used to grab the HTTP header field value from the headers that sourceId
 * is pointing to.
 * If headerField is defined, then the variable will be evaluated against the
 * headers that sourceId is pointing to.  If path is defined, then the variable
 * will be evaluated against the fixture body that sourceId is pointing to.  It is
 * an error to define both headerField and path.
 */
  headerField?: string | undefined;
  _headerField?: Element | undefined;

        
      
        
          
  /**
 * Displayable text string with hint help information to the user when entering a
 * default value.
 */
  hint?: string | undefined;
  _hint?: Element | undefined;

        
      
        
          
  /**
 * Descriptive name for this variable.
 * Placeholders would contain the variable name wrapped in ${} in
 * "operation.params", "operation.requestHeader.value", and "operation.url"
 * elements.  These placeholders would need to be replaced by the variable value
 * before the operation is executed.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
  /**
 * XPath or JSONPath to evaluate against the fixture body.  When variables are
 * defined, only one of either expression, headerField or path must be specified.
 * If headerField is defined, then the variable will be evaluated against the
 * headers that sourceId is pointing to.  If expression or path is defined, then
 * the variable will be evaluated against the fixture body that sourceId is
 * pointing to.  It is an error to define any combination of expression,
 * headerField and path.
 */
  path?: string | undefined;
  _path?: Element | undefined;

        
      
        
          
  /**
 * Fixture to evaluate the XPath/JSONPath expression or the headerField  against
 * within this variable.
 * This can be a statically defined fixture (at the top of the TestScript) or a
 * dynamically set fixture created by responseId of the `action.operation` element.
 */
  sourceId?: id | undefined;
  _sourceId?: Element | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the test script when it
 * is referenced in a specification, model, design or instance. This is an
 * arbitrary value managed by the test script author and is not expected to be
 * globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a
 * managed version is not available. There is also no expectation that versions can
 * be placed in a lexicographical sequence.
 * There may be different test script instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the test script with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * Timing
 * 
 * Base StructureDefinition for Timing Type: Specifies an event that may occur
 * multiple times. Timing schedules are used to record when things are planned,
 * expected or requested to occur. The most common usage is in dosage instructions
 * for medications. They are also used when planning care of various kinds, and may
 * be used for reporting the schedule to which past regular activities were carried
 * out.
 * 
 * @see {@link http://hl7.org/fhir/R4B/Timing.html}
 */
    export interface Timing extends BackboneElement {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A code for the timing schedule (or just text in code.text). Some codes such as
 * BID are ubiquitous, but many institutions define their own additional codes. If
 * a code is provided, the code is understood to be a complete statement of
 * whatever is specified in the structured timing data, and either the code or the
 * data may be used to interpret the Timing, with the exception that .repeat.bounds
 * still applies over the code (and is not contained in the code).
 * BID etc. are defined as 'at institutionally specified times'. For example, an
 * institution may choose that BID is "always at 7am and 6pm".  If it is
 * inappropriate for this choice to be made, the code BID should not be used.
 * Instead, a distinct organization-specific code should be used in place of the
 * HL7-defined BID code and/or a structured representation should be used (in this
 * case, specifying the two event times).
 */
  code?: CodeableConcept | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Identifies specific times when the event occurs.
 */
  event?: Array<string> | undefined;
  _event?: Element[] | undefined;

        
      
        
          
  /**
 * A set of rules that describe when the event is scheduled.
 */
  repeat?: Element | undefined;
  _repeat?: Element | undefined;

        
      
        
          
            
  /**
 * Either a duration for the length of the timing schedule, a range of possible
 * length, or outer bounds for start and/or end limits of the timing schedule.
 */
  boundsDuration?: Duration | undefined;
  _boundsDuration?: Element | undefined;

          
            
  /**
 * Either a duration for the length of the timing schedule, a range of possible
 * length, or outer bounds for start and/or end limits of the timing schedule.
 */
  boundsRange?: Range | undefined;
  _boundsRange?: Element | undefined;

          
            
  /**
 * Either a duration for the length of the timing schedule, a range of possible
 * length, or outer bounds for start and/or end limits of the timing schedule.
 */
  boundsPeriod?: Period | undefined;
  _boundsPeriod?: Element | undefined;

          
        
      
        
          
  /**
 * A total count of the desired number of repetitions across the duration of the
 * entire timing specification. If countMax is present, this element indicates the
 * lower bound of the allowed range of count values.
 * If you have both bounds and count, then this should be understood as within the
 * bounds period, until count times happens.
 */
  count?: number | undefined;
  _count?: Element | undefined;

        
      
        
          
  /**
 * If present, indicates that the count is a range - so to perform the action
 * between [count] and [countMax] times.
 */
  countMax?: number | undefined;
  _countMax?: Element | undefined;

        
      
        
          
  /**
 * If one or more days of week is provided, then the action happens only on the
 * specified day(s).
 * If no days are specified, the action is assumed to happen every day as otherwise
 * specified. The elements frequency and period cannot be used as well as
 * dayOfWeek.
 */
  dayOfWeek?: Array<string> | undefined;
  _dayOfWeek?: Element[] | undefined;

        
      
        
          
  /**
 * How long this thing happens for when it happens. If durationMax is present, this
 * element indicates the lower bound of the allowed range of the duration.
 * For some events the duration is part of the definition of the event (e.g. IV
 * infusions, where the duration is implicit in the specified quantity and rate).
 * For others, it's part of the timing specification (e.g. exercise).
 */
  duration?: number | undefined;
  _duration?: Element | undefined;

        
      
        
          
  /**
 * If present, indicates that the duration is a range - so to perform the action
 * between [duration] and [durationMax] time length.
 * For some events the duration is part of the definition of the event (e.g. IV
 * infusions, where the duration is implicit in the specified quantity and rate).
 * For others, it's part of the timing specification (e.g. exercise).
 */
  durationMax?: number | undefined;
  _durationMax?: Element | undefined;

        
      
        
          
  /**
 * The units of time for the duration, in UCUM units.
 */
  durationUnit?: string | undefined;
  _durationUnit?: Element | undefined;

        
      
        
          
  /**
 * The number of times to repeat the action within the specified period. If
 * frequencyMax is present, this element indicates the lower bound of the allowed
 * range of the frequency.
 */
  frequency?: number | undefined;
  _frequency?: Element | undefined;

        
      
        
          
  /**
 * If present, indicates that the frequency is a range - so to repeat between
 * [frequency] and [frequencyMax] times within the period or period range.
 */
  frequencyMax?: number | undefined;
  _frequencyMax?: Element | undefined;

        
      
        
          
  /**
 * The number of minutes from the event. If the event code does not indicate
 * whether the minutes is before or after the event, then the offset is assumed to
 * be after the event.
 */
  offset?: unsignedInt | undefined;
  _offset?: Element | undefined;

        
      
        
          
  /**
 * Indicates the duration of time over which repetitions are to occur; e.g. to
 * express "3 times per day", 3 would be the frequency and "1 day" would be the
 * period. If periodMax is present, this element indicates the lower bound of the
 * allowed range of the period length.
 */
  period?: number | undefined;
  _period?: Element | undefined;

        
      
        
          
  /**
 * If present, indicates that the period is a range from [period] to [periodMax],
 * allowing expressing concepts such as "do this once every 3-5 days.
 */
  periodMax?: number | undefined;
  _periodMax?: Element | undefined;

        
      
        
          
  /**
 * The units of time for the period in UCUM units.
 */
  periodUnit?: string | undefined;
  _periodUnit?: Element | undefined;

        
      
        
          
  /**
 * Specified time of day for action to take place.
 * When time of day is specified, it is inferred that the action happens every day
 * (as filtered by dayofWeek) on the specified times. The elements when, frequency
 * and period cannot be used as well as timeOfDay.
 */
  timeOfDay?: Array<time> | undefined;
  _timeOfDay?: Element[] | undefined;

        
      
        
          
  /**
 * An approximate time period during the day, potentially linked to an event of
 * daily living that indicates when the action should occur.
 * When more than one event is listed, the event is tied to the union of the
 * specified events.
 */
  when?: Array<string> | undefined;
  _when?: Element[] | undefined;

        
      
    }

  


  


  


  


  


  
    /**
 * TriggerDefinition
 * 
 * Base StructureDefinition for TriggerDefinition Type: A description of a
 * triggering event. Triggering events can be named events, data events, or
 * periodic, as determined by the type element.
 * 
 * @see {@link http://hl7.org/fhir/R4B/TriggerDefinition.html}
 */
    export interface TriggerDefinition extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A boolean-valued expression that is evaluated in the context of the container of
 * the trigger definition and returns whether or not the trigger fires.
 * This element can be only be specified for data type triggers and provides
 * additional semantics for the trigger. The context available within the condition
 * is based on the type of data event. For all events, the current resource will be
 * available as context. In addition, for modification events, the previous
 * resource will also be available. The expression may be inlined, or may be a
 * simple absolute URI, which is a reference to a named expression within a logic
 * library referenced by a library element or extension within the containing
 * resource. If the expression is a FHIR Path expression, it evaluates in the
 * context of a resource of one of the type identified in the data requirement, and
 * may also refer to the variable %previous for delta comparisons on events of type
 * data-changed, data-modified, and data-deleted which will always have the same
 * type.
 */
  condition?: Expression | undefined;
  _condition?: Element | undefined;

        
      
        
          
  /**
 * The triggering data of the event (if this is a data trigger). If more than one
 * data is requirement is specified, then all the data requirements must be true.
 * This element shall be present for any data type trigger.
 */
  data?: Array<DataRequirement> | undefined;
  _data?: Element[] | undefined;

        
      
        
          
  /**
 * A formal name for the event. This may be an absolute URI that identifies the
 * event formally (e.g. from a trigger registry), or a simple relative URI that
 * identifies the event in a local context.
 * An event name can be provided for all event types, but is required for named
 * events. If a name is provided for a type other than named events, it is
 * considered to be a shorthand for the semantics described by the formal
 * description of the event.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
            
  /**
 * The timing of the event (if this is a periodic trigger).
 */
  timingTiming?: Timing | undefined;
  _timingTiming?: Element | undefined;

          
            
  /**
 * The timing of the event (if this is a periodic trigger).
 */
  timingReference?: Reference | undefined;
  _timingReference?: Element | undefined;

          
            
  /**
 * The timing of the event (if this is a periodic trigger).
 */
  timingDate?: string | undefined;
  _timingDate?: Element | undefined;

          
            
  /**
 * The timing of the event (if this is a periodic trigger).
 */
  timingDateTime?: string | undefined;
  _timingDateTime?: Element | undefined;

          
        
      
        
          
  /**
 * The type of triggering event.
 */
  type: string;
  _type?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  
    /**
 * UsageContext
 * 
 * Base StructureDefinition for UsageContext Type: Specifies clinical/business/etc.
 * metadata that can be used to retrieve, index and/or categorize an artifact. This
 * metadata can either be specific to the applicable population (e.g., age
 * category, DRG) or the specific context of care (e.g., venue, care setting,
 * provider of care).
 * 
 * @see {@link http://hl7.org/fhir/R4B/UsageContext.html}
 */
    export interface UsageContext extends Element {
      
      readonly resourceType: string;
      

      
        
          
  /**
 * A code that identifies the type of context being specified by this usage
 * context.
 */
  code: Coding;
  _code?: Element | undefined;

        
      
        
          
            
  /**
 * A value that defines the context specified in this context of use. The
 * interpretation of the value is defined by the code.
 */
  valueCodeableConcept?: CodeableConcept | undefined;
  _valueCodeableConcept?: Element | undefined;

          
            
  /**
 * A value that defines the context specified in this context of use. The
 * interpretation of the value is defined by the code.
 */
  valueQuantity?: Quantity | undefined;
  _valueQuantity?: Element | undefined;

          
            
  /**
 * A value that defines the context specified in this context of use. The
 * interpretation of the value is defined by the code.
 */
  valueRange?: Range | undefined;
  _valueRange?: Element | undefined;

          
            
  /**
 * A value that defines the context specified in this context of use. The
 * interpretation of the value is defined by the code.
 */
  valueReference?: Reference | undefined;
  _valueReference?: Element | undefined;

          
        
      
    }

  


  


  


  


  


  
    /**
 * ValueSet
 * 
 * A ValueSet resource instance specifies a set of codes drawn from one or more
 * code systems, intended for use in a particular context. Value sets link between
 * [[[CodeSystem]]] definitions and their use in [coded
 * elements](terminologies.html).
 * 
 * @see {@link http://hl7.org/fhir/R4B/ValueSet.html}
 */
    export interface ValueSet extends DomainResource {
      
      readonly resourceType: "ValueSet";
      

      
        
          
  /**
 * A set of criteria that define the contents of the value set by including or
 * excluding codes selected from the specified code system(s) that the value set
 * draws from. This is also known as the Content Logical Definition (CLD).
 */
  compose?: BackboneElement | undefined;
  _compose?: Element | undefined;

        
      
        
          
  /**
 * Exclude one or more codes from the value set based on code system filters and/or
 * other value sets.
 * Usually this is used to selectively exclude codes that were included by
 * subsumption in the inclusions. Any display names specified for the codes are
 * ignored.
 */
  exclude?: Array<undefined> | undefined;
  _exclude?: Element[] | undefined;

        
      
        
          
  /**
 * Whether inactive codes - codes that are not approved for current use - are in
 * the value set. If inactive = true, inactive codes are to be included in the
 * expansion, if inactive = false, the inactive codes will not be included in the
 * expansion. If absent, the behavior is determined by the implementation, or by
 * the applicable $expand parameters (but generally, inactive codes would be
 * expected to be included).
 * Note that in the FHIR terminology framework, "deprecated" does not mean
 * inactive, but in some code systems, e.g. LOINC, "deprecated" does mean inactive.
 * Code systems should define what codes are considered to be inactive. If this is
 * not clearly defined (including in the FHIR code system resource), then all codes
 * are assumed to be active.

The Value Set Definition specification defines an
 * ActiveOnly element, which is the reverse of this element e.g.
 * (ValueSet.compose.inactive=FALSE) is the same as (VSD.ActiveOnly=TRUE).
 */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;

        
      
        
          
  /**
 * Include one or more codes from a code system or other value set(s).
 * All the conditions in an include must be true. If a system is listed, all the
 * codes from the system are listed. If one or more filters are listed, all of the
 * filters must apply. If one or more value sets are listed, the codes must be in
 * all the value sets. E.g. each include is 'include all the codes that meet all
 * these conditions'.
 */
  include: Array<BackboneElement>;
  _include?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies a concept to be included or excluded.
 * The list of concepts is considered ordered, though the order might not have any
 * particular significance. Typically, the order of an expansion follows that
 * defined in the compose element.
 */
  concept?: Array<BackboneElement> | undefined;
  _concept?: Element[] | undefined;

        
      
        
          
  /**
 * Specifies a code for the concept to be included or excluded.
 * Expressions are allowed if defined by the underlying code system.
 */
  code: string;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Additional representations for this concept when used in this value set - other
 * languages, aliases, specialized purposes, used for particular purposes, etc.
 * Concepts have both a ```display``` and an array of ```designation```. The
 * display is equivalent to a special designation with an implied
 * ```designation.use``` of "primary code" and a language equal to the [Resource
 * Language](resource.html#language).
 */
  designation?: Array<BackboneElement> | undefined;
  _designation?: Element[] | undefined;

        
      
        
          
  /**
 * The language this designation is defined for.
 * In the absence of a language, the resource language applies.
 */
  language?: string | undefined;
  _language?: Element | undefined;

        
      
        
          
  /**
 * A code that represents types of uses of designations.
 * If no use is provided, the designation can be assumed to be suitable for general
 * display to a human user.
 */
  use?: Coding | undefined;
  _use?: Element | undefined;

        
      
        
          
  /**
 * The text value for this designation.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * The text to display to the user for this concept in the context of this
 * valueset. If no display is provided, then applications using the value set use
 * the display specified for the code by the system.
 * The value set resource allows for an alternative display to be specified for
 * when this concept is used in this particular value set. See notes in the value
 * set narrative about the correct use of this element.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * Select concepts by specify a matching criterion based on the properties
 * (including relationships) defined by the system, or on filters defined by the
 * system. If multiple filters are specified, they SHALL all be true.
 * Selecting codes by specifying filters based on properties is only possible where
 * the underlying code system defines appropriate properties. Note that in some
 * cases, the underlying code system defines the logical concepts but not the
 * literal codes for the concepts. In such cases, the literal definitions may be
 * provided by a third party.
 */
  filter?: Array<BackboneElement> | undefined;
  _filter?: Element[] | undefined;

        
      
        
          
  /**
 * The kind of operation to perform as a part of the filter criteria.
 * In case filter.property represents a property of the system, the operation
 * applies to the selected property. In case filter.property represents a filter of
 * the system, the operation SHALL match one of the CodeSystem.filter.operator
 * values.
 */
  op: string;
  _op?: Element | undefined;

        
      
        
          
  /**
 * A code that identifies a property or a filter defined in the code system.
 */
  property: string;
  _property?: Element | undefined;

        
      
        
          
  /**
 * The match value may be either a code defined by the system, or a string value,
 * which is a regex match on the literal string of the property value  (if the
 * filter represents a property defined in CodeSystem) or of the system filter
 * value (if the filter represents a filter defined in CodeSystem) when the
 * operation is 'regex', or one of the values (true and false), when the operation
 * is 'exists'.
 * Use regex matching with care - full regex matching on every SNOMED CT term is
 * prohibitive, for example.
 */
  value: string;
  _value?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI which is the code system from which the selected codes come
 * from.
 * If there are no codes or filters, the entire code system is included. Note that
 * the set of codes that are included may contain abstract codes. See
 * ''Coding.system'' for further documentation about the correct value for the
 * system element.
 */
  system?: string | undefined;
  _system?: Element | undefined;

        
      
        
          
  /**
 * Selects the concepts found in this value set (based on its value set
 * definition). This is an absolute URI that is a reference to ValueSet.url.  If
 * multiple value sets are specified this includes the union of the contents of all
 * of the referenced value sets.
 * The value set URI is either a logical reference to a defined value set such as a
 * [SNOMED CT reference set](snomedct.html#implicit), or a direct reference to a
 * value set definition using ValueSet.url. The reference might not refer to an
 * actual FHIR ValueSet resource; in this case, whatever is referred to is an
 * implicit definition of a value set that needs to be clear about how versions are
 * resolved.
 */
  valueSet?: Array<string> | undefined;
  _valueSet?: Element[] | undefined;

        
      
        
          
  /**
 * The version of the code system that the codes are selected from, or the special
 * version '*' for all versions.
 * This is used when selecting the descendants of a concept - they may change
 * between versions. If no version is specified, then the exact contents of the
 * value set might not be known until a context of use binds it to a particular
 * version. The special value '*' means all versions; It is at server discretion
 * regarding expansions and which versions must be supported.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * The Locked Date is  the effective date that is used to determine the version of
 * all referenced Code Systems and Value Set Definitions included in the compose
 * that are not already tied to a specific version.
 * With a defined lockedDate the value set is considered "Locked". Otherwise, the
 * value set may have different expansions as underlying code systems and/or value
 * sets evolve.  The interpretation of lockedDate is often dependent on the context
 * - e.g. a SNOMED CT derived value set with a lockedDate will have a different
 * expansion in USA than in UK.  If a value set specifies a version for include and
 * exclude statements, and also specifies a locked date, the specified versions
 * need to be available that date, or the value set will not be usable.
 */
  lockedDate?: string | undefined;
  _lockedDate?: Element | undefined;

        
      
        
          
  /**
 * Contact details to assist a user in finding and communicating with the
 * publisher.
 * May be a web site, an email address, a telephone number, etc.
 */
  contact?: Array<ContactDetail> | undefined;
  _contact?: Element[] | undefined;

        
      
        
          
  /**
 * A copyright statement relating to the value set and/or its contents. Copyright
 * statements are generally legal restrictions on the use and publishing of the
 * value set.
 * nullFrequently, the copyright differs between the value set and the codes that
 * are included. The copyright statement should clearly differentiate between these
 * when required.
 */
  copyright?: string | undefined;
  _copyright?: Element | undefined;

        
      
        
          
  /**
 * The date (and optionally time) when the value set was created or revised (e.g.
 * the 'content logical definition').
 * Note that this is not the same as the resource last-modified-date, since the
 * resource may be a secondary representation of the value set. Additional specific
 * dates may be added as extensions or be found by consulting Provenances
 * associated with past versions of the resource.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * A free text natural language description of the value set from a consumer's
 * perspective. The textual description specifies the span of meanings for concepts
 * to be included within the Value Set Expansion, and also may specify the intended
 * use and limitations of the Value Set.
 * This description can be used to capture details such as why the value set was
 * built, comments about misuse, instructions for clinical use and interpretation,
 * literature references, examples from the paper world, etc. It is not a rendering
 * of the value set as conveyed in the 'text' field of the resource itself. This
 * item SHOULD be populated unless the information is available from context (e.g.
 * the language of the value set is presumed to be the predominant language in the
 * place the value set was created).The description is not intended to describe the
 * semantics of the Value Set - there are no intrinsic semantics separate from the
 * codes contained in its expansion. The description should capture its intended
 * use, which is needed for ensuring integrity for its use in models across future
 * changes. A description should be provided unless the value set is a contained
 * resource (e.g. an anonymous value set in a profile). Most registries will
 * require a description.
 */
  description?: string | undefined;
  _description?: Element | undefined;

        
      
        
          
  /**
 * A value set can also be "expanded", where the value set is turned into a simple
 * collection of enumerated codes. This element holds the expansion, if it has been
 * performed.
 * Expansion is performed to produce a collection of codes that are ready to use
 * for data entry or validation. Value set expansions are always considered to be
 * stateless - they are a record of the set of codes in the value set at a point in
 * time under a given set of conditions, and are not subject to ongoing
 * maintenance.

Expansion.parameter is  a simplified list of parameters - a subset
 * of the features of the [Parameters](parameters.html) resource.
 */
  expansion?: BackboneElement | undefined;
  _expansion?: Element | undefined;

        
      
        
          
  /**
 * The codes that are contained in the value set expansion.
 */
  contains?: Array<BackboneElement> | undefined;
  _contains?: Element[] | undefined;

        
      
        
          
  /**
 * If true, this entry is included in the expansion for navigational purposes, and
 * the user cannot select the code directly as a proper value.
 * This should not be understood to exclude its use for searching (e.g. by
 * subsumption testing). The client should know whether it is appropriate for the
 * user to select an abstract code or not.
 */
  abstract?: boolean | undefined;
  _abstract?: Element | undefined;

        
      
        
          
  /**
 * The code for this item in the expansion hierarchy. If this code is missing the
 * entry in the hierarchy is a place holder (abstract) and does not represent a
 * valid code in the value set.
 */
  code?: string | undefined;
  _code?: Element | undefined;

        
      
        
          
  /**
 * Other codes and entries contained under this entry in the hierarchy.
 * If the expansion uses this element, there is  no implication about the logical
 * relationship between them, and the  structure cannot be used for logical
 * inferencing. The structure  exists to provide navigational assistance for
 * helping human users to  locate codes in the expansion.
 */
  contains?: Array<undefined> | undefined;
  _contains?: Element[] | undefined;

        
      
        
          
  /**
 * Additional representations for this item - other languages, aliases, specialized
 * purposes, used for particular purposes, etc. These are relevant when the
 * conditions of the expansion do not fix to a single correct representation.
 * The designations provided must be based on the value set and code system
 * definitions.
 */
  designation?: Array<undefined> | undefined;
  _designation?: Element[] | undefined;

        
      
        
          
  /**
 * The recommended display for this item in the expansion.
 */
  display?: string | undefined;
  _display?: Element | undefined;

        
      
        
          
  /**
 * If the concept is inactive in the code system that defines it. Inactive codes
 * are those that are no longer to be used, but are maintained by the code system
 * for understanding legacy data. It might not be known or specified whether an
 * concept is inactive (and it may depend on the context of use).
 * This should only have a value if the concept is inactive.
 */
  inactive?: boolean | undefined;
  _inactive?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI which is the code system in which the code for this item in the
 * expansion is defined.
 */
  system?: string | undefined;
  _system?: Element | undefined;

        
      
        
          
  /**
 * The version of the code system from this code was taken. Note that a
 * well-maintained code system does not need the version reported, because the
 * meaning of codes is consistent across versions. However this cannot consistently
 * be assured, and when the meaning is not guaranteed to be consistent, the version
 * SHOULD be exchanged.
 * The exact value of the version string is specified by the system from which the
 * code is derived.
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
        
          
  /**
 * An identifier that uniquely identifies this expansion of the valueset, based on
 * a unique combination of the provided parameters, the system default parameters,
 * and the underlying system code system versions etc. Systems may re-use the same
 * identifier as long as those factors remain the same, and the expansion is the
 * same, but are not required to do so. This is a business identifier.
 * Typically, this uri is a UUID (e.g.
 * urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd).
 */
  identifier?: string | undefined;
  _identifier?: Element | undefined;

        
      
        
          
  /**
 * If paging is being used, the offset at which this resource starts.  I.e. this
 * resource is a partial view into the expansion. If paging is not being used, this
 * element SHALL NOT be present.
 * Paging only applies to flat expansions. If a filter is applied, the count is the
 * number of concepts that matched the filter, not the number of concepts in an
 * unfiltered view of the expansion.
 */
  offset?: number | undefined;
  _offset?: Element | undefined;

        
      
        
          
  /**
 * A parameter that controlled the expansion process. These parameters may be used
 * by users of expanded value sets to check whether the expansion is suitable for a
 * particular purpose, or to pick the correct expansion.
 * The server decides which parameters to include here, but at a minimum, the list
 * SHOULD include all of the parameters that affect the $expand operation. If the
 * expansion will be persisted all of these parameters SHALL be included. If the
 * codeSystem on the server has a specified version then this version SHALL be
 * provided as a parameter in the expansion (note that not all code systems have a
 * version).
 */
  parameter?: Array<BackboneElement> | undefined;
  _parameter?: Element[] | undefined;

        
      
        
          
  /**
 * Name of the input parameter to the $expand operation; may be a server-assigned
 * name for additional default or other server-supplied parameters used to control
 * the expansion process.
 * The names are assigned at the discretion of the server.
 */
  name: string;
  _name?: Element | undefined;

        
      
        
          
            
  /**
 * The value of the parameter.
 */
  valueString?: string | undefined;
  _valueString?: Element | undefined;

          
            
  /**
 * The value of the parameter.
 */
  valueBoolean?: boolean | undefined;
  _valueBoolean?: Element | undefined;

          
            
  /**
 * The value of the parameter.
 */
  valueInteger?: number | undefined;
  _valueInteger?: Element | undefined;

          
            
  /**
 * The value of the parameter.
 */
  valueDecimal?: number | undefined;
  _valueDecimal?: Element | undefined;

          
            
  /**
 * The value of the parameter.
 */
  valueUri?: string | undefined;
  _valueUri?: Element | undefined;

          
            
  /**
 * The value of the parameter.
 */
  valueCode?: string | undefined;
  _valueCode?: Element | undefined;

          
            
  /**
 * The value of the parameter.
 */
  valueDateTime?: string | undefined;
  _valueDateTime?: Element | undefined;

          
        
      
        
          
  /**
 * The time at which the expansion was produced by the expanding system.
 * This SHOULD be a fully populated instant, but in some circumstances, value sets
 * are expanded by hand, and the expansion is published without that precision.
 */
  timestamp: string;
  _timestamp?: Element | undefined;

        
      
        
          
  /**
 * The total number of concepts in the expansion. If the number of concept nodes in
 * this resource is less than the stated number, then the server can return more
 * using the offset parameter.
 * Paging only applies to flat expansions.
 */
  total?: number | undefined;
  _total?: Element | undefined;

        
      
        
          
  /**
 * A Boolean value to indicate that this value set is authored for testing purposes
 * (or education/evaluation/marketing) and is not intended to be used for genuine
 * usage.
 * Allows filtering of value sets that are appropriate for use versus not.
 */
  experimental?: boolean | undefined;
  _experimental?: Element | undefined;

        
      
        
          
  /**
 * A formal identifier that is used to identify this value set when it is
 * represented in other formats, or referenced in a specification, model, design or
 * an instance.
 * Typically, this is used for identifiers that can go in an HL7 V3 II (instance
 * identifier) data type, and can then identify this value set outside of FHIR,
 * where it is not possible to use the logical URI.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * If this is set to 'true', then no new versions of the content logical definition
 * can be created.  Note: Other metadata might still change.
 * Normally immutability is set to 'false', which is the default assumption if it
 * is not populated.  Note that the implication is that if this is set to 'true',
 * there may be only one ValueSet version for this definition. Immutability tends
 * to be set to 'true' in one of two cases: - Where the value set, by the nature of
 * its usage, cannot change.  For example "All specializations of ACT in
 * ActClassCode" - Where there's no safe way to express the "Purpose" such that
 * someone else could safely make changes to the value set definition. Source
 * workflow control must guarantee that the same URI always yields the same
 * definition.
 */
  immutable?: boolean | undefined;
  _immutable?: Element | undefined;

        
      
        
          
  /**
 * A legal or geographic region in which the value set is intended to be used.
 * It may be possible for the value set to be used in jurisdictions other than
 * those for which it was originally designed or intended.
 */
  jurisdiction?: Array<CodeableConcept> | undefined;
  _jurisdiction?: Element[] | undefined;

        
      
        
          
  /**
 * A natural language name identifying the value set. This name should be usable as
 * an identifier for the module by machine processing applications such as code
 * generation.
 * The name is not expected to be globally unique. The name should be a simple
 * alphanumeric type name to ensure that it is machine-processing friendly.A name
 * should be provided unless the value set is a contained resource (e.g. an
 * anonymous value set in a profile). Most registries will require a name.
 */
  name?: string | undefined;
  _name?: Element | undefined;

        
      
        
          
  /**
 * The name of the organization or individual that published the value set.
 * Usually an organization but may be an individual. The publisher (or steward) of
 * the value set is the organization or individual primarily responsible for the
 * maintenance and upkeep of the value set. This is not necessarily the same
 * individual or organization that developed and initially authored the content.
 * The publisher is the primary point of contact for questions or issues with the
 * value set. This item SHOULD be populated unless the information is available
 * from context.
 */
  publisher?: string | undefined;
  _publisher?: Element | undefined;

        
      
        
          
  /**
 * Explanation of why this value set is needed and why it has been designed as it
 * has.
 * This element does not describe the usage of the value set. Instead, it provides
 * traceability of ''why'' the resource is either needed or ''why'' it is defined
 * as it is.  This may be used to point to source materials or specifications that
 * drove the structure of this value set.
 */
  purpose?: string | undefined;
  _purpose?: Element | undefined;

        
      
        
          
  /**
 * The status of this value set. Enables tracking the life-cycle of the content.
 * The status of the value set applies to the value set definition
 * (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have
 * a state.
 * Allows filtering of value sets that are appropriate for use versus not.See also
 * the [valueset-workflowStatus](extension-valueset-workflowstatus.html) extension
 * for additional status information related to the editorial process.
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * A short, descriptive, user-friendly title for the value set.
 * This name does not need to be machine-processing friendly and may contain
 * punctuation, white-space, etc.
 */
  title?: string | undefined;
  _title?: Element | undefined;

        
      
        
          
  /**
 * An absolute URI that is used to identify this value set when it is referenced in
 * a specification, model, design or an instance; also called its canonical
 * identifier. This SHOULD be globally unique and SHOULD be a literal address at
 * which at which an authoritative instance of this value set is (or will be)
 * published. This URL can be the target of a canonical reference. It SHALL remain
 * the same when the value set is stored on different servers.
 * Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.
 * Multiple instances may share the same URL if they have a distinct version.

The
 * determination of when to create a new version of a resource (same url, new
 * version) vs. defining a new artifact is up to the author.  Considerations for
 * making this decision are found in [Technical and Business
 * Versions](resource.html#versions). 

In some cases, the resource can no longer
 * be found at the stated url, but the url itself cannot change. Implementations
 * can use the [meta.source](resource.html#meta) element to indicate where the
 * current master source of the resource can be found.
 */
  url?: string | undefined;
  _url?: Element | undefined;

        
      
        
          
  /**
 * The content was developed with a focus and intent of supporting the contexts
 * that are listed. These contexts may be general categories (gender, age, ...) or
 * may be references to specific programs (insurance plans, studies, ...) and may
 * be used to assist with indexing and searching for appropriate value set
 * instances.
 * When multiple useContexts are specified, there is no expectation that all or any
 * of the contexts apply.
 */
  useContext?: Array<UsageContext> | undefined;
  _useContext?: Element[] | undefined;

        
      
        
          
  /**
 * The identifier that is used to identify this version of the value set when it is
 * referenced in a specification, model, design or instance. This is an arbitrary
 * value managed by the value set author and is not expected to be globally unique.
 * For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not
 * available. There is also no expectation that versions can be placed in a
 * lexicographical sequence.
 * There may be different value set instances that have the same identifier but
 * different versions.  The version can be appended to the url in a reference to
 * allow a reference to a particular business version of the value set with the
 * format [url]|[version].
 */
  version?: string | undefined;
  _version?: Element | undefined;

        
      
    }

  


  


  


  
    /**
 * VerificationResult
 * 
 * Describes validation requirements, source(s), status and dates for one or more
 * elements.
 * 
 * @see {@link http://hl7.org/fhir/R4B/VerificationResult.html}
 */
    export interface VerificationResult extends DomainResource {
      
      readonly resourceType: "VerificationResult";
      

      
        
          
  /**
 * Information about the entity attesting to information.
 */
  attestation?: BackboneElement | undefined;
  _attestation?: Element | undefined;

        
      
        
          
  /**
 * The method by which attested information was submitted/retrieved (manual; API;
 * Push).
 */
  communicationMethod?: CodeableConcept | undefined;
  _communicationMethod?: Element | undefined;

        
      
        
          
  /**
 * The date the information was attested to.
 */
  date?: string | undefined;
  _date?: Element | undefined;

        
      
        
          
  /**
 * When the who is asserting on behalf of another (organization or individual).
 */
  onBehalfOf?: Reference | undefined;
  _onBehalfOf?: Element | undefined;

        
      
        
          
  /**
 * A digital identity certificate associated with the proxy entity submitting
 * attested information on behalf of the attestation source.
 */
  proxyIdentityCertificate?: string | undefined;
  _proxyIdentityCertificate?: Element | undefined;

        
      
        
          
  /**
 * Signed assertion by the proxy entity indicating that they have the right to
 * submit attested information on behalf of the attestation source.
 */
  proxySignature?: Signature | undefined;
  _proxySignature?: Element | undefined;

        
      
        
          
  /**
 * A digital identity certificate associated with the attestation source.
 */
  sourceIdentityCertificate?: string | undefined;
  _sourceIdentityCertificate?: Element | undefined;

        
      
        
          
  /**
 * Signed assertion by the attestation source that they have attested to the
 * information.
 */
  sourceSignature?: Signature | undefined;
  _sourceSignature?: Element | undefined;

        
      
        
          
  /**
 * The individual or organization attesting to information.
 */
  who?: Reference | undefined;
  _who?: Element | undefined;

        
      
        
          
  /**
 * The result if validation fails (fatal; warning; record only; none).
 */
  failureAction?: CodeableConcept | undefined;
  _failureAction?: Element | undefined;

        
      
        
          
  /**
 * Frequency of revalidation.
 */
  frequency?: Timing | undefined;
  _frequency?: Element | undefined;

        
      
        
          
  /**
 * The date/time validation was last completed (including failed validations).
 */
  lastPerformed?: string | undefined;
  _lastPerformed?: Element | undefined;

        
      
        
          
  /**
 * The frequency with which the target must be validated (none; initial; periodic).
 */
  need?: CodeableConcept | undefined;
  _need?: Element | undefined;

        
      
        
          
  /**
 * The date when target is next validated, if appropriate.
 */
  nextScheduled?: string | undefined;
  _nextScheduled?: Element | undefined;

        
      
        
          
  /**
 * Information about the primary source(s) involved in validation.
 */
  primarySource?: Array<BackboneElement> | undefined;
  _primarySource?: Element[] | undefined;

        
      
        
          
  /**
 * Ability of the primary source to push updates/alerts (yes; no; undetermined).
 */
  canPushUpdates?: CodeableConcept | undefined;
  _canPushUpdates?: Element | undefined;

        
      
        
          
  /**
 * Method for communicating with the primary source (manual; API; Push).
 */
  communicationMethod?: Array<CodeableConcept> | undefined;
  _communicationMethod?: Element[] | undefined;

        
      
        
          
  /**
 * Type of alerts/updates the primary source can send (specific requested changes;
 * any changes; as defined by source).
 */
  pushTypeAvailable?: Array<CodeableConcept> | undefined;
  _pushTypeAvailable?: Element[] | undefined;

        
      
        
          
  /**
 * Type of primary source (License Board; Primary Education; Continuing Education;
 * Postal Service; Relationship owner; Registration Authority; legal source;
 * issuing source; authoritative source).
 */
  type?: Array<CodeableConcept> | undefined;
  _type?: Element[] | undefined;

        
      
        
          
  /**
 * When the target was validated against the primary source.
 */
  validationDate?: string | undefined;
  _validationDate?: Element | undefined;

        
      
        
          
  /**
 * Status of the validation of the target against the primary source (successful;
 * failed; unknown).
 */
  validationStatus?: CodeableConcept | undefined;
  _validationStatus?: Element | undefined;

        
      
        
          
  /**
 * Reference to the primary source.
 */
  who?: Reference | undefined;
  _who?: Element | undefined;

        
      
        
          
  /**
 * The validation status of the target (attested; validated; in process; requires
 * revalidation; validation failed; revalidation failed).
 */
  status: string;
  _status?: Element | undefined;

        
      
        
          
  /**
 * When the validation status was updated.
 */
  statusDate?: string | undefined;
  _statusDate?: Element | undefined;

        
      
        
          
  /**
 * A resource that was validated.
 */
  target?: Array<Reference> | undefined;
  _target?: Element[] | undefined;

        
      
        
          
  /**
 * The fhirpath location(s) within the resource that was validated.
 */
  targetLocation?: Array<string> | undefined;
  _targetLocation?: Element[] | undefined;

        
      
        
          
  /**
 * The primary process by which the target is validated (edit check; value set;
 * primary source; multiple sources; standalone; in context).
 */
  validationProcess?: Array<CodeableConcept> | undefined;
  _validationProcess?: Element[] | undefined;

        
      
        
          
  /**
 * What the target is validated against (nothing; primary source; multiple
 * sources).
 */
  validationType?: CodeableConcept | undefined;
  _validationType?: Element | undefined;

        
      
        
          
  /**
 * Information about the entity validating information.
 */
  validator?: Array<BackboneElement> | undefined;
  _validator?: Element[] | undefined;

        
      
        
          
  /**
 * Signed assertion by the validator that they have validated the information.
 */
  attestationSignature?: Signature | undefined;
  _attestationSignature?: Element | undefined;

        
      
        
          
  /**
 * A digital identity certificate associated with the validator.
 */
  identityCertificate?: string | undefined;
  _identityCertificate?: Element | undefined;

        
      
        
          
  /**
 * Reference to the organization validating information.
 */
  organization: Reference;
  _organization?: Element | undefined;

        
      
    }

  


  


  
    /**
 * VisionPrescription
 * 
 * An authorization for the provision of glasses and/or contact lenses to a
 * patient.
 * 
 * @see {@link http://hl7.org/fhir/R4B/VisionPrescription.html}
 */
    export interface VisionPrescription extends DomainResource {
      
      readonly resourceType: "VisionPrescription";
      

      
        
          
  /**
 * The date this resource was created.
 */
  created: string;
  _created?: Element | undefined;

        
      
        
          
  /**
 * The date (and perhaps time) when the prescription was written.
 * Jurisdictions determine the valid lifetime of a prescription. Typically vision
 * prescriptions are valid for two years from the date written.
 */
  dateWritten: string;
  _dateWritten?: Element | undefined;

        
      
        
          
  /**
 * A reference to a resource that identifies the particular occurrence of contact
 * between patient and health care provider during which the prescription was
 * issued.
 */
  encounter?: Reference | undefined;
  _encounter?: Element | undefined;

        
      
        
          
  /**
 * A unique identifier assigned to this vision prescription.
 */
  identifier?: Array<Identifier> | undefined;
  _identifier?: Element[] | undefined;

        
      
        
          
  /**
 * Contain the details of  the individual lens specifications and serves as the
 * authorization for the fullfillment by certified professionals.
 */
  lensSpecification: Array<BackboneElement>;
  _lensSpecification?: Element[] | undefined;

        
      
        
          
  /**
 * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
 */
  add?: number | undefined;
  _add?: Element | undefined;

        
      
        
          
  /**
 * Adjustment for astigmatism measured in integer degrees.
 * The limits are +180 and -180 degrees.
 */
  axis?: number | undefined;
  _axis?: Element | undefined;

        
      
        
          
  /**
 * Back curvature measured in millimetres.
 */
  backCurve?: number | undefined;
  _backCurve?: Element | undefined;

        
      
        
          
  /**
 * Brand recommendations or restrictions.
 */
  brand?: string | undefined;
  _brand?: Element | undefined;

        
      
        
          
  /**
 * Special color or pattern.
 */
  color?: string | undefined;
  _color?: Element | undefined;

        
      
        
          
  /**
 * Power adjustment for astigmatism measured in dioptres (0.25 units).
 */
  cylinder?: number | undefined;
  _cylinder?: Element | undefined;

        
      
        
          
  /**
 * Contact lens diameter measured in millimetres.
 */
  diameter?: number | undefined;
  _diameter?: Element | undefined;

        
      
        
          
  /**
 * The recommended maximum wear period for the lens.
 */
  duration?: Quantity | undefined;
  _duration?: Element | undefined;

        
      
        
          
  /**
 * The eye for which the lens specification applies.
 * May also appear as OD (oculus dexter) for the right eye and OS (oculus siniter)
 * for the left eye.
 */
  eye: string;
  _eye?: Element | undefined;

        
      
        
          
  /**
 * Notes for special requirements such as coatings and lens materials.
 */
  note?: Array<Annotation> | undefined;
  _note?: Element[] | undefined;

        
      
        
          
  /**
 * Contact lens power measured in dioptres (0.25 units).
 */
  power?: number | undefined;
  _power?: Element | undefined;

        
      
        
          
  /**
 * Allows for adjustment on two axis.
 */
  prism?: Array<BackboneElement> | undefined;
  _prism?: Element[] | undefined;

        
      
        
          
  /**
 * Amount of prism to compensate for eye alignment in fractional units.
 */
  amount: number;
  _amount?: Element | undefined;

        
      
        
          
  /**
 * The relative base, or reference lens edge, for the prism.
 */
  base: string;
  _base?: Element | undefined;

        
      
        
          
  /**
 * Identifies the type of vision correction product which is required for the
 * patient.
 */
  product: CodeableConcept;
  _product?: Element | undefined;

        
      
        
          
  /**
 * Lens power measured in dioptres (0.25 units).
 * The value is negative for near-sighted and positive for far sighted.
Often
 * insurance will not cover a lens with power between +75 and -75.
 */
  sphere?: number | undefined;
  _sphere?: Element | undefined;

        
      
        
          
  /**
 * A resource reference to the person to whom the vision prescription applies.
 */
  patient: Reference;
  _patient?: Element | undefined;

        
      
        
          
  /**
 * The healthcare professional responsible for authorizing the prescription.
 */
  prescriber: Reference;
  _prescriber?: Element | undefined;

        
      
        
          
  /**
 * The status of the resource instance.
 * This element is labeled as a modifier because the status contains codes that
 * mark the resource as not currently valid.
 */
  status: string;
  _status?: Element | undefined;

        
      
    }

  


  


  


  


  


  


  


  


  


  


  

