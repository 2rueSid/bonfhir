/* eslint-disable @typescript-eslint/no-explicit-any */
import {
  <% for (const valueSet of fhir.requiredBindingValueSets) { -%>
    <%= valueSet.safeName %>,
  <% } -%>
  <% for (const structureDef of fhir.structureDefinitions) { -%>
    <%= structureDef.type -%>,
    <% for (const backboneElement of structureDef.backboneElements || []) { -%>
      <%= backboneElement.rootElement.backboneElementName %>,
    <% } -%>
  <% } -%>
  AnyResourceType,
  ResourceType
} from "./fhir-types.codegen";

export interface OperationParameters {
  operation: string | null | undefined;
  resourceType?: ResourceType | null | undefined;
  resourceId?: string | null | undefined;
  parameters?: object | null | undefined;
  affectsState: boolean;
}

/**
 * Define what an operation is.
 */
export interface Operation<TOperationResult = unknown> {
  /**
   * Get the parameters of the operation.
   */
  getParameters(): OperationParameters;

  /**
   * This methods is a placeholder to preserve type inference for TypeScript.
   * It is necessary for the {@link ExtractOperationResultType} type helper to work properly, otherwise TypeScript
   * erase the generic parameter type.
   * It should systematically throw an error when called.
   */
  _resultTypeDoNotUse?: TOperationResult;
}

/**
 * Extract the result type of an operation.
 */
export type ExtractOperationResultType<T extends Operation> = T extends Operation<infer TOperationResult>
  ? TOperationResult
  : never;

<% for (const operationDefinition of fhir.operationDefinitionsWithResourceVariants.filter(x => x.affectsState != undefined)) {
  let resultType = "unknown";
  if (operationDefinition.outParameters.length >= 2) {
    resultType = `${operationDefinition.safeName}OperationResult`
  } else if (operationDefinition.outParameters.length === 1 && operationDefinition.outParameters[0].name === "return") {
    resultType = operationDefinition.outParameters[0].tsType;
  } -%>
  <%= operationDefinition.jsDoc %>
  export class <%= operationDefinition.safeName %>Operation implements Operation<<%= resultType %>> {
    <%= operationDefinition.jsDoc %>
    <% if (operationDefinition.instance || operationDefinition.inParameters.length > 0 || operationDefinition.firstResource?.abstract) { -%>
      constructor(public parameters: <%= operationDefinition.safeName %>OperationParameters) {}
    <% } -%>

    public getParameters(): OperationParameters {
      return {
        operation: "$<%= operationDefinition.code %>",
        <% if (operationDefinition.type || operationDefinition.instance) { -%>
          <% if (operationDefinition.firstResource?.abstract) { -%>
            resourceType: this.parameters.resourceType,
          <% } else { -%>
            resourceType: "<%= operationDefinition.resource[0] %>",
          <% } -%>
        <% } -%>
        <% if (operationDefinition.instance) { -%>
          resourceId: this.parameters.resourceId,
        <% } -%>
        <% if (operationDefinition.instance || operationDefinition.inParameters.length > 0) { -%>
          parameters: this.parameters,
        <% } -%>
        affectsState: <%= operationDefinition.affectsState %>
      }
    }

    public _resultTypeDoNotUse?: <%= resultType %>;
  }

  <% if (operationDefinition.instance || operationDefinition.inParameters.length > 0 || operationDefinition.firstResource?.abstract) { -%>
  export interface <%= operationDefinition.safeName %>OperationParameters {
    <% if (operationDefinition.firstResource?.abstract) { -%>
      resourceType: AnyResourceType,
    <% } -%>
    <% if (operationDefinition.instance) { -%>
      <% if (operationDefinition.type || operationDefinition.system) { -%>
        /**
        * The id of the resource to perform the operation on.
        */
        resourceId?: string | null | undefined;
      <% } else { -%>
        /**
          * The id of the resource to perform the operation on.
          */
        resourceId: string;
      <% } -%>
    <% } -%>
    <% for (const parameter of operationDefinition.inParameters) { -%>
      <%= parameter.jsDoc %>
      "<%= parameter.name %>"<% if (parameter.isOptional) { %>?<% } %>: <%= parameter.tsType %>;
    <% } -%>
  }
  <% } -%>

  <% if (operationDefinition.outParameters.length >= 2) { -%>
  export interface <%= operationDefinition.safeName %>OperationResult {
    <% for (const parameter of operationDefinition.outParameters) { -%>
      <%= parameter.jsDoc %>
      "<%= parameter.name %>"<% if (parameter.isOptional) { %>?<% } %>: <%= parameter.tsType %>;
    <% } -%>
  }
  <% } -%>

  <% for (const part of operationDefinition.parts) { -%>
    <%= part.rootElement.jsDoc %>
    export interface <%= part.rootElement.partName %> {
    }
  <% } -%>

<% } -%> 
