/**
 * FHIR Definitions for <%= fhir.release %>/<%= fhir.version %>
 */

/* eslint-disable @typescript-eslint/no-empty-interface */

<% for (const valueSet of fhir.requiredBindingValueSets) { %>
  <%= valueSet.jsDoc %>
  export type <%= valueSet.safeName %> =
  <% if (valueSet.expansion?.contains?.length) { %>
    <% for (const expansion of valueSet.expansion?.contains || []) { %>
      | "<%= expansion.code %>"
    <% } %>;
  <% } else { %>
    string;
  <% } %>
<% } %>

<% const renderElement = (element) => { %>
  <%= element.jsDoc %>
  <%= element.name %><% if (element.isOptional) { %>?<% } %>: <%= element.tsType %>;
  _<%= element.name %>?: Element<% if (element.isArray) { %>[]<% } %> | undefined;
<% } %>

<% for (const structureDef of fhir.structureDefinitions) { %>

  <% for (const backboneElement of structureDef.backboneElements) { %>
    <%= backboneElement.rootElement.jsDoc %>
    export interface <%= backboneElement.rootElement.backboneElementName %> extends BackboneElement {

      <% for (const element of backboneElement.ownRootElementsWithChoices) { %>
        <%= renderElement(element) %>
      <% } %>

    }
  <% } %>

  <% if (structureDef.derivation != "constraint" && structureDef.kind != "primitive-type") { %>
    <%= structureDef.jsDoc %>
    export interface <%= structureDef.type %> <% if (structureDef.base?.type) { %>extends <%= structureDef.base.type %> <% } %>{
      <% if (structureDef.isDomainResource) { %>
      readonly resourceType: "<%= structureDef.type %>";
      <% } else if (structureDef.isResource) { %>
      readonly resourceType: string;
      <% } %>

      <% for (const element of structureDef.ownRootElementsWithChoices) { %>
        <%= renderElement(element) %>
      <% } %>
    }

  <% } %>
<% } %>

/**
 *  Create a new type from T with K attributes required.
 */
export type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/**
* Create a new type from a {@link DomainResource} that contains additional guaranteed properties when the resource
* is retrieved from the server.
*/
export type Retrieved<TDomainResource extends DomainResource> = WithRequired<TDomainResource, "id"> & { meta: WithRequired<Meta, "versionId" | "lastUpdated"> };

/**
 * All the possible resource types
 */
export type FhirResource =
  <% for (const structureDef of fhir.resources) { %> | <%= structureDef.type %> <% } %>;

/**
 * All the possible resource types as string
 */
export type FhirResourceType = FhirResource["resourceType"];

/**
 * Allow referencing a resource type from its string {@link FhirResourceType} representation.
 */
export type ExtractFhirResource<TResourceType extends FhirResourceType> = Extract<
  FhirResource,
  { resourceType: TResourceType }
>;

/**
 * Return true if the object is a FhirResource of a specific type.
 */
export function isFhirResource<TResourceType extends FhirResourceType>(
  type: TResourceType,
  object: unknown | null | undefined
): object is ExtractFhirResource<TResourceType> {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return (object as any)?.resourceType === type;
}

/**
 * All the possible domain resource types
 */
export type FhirDomainResource =
  <% for (const structureDef of fhir.domainResources) { %> | <%= structureDef.type %> <% } %>;

/**
 * All the possible domain resource types as string
 */
export type FhirDomainResourceType = FhirDomainResource["resourceType"];

/**
 * Allow referencing domain resource type from its string {@link FhirDomainResourceType} representation.
 */
export type ExtractFhirDomainResource<TDomainResourceType extends FhirDomainResourceType> = Extract<
  FhirDomainResource,
  { resourceType: TDomainResourceType }
>;

/**
 * Return true if the object is a FhirDomainResource of a specific type.
 */
export function isFhirDomainResource<TDomainResourceType extends FhirDomainResourceType>(
  type: TDomainResourceType,
  object: unknown | null | undefined
): object is ExtractFhirDomainResource<TDomainResourceType> {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return (object as any)?.resourceType === type;
}
